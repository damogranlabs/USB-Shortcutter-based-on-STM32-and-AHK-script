
USBShortcutter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000812c  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f8  08008270  08008270  00018270  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008668  08008668  00020340  2**0
                  CONTENTS
  4 .ARM          00000000  08008668  08008668  00020340  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008668  08008668  00020340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008668  08008668  00018668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800866c  0800866c  0001866c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000340  20000000  08008670  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000858  20000340  080089b0  00020340  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b98  080089b0  00020b98  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020340  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014cf6  00000000  00000000  00020369  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ad9  00000000  00000000  0003505f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ea8  00000000  00000000  00038b38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cc0  00000000  00000000  000399e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b344  00000000  00000000  0003a6a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011d4e  00000000  00000000  000559e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d858  00000000  00000000  00067732  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f4f8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004028  00000000  00000000  000f5008  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000340 	.word	0x20000340
 800015c:	00000000 	.word	0x00000000
 8000160:	08008254 	.word	0x08008254

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000344 	.word	0x20000344
 800017c:	08008254 	.word	0x08008254

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ce:	f1a4 0401 	sub.w	r4, r4, #1
 80002d2:	d1e9      	bne.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ac2:	69da      	ldr	r2, [r3, #28]
 8000ac4:	4907      	ldr	r1, [pc, #28]	; (8000ae4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ace:	69da      	ldr	r2, [r3, #28]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
}
 8000ad8:	bf00      	nop
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bc80      	pop	{r7}
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	6039      	str	r1, [r7, #0]
#if defined(GPIO_BRR_BR_0)
  WRITE_REG(GPIOx->BRR, PinMask);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	683a      	ldr	r2, [r7, #0]
 8000af6:	629a      	str	r2, [r3, #40]	; 0x28
#else
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
#endif /* GPIO_BRR_BR_0 */
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr
	...

08000b04 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
 8000b18:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000b1a:	2004      	movs	r0, #4
 8000b1c:	f7ff ffcc 	bl	8000ab8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000b20:	2020      	movs	r0, #32
 8000b22:	f7ff ffc9 	bl	8000ab8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000b26:	2001      	movs	r0, #1
 8000b28:	f7ff ffc6 	bl	8000ab8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000b2c:	2002      	movs	r0, #2
 8000b2e:	f7ff ffc3 	bl	8000ab8 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, D1_Pin|D2_Pin|D3_Pin|D4_Pin);
 8000b32:	21f0      	movs	r1, #240	; 0xf0
 8000b34:	4870      	ldr	r0, [pc, #448]	; (8000cf8 <MX_GPIO_Init+0x1f4>)
 8000b36:	f7ff ffd7 	bl	8000ae8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LD4_Pin|LD3_Pin);
 8000b3a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000b3e:	486f      	ldr	r0, [pc, #444]	; (8000cfc <MX_GPIO_Init+0x1f8>)
 8000b40:	f7ff ffd2 	bl	8000ae8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = B1_Pin;
 8000b44:	2302      	movs	r3, #2
 8000b46:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b50:	463b      	mov	r3, r7
 8000b52:	4619      	mov	r1, r3
 8000b54:	4869      	ldr	r0, [pc, #420]	; (8000cfc <MX_GPIO_Init+0x1f8>)
 8000b56:	f001 fe59 	bl	800280c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = B2_Pin;
 8000b5a:	2304      	movs	r3, #4
 8000b5c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8000b66:	463b      	mov	r3, r7
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4864      	ldr	r0, [pc, #400]	; (8000cfc <MX_GPIO_Init+0x1f8>)
 8000b6c:	f001 fe4e 	bl	800280c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = B3_Pin;
 8000b70:	2308      	movs	r3, #8
 8000b72:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	463b      	mov	r3, r7
 8000b7e:	4619      	mov	r1, r3
 8000b80:	485e      	ldr	r0, [pc, #376]	; (8000cfc <MX_GPIO_Init+0x1f8>)
 8000b82:	f001 fe43 	bl	800280c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = B4_Pin;
 8000b86:	2301      	movs	r3, #1
 8000b88:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(B4_GPIO_Port, &GPIO_InitStruct);
 8000b92:	463b      	mov	r3, r7
 8000b94:	4619      	mov	r1, r3
 8000b96:	4858      	ldr	r0, [pc, #352]	; (8000cf8 <MX_GPIO_Init+0x1f4>)
 8000b98:	f001 fe38 	bl	800280c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = B5_Pin;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(B5_GPIO_Port, &GPIO_InitStruct);
 8000ba8:	463b      	mov	r3, r7
 8000baa:	4619      	mov	r1, r3
 8000bac:	4852      	ldr	r0, [pc, #328]	; (8000cf8 <MX_GPIO_Init+0x1f4>)
 8000bae:	f001 fe2d 	bl	800280c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = B6_Pin;
 8000bb2:	2304      	movs	r3, #4
 8000bb4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(B6_GPIO_Port, &GPIO_InitStruct);
 8000bbe:	463b      	mov	r3, r7
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	484d      	ldr	r0, [pc, #308]	; (8000cf8 <MX_GPIO_Init+0x1f4>)
 8000bc4:	f001 fe22 	bl	800280c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = B7_Pin;
 8000bc8:	2308      	movs	r3, #8
 8000bca:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(B7_GPIO_Port, &GPIO_InitStruct);
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4847      	ldr	r0, [pc, #284]	; (8000cf8 <MX_GPIO_Init+0x1f4>)
 8000bda:	f001 fe17 	bl	800280c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = D1_Pin;
 8000bde:	2310      	movs	r3, #16
 8000be0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000be2:	2301      	movs	r3, #1
 8000be4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(D1_GPIO_Port, &GPIO_InitStruct);
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4840      	ldr	r0, [pc, #256]	; (8000cf8 <MX_GPIO_Init+0x1f4>)
 8000bf8:	f001 fe08 	bl	800280c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = D2_Pin;
 8000bfc:	2320      	movs	r3, #32
 8000bfe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c00:	2301      	movs	r3, #1
 8000c02:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(D2_GPIO_Port, &GPIO_InitStruct);
 8000c10:	463b      	mov	r3, r7
 8000c12:	4619      	mov	r1, r3
 8000c14:	4838      	ldr	r0, [pc, #224]	; (8000cf8 <MX_GPIO_Init+0x1f4>)
 8000c16:	f001 fdf9 	bl	800280c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = D3_Pin;
 8000c1a:	2340      	movs	r3, #64	; 0x40
 8000c1c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(D3_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	463b      	mov	r3, r7
 8000c30:	4619      	mov	r1, r3
 8000c32:	4831      	ldr	r0, [pc, #196]	; (8000cf8 <MX_GPIO_Init+0x1f4>)
 8000c34:	f001 fdea 	bl	800280c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = D4_Pin;
 8000c38:	2380      	movs	r3, #128	; 0x80
 8000c3a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c40:	2300      	movs	r3, #0
 8000c42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4829      	ldr	r0, [pc, #164]	; (8000cf8 <MX_GPIO_Init+0x1f4>)
 8000c52:	f001 fddb 	bl	800280c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = S1_Pin;
 8000c56:	2310      	movs	r3, #16
 8000c58:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(S1_GPIO_Port, &GPIO_InitStruct);
 8000c62:	463b      	mov	r3, r7
 8000c64:	4619      	mov	r1, r3
 8000c66:	4825      	ldr	r0, [pc, #148]	; (8000cfc <MX_GPIO_Init+0x1f8>)
 8000c68:	f001 fdd0 	bl	800280c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = S2_Pin;
 8000c6c:	2320      	movs	r3, #32
 8000c6e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000c70:	2300      	movs	r3, #0
 8000c72:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000c74:	2301      	movs	r3, #1
 8000c76:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(S2_GPIO_Port, &GPIO_InitStruct);
 8000c78:	463b      	mov	r3, r7
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	481f      	ldr	r0, [pc, #124]	; (8000cfc <MX_GPIO_Init+0x1f8>)
 8000c7e:	f001 fdc5 	bl	800280c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = S3_Pin;
 8000c82:	2301      	movs	r3, #1
 8000c84:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(S3_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	463b      	mov	r3, r7
 8000c90:	4619      	mov	r1, r3
 8000c92:	481b      	ldr	r0, [pc, #108]	; (8000d00 <MX_GPIO_Init+0x1fc>)
 8000c94:	f001 fdba 	bl	800280c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = S4_Pin;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(S4_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	463b      	mov	r3, r7
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4815      	ldr	r0, [pc, #84]	; (8000d00 <MX_GPIO_Init+0x1fc>)
 8000caa:	f001 fdaf 	bl	800280c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD4_Pin;
 8000cae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cb2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	480c      	ldr	r0, [pc, #48]	; (8000cfc <MX_GPIO_Init+0x1f8>)
 8000cca:	f001 fd9f 	bl	800280c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD3_Pin;
 8000cce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cd2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4804      	ldr	r0, [pc, #16]	; (8000cfc <MX_GPIO_Init+0x1f8>)
 8000cea:	f001 fd8f 	bl	800280c <LL_GPIO_Init>

}
 8000cee:	bf00      	nop
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40020000 	.word	0x40020000
 8000cfc:	40020800 	.word	0x40020800
 8000d00:	40020400 	.word	0x40020400

08000d04 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <LL_RCC_HSE_EnableBypass+0x18>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a03      	ldr	r2, [pc, #12]	; (8000d1c <LL_RCC_HSE_EnableBypass+0x18>)
 8000d0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d12:	6013      	str	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	40023800 	.word	0x40023800

08000d20 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <LL_RCC_HSE_Enable+0x18>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a03      	ldr	r2, [pc, #12]	; (8000d38 <LL_RCC_HSE_Enable+0x18>)
 8000d2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d2e:	6013      	str	r3, [r2, #0]
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr
 8000d38:	40023800 	.word	0x40023800

08000d3c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == RCC_CR_HSERDY) ? 1UL : 0UL);
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <LL_RCC_HSE_IsReady+0x20>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000d4c:	d101      	bne.n	8000d52 <LL_RCC_HSE_IsReady+0x16>
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e000      	b.n	8000d54 <LL_RCC_HSE_IsReady+0x18>
 8000d52:	2300      	movs	r3, #0
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr
 8000d5c:	40023800 	.word	0x40023800

08000d60 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <LL_RCC_SetSysClkSource+0x24>)
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	f023 0203 	bic.w	r2, r3, #3
 8000d70:	4904      	ldr	r1, [pc, #16]	; (8000d84 <LL_RCC_SetSysClkSource+0x24>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	608b      	str	r3, [r1, #8]
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800

08000d88 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000d8c:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <LL_RCC_GetSysClkSource+0x14>)
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	f003 030c 	and.w	r3, r3, #12
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	40023800 	.word	0x40023800

08000da0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <LL_RCC_SetAHBPrescaler+0x24>)
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000db0:	4904      	ldr	r1, [pc, #16]	; (8000dc4 <LL_RCC_SetAHBPrescaler+0x24>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	608b      	str	r3, [r1, #8]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40023800 	.word	0x40023800

08000dc8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <LL_RCC_SetAPB1Prescaler+0x24>)
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000dd8:	4904      	ldr	r1, [pc, #16]	; (8000dec <LL_RCC_SetAPB1Prescaler+0x24>)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	608b      	str	r3, [r1, #8]
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800

08000df0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000e00:	4904      	ldr	r1, [pc, #16]	; (8000e14 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	608b      	str	r3, [r1, #8]
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	40023800 	.word	0x40023800

08000e18 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000e1c:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <LL_RCC_PLL_Enable+0x18>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a03      	ldr	r2, [pc, #12]	; (8000e30 <LL_RCC_PLL_Enable+0x18>)
 8000e22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e26:	6013      	str	r3, [r2, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr
 8000e30:	40023800 	.word	0x40023800

08000e34 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <LL_RCC_PLL_IsReady+0x20>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000e44:	d101      	bne.n	8000e4a <LL_RCC_PLL_IsReady+0x16>
 8000e46:	2301      	movs	r3, #1
 8000e48:	e000      	b.n	8000e4c <LL_RCC_PLL_IsReady+0x18>
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr
 8000e54:	40023800 	.word	0x40023800

08000e58 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL | RCC_CFGR_PLLDIV, Source | PLLMul | PLLDiv);
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <LL_RCC_PLL_ConfigDomain_SYS+0x30>)
 8000e66:	689b      	ldr	r3, [r3, #8]
 8000e68:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8000e6c:	68f9      	ldr	r1, [r7, #12]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	4319      	orrs	r1, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	430b      	orrs	r3, r1
 8000e76:	4904      	ldr	r1, [pc, #16]	; (8000e88 <LL_RCC_PLL_ConfigDomain_SYS+0x30>)
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	608b      	str	r3, [r1, #8]
}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	40023800 	.word	0x40023800

08000e8c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <LL_FLASH_SetLatency+0x24>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f023 0201 	bic.w	r2, r3, #1
 8000e9c:	4904      	ldr	r1, [pc, #16]	; (8000eb0 <LL_FLASH_SetLatency+0x24>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	600b      	str	r3, [r1, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	40023c00 	.word	0x40023c00

08000eb4 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <LL_FLASH_GetLatency+0x14>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 0301 	and.w	r3, r3, #1
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr
 8000ec8:	40023c00 	.word	0x40023c00

08000ecc <LL_FLASH_Enable64bitAccess>:
  * @brief  Enable 64-bit access
  * @rmtoll FLASH_ACR    ACC64         LL_FLASH_Enable64bitAccess
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_Enable64bitAccess(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  SET_BIT(FLASH->ACR, FLASH_ACR_ACC64);
 8000ed0:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <LL_FLASH_Enable64bitAccess+0x18>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a03      	ldr	r2, [pc, #12]	; (8000ee4 <LL_FLASH_Enable64bitAccess+0x18>)
 8000ed6:	f043 0304 	orr.w	r3, r3, #4
 8000eda:	6013      	str	r3, [r2, #0]
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	40023c00 	.word	0x40023c00

08000ee8 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8000ef8:	4904      	ldr	r1, [pc, #16]	; (8000f0c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	600b      	str	r3, [r1, #0]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	40007000 	.word	0x40007000

08000f10 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->ODR, READ_REG(GPIOx->ODR) ^ PinMask);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	695a      	ldr	r2, [r3, #20]
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	405a      	eors	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	615a      	str	r2, [r3, #20]
}
 8000f26:	bf00      	nop
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr

08000f30 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint32_t next_toggle_time = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3a:	f000 fb18 	bl	800156e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3e:	f000 f85f 	bl	8001000 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f42:	f7ff fddf 	bl	8000b04 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000f46:	f000 fa77 	bl	8001438 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000f4a:	f004 fc4d 	bl	80057e8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  if (ring_buffer_init(&key_press_buff, KEY_PRESS_BUFF_SIZE) != RB_OK) Error_Handler();
 8000f4e:	2114      	movs	r1, #20
 8000f50:	4826      	ldr	r0, [pc, #152]	; (8000fec <main+0xbc>)
 8000f52:	f005 f98f 	bl	8006274 <ring_buffer_init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <main+0x30>
 8000f5c:	f000 f89e 	bl	800109c <Error_Handler>

  register_button(B1_GPIO_Port, B1_Pin, BTN_MODE_SINGLEPRESS);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2102      	movs	r1, #2
 8000f64:	4822      	ldr	r0, [pc, #136]	; (8000ff0 <main+0xc0>)
 8000f66:	f005 f91b 	bl	80061a0 <register_button>
  register_button(B2_GPIO_Port, B2_Pin, BTN_MODE_SINGLEPRESS);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2104      	movs	r1, #4
 8000f6e:	4820      	ldr	r0, [pc, #128]	; (8000ff0 <main+0xc0>)
 8000f70:	f005 f916 	bl	80061a0 <register_button>
  register_button(B3_GPIO_Port, B3_Pin, BTN_MODE_SINGLEPRESS);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2108      	movs	r1, #8
 8000f78:	481d      	ldr	r0, [pc, #116]	; (8000ff0 <main+0xc0>)
 8000f7a:	f005 f911 	bl	80061a0 <register_button>
  register_button(B4_GPIO_Port, B4_Pin, BTN_MODE_SINGLEPRESS);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2101      	movs	r1, #1
 8000f82:	481c      	ldr	r0, [pc, #112]	; (8000ff4 <main+0xc4>)
 8000f84:	f005 f90c 	bl	80061a0 <register_button>
  register_button(B5_GPIO_Port, B5_Pin, BTN_MODE_SINGLEPRESS);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2102      	movs	r1, #2
 8000f8c:	4819      	ldr	r0, [pc, #100]	; (8000ff4 <main+0xc4>)
 8000f8e:	f005 f907 	bl	80061a0 <register_button>
  register_button(B6_GPIO_Port, B6_Pin, BTN_MODE_SINGLEPRESS);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2104      	movs	r1, #4
 8000f96:	4817      	ldr	r0, [pc, #92]	; (8000ff4 <main+0xc4>)
 8000f98:	f005 f902 	bl	80061a0 <register_button>
  register_button(B7_GPIO_Port, B7_Pin, BTN_MODE_SINGLEPRESS);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2108      	movs	r1, #8
 8000fa0:	4814      	ldr	r0, [pc, #80]	; (8000ff4 <main+0xc4>)
 8000fa2:	f005 f8fd 	bl	80061a0 <register_button>

  register_button(S3_GPIO_Port, S3_Pin, BTN_MODE_SINGLEPRESS);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2101      	movs	r1, #1
 8000faa:	4813      	ldr	r0, [pc, #76]	; (8000ff8 <main+0xc8>)
 8000fac:	f005 f8f8 	bl	80061a0 <register_button>
  register_button(S4_GPIO_Port, S4_Pin, BTN_MODE_SINGLEPRESS);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2102      	movs	r1, #2
 8000fb4:	4810      	ldr	r0, [pc, #64]	; (8000ff8 <main+0xc8>)
 8000fb6:	f005 f8f3 	bl	80061a0 <register_button>

  printString("System initialized.");
 8000fba:	4810      	ldr	r0, [pc, #64]	; (8000ffc <main+0xcc>)
 8000fbc:	f005 fa84 	bl	80064c8 <printString>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1) {
     if (HAL_GetTick() > next_toggle_time) {
 8000fc0:	f000 fb3a 	bl	8001638 <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d20a      	bcs.n	8000fe2 <main+0xb2>
      next_toggle_time = HAL_GetTick() + 1000;
 8000fcc:	f000 fb34 	bl	8001638 <HAL_GetTick>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000fd6:	607b      	str	r3, [r7, #4]
      LL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000fd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fdc:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <main+0xc0>)
 8000fde:	f7ff ff97 	bl	8000f10 <LL_GPIO_TogglePin>
    }

    handle_buttons();
 8000fe2:	f005 f833 	bl	800604c <handle_buttons>
    handle_usb();
 8000fe6:	f004 ffd7 	bl	8005f98 <handle_usb>
     if (HAL_GetTick() > next_toggle_time) {
 8000fea:	e7e9      	b.n	8000fc0 <main+0x90>
 8000fec:	20000398 	.word	0x20000398
 8000ff0:	40020800 	.word	0x40020800
 8000ff4:	40020000 	.word	0x40020000
 8000ff8:	40020400 	.word	0x40020400
 8000ffc:	08008270 	.word	0x08008270

08001000 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0

  LL_FLASH_Enable64bitAccess();
 8001004:	f7ff ff62 	bl	8000ecc <LL_FLASH_Enable64bitAccess>

  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8001008:	2001      	movs	r0, #1
 800100a:	f7ff ff3f 	bl	8000e8c <LL_FLASH_SetLatency>

  if (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1) {
 800100e:	f7ff ff51 	bl	8000eb4 <LL_FLASH_GetLatency>
 8001012:	4603      	mov	r3, r0
 8001014:	2b01      	cmp	r3, #1
 8001016:	d001      	beq.n	800101c <SystemClock_Config+0x1c>
    Error_Handler();
 8001018:	f000 f840 	bl	800109c <Error_Handler>
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800101c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001020:	f7ff ff62 	bl	8000ee8 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_EnableBypass();
 8001024:	f7ff fe6e 	bl	8000d04 <LL_RCC_HSE_EnableBypass>
  LL_RCC_HSE_Enable();
 8001028:	f7ff fe7a 	bl	8000d20 <LL_RCC_HSE_Enable>

  /* Wait till HSE is ready */
  while (LL_RCC_HSE_IsReady() != 1) {
 800102c:	bf00      	nop
 800102e:	f7ff fe85 	bl	8000d3c <LL_RCC_HSE_IsReady>
 8001032:	4603      	mov	r3, r0
 8001034:	2b01      	cmp	r3, #1
 8001036:	d1fa      	bne.n	800102e <SystemClock_Config+0x2e>

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLL_MUL_12, LL_RCC_PLL_DIV_3);
 8001038:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800103c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
 8001040:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001044:	f7ff ff08 	bl	8000e58 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001048:	f7ff fee6 	bl	8000e18 <LL_RCC_PLL_Enable>

  /* Wait till PLL is ready */
  while (LL_RCC_PLL_IsReady() != 1) {
 800104c:	bf00      	nop
 800104e:	f7ff fef1 	bl	8000e34 <LL_RCC_PLL_IsReady>
 8001052:	4603      	mov	r3, r0
 8001054:	2b01      	cmp	r3, #1
 8001056:	d1fa      	bne.n	800104e <SystemClock_Config+0x4e>

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001058:	2000      	movs	r0, #0
 800105a:	f7ff fea1 	bl	8000da0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800105e:	2000      	movs	r0, #0
 8001060:	f7ff feb2 	bl	8000dc8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001064:	2000      	movs	r0, #0
 8001066:	f7ff fec3 	bl	8000df0 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800106a:	2003      	movs	r0, #3
 800106c:	f7ff fe78 	bl	8000d60 <LL_RCC_SetSysClkSource>

  /* Wait till System clock is ready */
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL) {
 8001070:	bf00      	nop
 8001072:	f7ff fe89 	bl	8000d88 <LL_RCC_GetSysClkSource>
 8001076:	4603      	mov	r3, r0
 8001078:	2b0c      	cmp	r3, #12
 800107a:	d1fa      	bne.n	8001072 <SystemClock_Config+0x72>

  }
  LL_SetSystemCoreClock(32000000);
 800107c:	4806      	ldr	r0, [pc, #24]	; (8001098 <SystemClock_Config+0x98>)
 800107e:	f003 f953 	bl	8004328 <LL_SetSystemCoreClock>

  /* Update the time base */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK) {
 8001082:	2000      	movs	r0, #0
 8001084:	f000 fa8c 	bl	80015a0 <HAL_InitTick>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <SystemClock_Config+0x92>
    Error_Handler();
 800108e:	f000 f805 	bl	800109c <Error_Handler>
  };
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	01e84800 	.word	0x01e84800

0800109c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr

080010a8 <assert_failed>:
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line) {
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
   tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr

080010bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <HAL_MspInit+0x5c>)
 80010c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c6:	4a14      	ldr	r2, [pc, #80]	; (8001118 <HAL_MspInit+0x5c>)
 80010c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010cc:	6253      	str	r3, [r2, #36]	; 0x24
 80010ce:	4b12      	ldr	r3, [pc, #72]	; (8001118 <HAL_MspInit+0x5c>)
 80010d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010da:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <HAL_MspInit+0x5c>)
 80010dc:	6a1b      	ldr	r3, [r3, #32]
 80010de:	4a0e      	ldr	r2, [pc, #56]	; (8001118 <HAL_MspInit+0x5c>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6213      	str	r3, [r2, #32]
 80010e6:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <HAL_MspInit+0x5c>)
 80010e8:	6a1b      	ldr	r3, [r3, #32]
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <HAL_MspInit+0x5c>)
 80010f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f6:	4a08      	ldr	r2, [pc, #32]	; (8001118 <HAL_MspInit+0x5c>)
 80010f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fc:	6253      	str	r3, [r2, #36]	; 0x24
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_MspInit+0x5c>)
 8001100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800110a:	2007      	movs	r0, #7
 800110c:	f000 fb6a 	bl	80017e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40023800 	.word	0x40023800

0800111c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr

08001128 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112c:	e7fe      	b.n	800112c <HardFault_Handler+0x4>

0800112e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001132:	e7fe      	b.n	8001132 <MemManage_Handler+0x4>

08001134 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <BusFault_Handler+0x4>

0800113a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800113e:	e7fe      	b.n	800113e <UsageFault_Handler+0x4>

08001140 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr

08001164 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001168:	f000 fa54 	bl	8001614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}

08001170 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt.
  */
void USB_HP_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <USB_HP_IRQHandler+0x10>)
 8001176:	f000 fc8d 	bl	8001a94 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000850 	.word	0x20000850

08001184 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001188:	4802      	ldr	r0, [pc, #8]	; (8001194 <USB_LP_IRQHandler+0x10>)
 800118a:	f000 fc83 	bl	8001a94 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	20000850 	.word	0x20000850

08001198 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr

080011a4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <_sbrk+0x50>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d102      	bne.n	80011ba <_sbrk+0x16>
		heap_end = &end;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <_sbrk+0x50>)
 80011b6:	4a10      	ldr	r2, [pc, #64]	; (80011f8 <_sbrk+0x54>)
 80011b8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <_sbrk+0x50>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <_sbrk+0x50>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4413      	add	r3, r2
 80011c8:	466a      	mov	r2, sp
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d907      	bls.n	80011de <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80011ce:	f005 faf7 	bl	80067c0 <__errno>
 80011d2:	4602      	mov	r2, r0
 80011d4:	230c      	movs	r3, #12
 80011d6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80011d8:	f04f 33ff 	mov.w	r3, #4294967295
 80011dc:	e006      	b.n	80011ec <_sbrk+0x48>
	}

	heap_end += incr;
 80011de:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <_sbrk+0x50>)
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	4a03      	ldr	r2, [pc, #12]	; (80011f4 <_sbrk+0x50>)
 80011e8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80011ea:	68fb      	ldr	r3, [r7, #12]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	2000035c 	.word	0x2000035c
 80011f8:	20000b98 	.word	0x20000b98

080011fc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001200:	4b15      	ldr	r3, [pc, #84]	; (8001258 <SystemInit+0x5c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a14      	ldr	r2, [pc, #80]	; (8001258 <SystemInit+0x5c>)
 8001206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800120a:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <SystemInit+0x5c>)
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	4911      	ldr	r1, [pc, #68]	; (8001258 <SystemInit+0x5c>)
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <SystemInit+0x60>)
 8001214:	4013      	ands	r3, r2
 8001216:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <SystemInit+0x5c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a0e      	ldr	r2, [pc, #56]	; (8001258 <SystemInit+0x5c>)
 800121e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001222:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8001226:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001228:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <SystemInit+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <SystemInit+0x5c>)
 800122e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001232:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <SystemInit+0x5c>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	4a07      	ldr	r2, [pc, #28]	; (8001258 <SystemInit+0x5c>)
 800123a:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800123e:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <SystemInit+0x5c>)
 8001242:	2200      	movs	r2, #0
 8001244:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <SystemInit+0x64>)
 8001248:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800124c:	609a      	str	r2, [r3, #8]
#endif
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800
 800125c:	88ffc00c 	.word	0x88ffc00c
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <__NVIC_GetPriorityGrouping+0x18>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	f003 0307 	and.w	r3, r3, #7
}
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	2b00      	cmp	r3, #0
 8001290:	db0b      	blt.n	80012aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	f003 021f 	and.w	r2, r3, #31
 8001298:	4906      	ldr	r1, [pc, #24]	; (80012b4 <__NVIC_EnableIRQ+0x34>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	095b      	lsrs	r3, r3, #5
 80012a0:	2001      	movs	r0, #1
 80012a2:	fa00 f202 	lsl.w	r2, r0, r2
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr
 80012b4:	e000e100 	.word	0xe000e100

080012b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	6039      	str	r1, [r7, #0]
 80012c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	db0a      	blt.n	80012e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	490c      	ldr	r1, [pc, #48]	; (8001304 <__NVIC_SetPriority+0x4c>)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	0112      	lsls	r2, r2, #4
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	440b      	add	r3, r1
 80012dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e0:	e00a      	b.n	80012f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4908      	ldr	r1, [pc, #32]	; (8001308 <__NVIC_SetPriority+0x50>)
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	f003 030f 	and.w	r3, r3, #15
 80012ee:	3b04      	subs	r3, #4
 80012f0:	0112      	lsls	r2, r2, #4
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	440b      	add	r3, r1
 80012f6:	761a      	strb	r2, [r3, #24]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000e100 	.word	0xe000e100
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130c:	b480      	push	{r7}
 800130e:	b089      	sub	sp, #36	; 0x24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f1c3 0307 	rsb	r3, r3, #7
 8001326:	2b04      	cmp	r3, #4
 8001328:	bf28      	it	cs
 800132a:	2304      	movcs	r3, #4
 800132c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3304      	adds	r3, #4
 8001332:	2b06      	cmp	r3, #6
 8001334:	d902      	bls.n	800133c <NVIC_EncodePriority+0x30>
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3b03      	subs	r3, #3
 800133a:	e000      	b.n	800133e <NVIC_EncodePriority+0x32>
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	f04f 32ff 	mov.w	r2, #4294967295
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43da      	mvns	r2, r3
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	401a      	ands	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001354:	f04f 31ff 	mov.w	r1, #4294967295
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	fa01 f303 	lsl.w	r3, r1, r3
 800135e:	43d9      	mvns	r1, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	4313      	orrs	r3, r2
         );
}
 8001366:	4618      	mov	r0, r3
 8001368:	3724      	adds	r7, #36	; 0x24
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <LL_AHB1_GRP1_EnableClock>:
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800137a:	69da      	ldr	r2, [r3, #28]
 800137c:	4907      	ldr	r1, [pc, #28]	; (800139c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4313      	orrs	r3, r2
 8001382:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001386:	69da      	ldr	r2, [r3, #28]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4013      	ands	r3, r2
 800138c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800138e:	68fb      	ldr	r3, [r7, #12]
}
 8001390:	bf00      	nop
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800

080013a0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80013aa:	6a1a      	ldr	r2, [r3, #32]
 80013ac:	4907      	ldr	r1, [pc, #28]	; (80013cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	620b      	str	r3, [r1, #32]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80013b6:	6a1a      	ldr	r2, [r3, #32]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4013      	ands	r3, r2
 80013bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013be:	68fb      	ldr	r3, [r7, #12]
}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800

080013d0 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	60da      	str	r2, [r3, #12]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr

080013ee <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	691b      	ldr	r3, [r3, #16]
 80013fa:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	615a      	str	r2, [r3, #20]
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr

08001418 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	695b      	ldr	r3, [r3, #20]
 8001424:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	615a      	str	r2, [r3, #20]
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr
	...

08001438 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08e      	sub	sp, #56	; 0x38
 800143c:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800143e:	f107 031c 	add.w	r3, r7, #28
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]
 800144e:	615a      	str	r2, [r3, #20]
 8001450:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
 8001460:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001462:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001466:	f7ff ff9b 	bl	80013a0 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800146a:	2001      	movs	r0, #1
 800146c:	f7ff ff80 	bl	8001370 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration  
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001470:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001474:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001476:	2302      	movs	r3, #2
 8001478:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001486:	2307      	movs	r3, #7
 8001488:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	4619      	mov	r1, r3
 800148e:	4823      	ldr	r0, [pc, #140]	; (800151c <MX_USART1_UART_Init+0xe4>)
 8001490:	f001 f9bc 	bl	800280c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001498:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800149a:	2302      	movs	r3, #2
 800149c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800149e:	2303      	movs	r3, #3
 80014a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80014aa:	2307      	movs	r3, #7
 80014ac:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	4619      	mov	r1, r3
 80014b2:	481a      	ldr	r0, [pc, #104]	; (800151c <MX_USART1_UART_Init+0xe4>)
 80014b4:	f001 f9aa 	bl	800280c <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80014b8:	f7ff fed4 	bl	8001264 <__NVIC_GetPriorityGrouping>
 80014bc:	4603      	mov	r3, r0
 80014be:	2200      	movs	r2, #0
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff ff22 	bl	800130c <NVIC_EncodePriority>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4619      	mov	r1, r3
 80014cc:	2025      	movs	r0, #37	; 0x25
 80014ce:	f7ff fef3 	bl	80012b8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 80014d2:	2025      	movs	r0, #37	; 0x25
 80014d4:	f7ff fed4 	bl	8001280 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 80014d8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80014dc:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80014de:	2300      	movs	r3, #0
 80014e0:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80014e2:	2300      	movs	r3, #0
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80014ea:	230c      	movs	r3, #12
 80014ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80014f2:	2300      	movs	r3, #0
 80014f4:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 80014f6:	f107 031c 	add.w	r3, r7, #28
 80014fa:	4619      	mov	r1, r3
 80014fc:	4808      	ldr	r0, [pc, #32]	; (8001520 <MX_USART1_UART_Init+0xe8>)
 80014fe:	f001 fcf1 	bl	8002ee4 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART1);
 8001502:	4807      	ldr	r0, [pc, #28]	; (8001520 <MX_USART1_UART_Init+0xe8>)
 8001504:	f7ff ff88 	bl	8001418 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART1);
 8001508:	4805      	ldr	r0, [pc, #20]	; (8001520 <MX_USART1_UART_Init+0xe8>)
 800150a:	f7ff ff70 	bl	80013ee <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 800150e:	4804      	ldr	r0, [pc, #16]	; (8001520 <MX_USART1_UART_Init+0xe8>)
 8001510:	f7ff ff5e 	bl	80013d0 <LL_USART_Enable>

}
 8001514:	bf00      	nop
 8001516:	3738      	adds	r7, #56	; 0x38
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40020000 	.word	0x40020000
 8001520:	40013800 	.word	0x40013800

08001524 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001524:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001526:	e003      	b.n	8001530 <LoopCopyDataInit>

08001528 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001528:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800152a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800152c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800152e:	3104      	adds	r1, #4

08001530 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001530:	480a      	ldr	r0, [pc, #40]	; (800155c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001532:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001534:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001536:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001538:	d3f6      	bcc.n	8001528 <CopyDataInit>
  ldr r2, =_sbss
 800153a:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800153c:	e002      	b.n	8001544 <LoopFillZerobss>

0800153e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800153e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001540:	f842 3b04 	str.w	r3, [r2], #4

08001544 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001546:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001548:	d3f9      	bcc.n	800153e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800154a:	f7ff fe57 	bl	80011fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800154e:	f005 f93d 	bl	80067cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001552:	f7ff fced 	bl	8000f30 <main>
  bx lr
 8001556:	4770      	bx	lr
  ldr r3, =_sidata
 8001558:	08008670 	.word	0x08008670
  ldr r0, =_sdata
 800155c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001560:	20000340 	.word	0x20000340
  ldr r2, =_sbss
 8001564:	20000340 	.word	0x20000340
  ldr r3, = _ebss
 8001568:	20000b98 	.word	0x20000b98

0800156c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800156c:	e7fe      	b.n	800156c <ADC1_IRQHandler>

0800156e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001574:	2300      	movs	r3, #0
 8001576:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001578:	2003      	movs	r0, #3
 800157a:	f000 f933 	bl	80017e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800157e:	2000      	movs	r0, #0
 8001580:	f000 f80e 	bl	80015a0 <HAL_InitTick>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d002      	beq.n	8001590 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	71fb      	strb	r3, [r7, #7]
 800158e:	e001      	b.n	8001594 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001590:	f7ff fd94 	bl	80010bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001594:	79fb      	ldrb	r3, [r7, #7]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015a8:	2300      	movs	r3, #0
 80015aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80015ac:	4b16      	ldr	r3, [pc, #88]	; (8001608 <HAL_InitTick+0x68>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d022      	beq.n	80015fa <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80015b4:	4b15      	ldr	r3, [pc, #84]	; (800160c <HAL_InitTick+0x6c>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4b13      	ldr	r3, [pc, #76]	; (8001608 <HAL_InitTick+0x68>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80015c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80015c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c8:	4618      	mov	r0, r3
 80015ca:	f000 f96f 	bl	80018ac <HAL_SYSTICK_Config>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d10f      	bne.n	80015f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b0f      	cmp	r3, #15
 80015d8:	d809      	bhi.n	80015ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015da:	2200      	movs	r2, #0
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	f04f 30ff 	mov.w	r0, #4294967295
 80015e2:	f000 f91f 	bl	8001824 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <HAL_InitTick+0x70>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	e007      	b.n	80015fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	73fb      	strb	r3, [r7, #15]
 80015f2:	e004      	b.n	80015fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	73fb      	strb	r3, [r7, #15]
 80015f8:	e001      	b.n	80015fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000008 	.word	0x20000008
 800160c:	20000000 	.word	0x20000000
 8001610:	20000004 	.word	0x20000004

08001614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <HAL_IncTick+0x1c>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <HAL_IncTick+0x20>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4413      	add	r3, r2
 8001622:	4a03      	ldr	r2, [pc, #12]	; (8001630 <HAL_IncTick+0x1c>)
 8001624:	6013      	str	r3, [r2, #0]
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	200003b0 	.word	0x200003b0
 8001634:	20000008 	.word	0x20000008

08001638 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return uwTick;
 800163c:	4b02      	ldr	r3, [pc, #8]	; (8001648 <HAL_GetTick+0x10>)
 800163e:	681b      	ldr	r3, [r3, #0]
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr
 8001648:	200003b0 	.word	0x200003b0

0800164c <__NVIC_SetPriorityGrouping>:
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <__NVIC_SetPriorityGrouping+0x44>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001668:	4013      	ands	r3, r2
 800166a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001674:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800167c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800167e:	4a04      	ldr	r2, [pc, #16]	; (8001690 <__NVIC_SetPriorityGrouping+0x44>)
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	60d3      	str	r3, [r2, #12]
}
 8001684:	bf00      	nop
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <__NVIC_GetPriorityGrouping>:
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <__NVIC_GetPriorityGrouping+0x18>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	0a1b      	lsrs	r3, r3, #8
 800169e:	f003 0307 	and.w	r3, r3, #7
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <__NVIC_EnableIRQ>:
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	db0b      	blt.n	80016da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	f003 021f 	and.w	r2, r3, #31
 80016c8:	4906      	ldr	r1, [pc, #24]	; (80016e4 <__NVIC_EnableIRQ+0x34>)
 80016ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ce:	095b      	lsrs	r3, r3, #5
 80016d0:	2001      	movs	r0, #1
 80016d2:	fa00 f202 	lsl.w	r2, r0, r2
 80016d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	e000e100 	.word	0xe000e100

080016e8 <__NVIC_SetPriority>:
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	6039      	str	r1, [r7, #0]
 80016f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	db0a      	blt.n	8001712 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	490c      	ldr	r1, [pc, #48]	; (8001734 <__NVIC_SetPriority+0x4c>)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	0112      	lsls	r2, r2, #4
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	440b      	add	r3, r1
 800170c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001710:	e00a      	b.n	8001728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	b2da      	uxtb	r2, r3
 8001716:	4908      	ldr	r1, [pc, #32]	; (8001738 <__NVIC_SetPriority+0x50>)
 8001718:	79fb      	ldrb	r3, [r7, #7]
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	3b04      	subs	r3, #4
 8001720:	0112      	lsls	r2, r2, #4
 8001722:	b2d2      	uxtb	r2, r2
 8001724:	440b      	add	r3, r1
 8001726:	761a      	strb	r2, [r3, #24]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000e100 	.word	0xe000e100
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <NVIC_EncodePriority>:
{
 800173c:	b480      	push	{r7}
 800173e:	b089      	sub	sp, #36	; 0x24
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f1c3 0307 	rsb	r3, r3, #7
 8001756:	2b04      	cmp	r3, #4
 8001758:	bf28      	it	cs
 800175a:	2304      	movcs	r3, #4
 800175c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3304      	adds	r3, #4
 8001762:	2b06      	cmp	r3, #6
 8001764:	d902      	bls.n	800176c <NVIC_EncodePriority+0x30>
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	3b03      	subs	r3, #3
 800176a:	e000      	b.n	800176e <NVIC_EncodePriority+0x32>
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001770:	f04f 32ff 	mov.w	r2, #4294967295
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43da      	mvns	r2, r3
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	401a      	ands	r2, r3
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001784:	f04f 31ff 	mov.w	r1, #4294967295
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	fa01 f303 	lsl.w	r3, r1, r3
 800178e:	43d9      	mvns	r1, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001794:	4313      	orrs	r3, r2
}
 8001796:	4618      	mov	r0, r3
 8001798:	3724      	adds	r7, #36	; 0x24
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017b0:	d301      	bcc.n	80017b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017b2:	2301      	movs	r3, #1
 80017b4:	e00f      	b.n	80017d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017b6:	4a0a      	ldr	r2, [pc, #40]	; (80017e0 <SysTick_Config+0x40>)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017be:	210f      	movs	r1, #15
 80017c0:	f04f 30ff 	mov.w	r0, #4294967295
 80017c4:	f7ff ff90 	bl	80016e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <SysTick_Config+0x40>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ce:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <SysTick_Config+0x40>)
 80017d0:	2207      	movs	r2, #7
 80017d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	e000e010 	.word	0xe000e010

080017e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b07      	cmp	r3, #7
 80017f0:	d00f      	beq.n	8001812 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b06      	cmp	r3, #6
 80017f6:	d00c      	beq.n	8001812 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b05      	cmp	r3, #5
 80017fc:	d009      	beq.n	8001812 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b04      	cmp	r3, #4
 8001802:	d006      	beq.n	8001812 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b03      	cmp	r3, #3
 8001808:	d003      	beq.n	8001812 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800180a:	21ac      	movs	r1, #172	; 0xac
 800180c:	4804      	ldr	r0, [pc, #16]	; (8001820 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800180e:	f7ff fc4b 	bl	80010a8 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff ff1a 	bl	800164c <__NVIC_SetPriorityGrouping>
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	08008284 	.word	0x08008284

08001824 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
 8001830:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b0f      	cmp	r3, #15
 800183a:	d903      	bls.n	8001844 <HAL_NVIC_SetPriority+0x20>
 800183c:	21c4      	movs	r1, #196	; 0xc4
 800183e:	480e      	ldr	r0, [pc, #56]	; (8001878 <HAL_NVIC_SetPriority+0x54>)
 8001840:	f7ff fc32 	bl	80010a8 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	2b0f      	cmp	r3, #15
 8001848:	d903      	bls.n	8001852 <HAL_NVIC_SetPriority+0x2e>
 800184a:	21c5      	movs	r1, #197	; 0xc5
 800184c:	480a      	ldr	r0, [pc, #40]	; (8001878 <HAL_NVIC_SetPriority+0x54>)
 800184e:	f7ff fc2b 	bl	80010a8 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001852:	f7ff ff1f 	bl	8001694 <__NVIC_GetPriorityGrouping>
 8001856:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	68b9      	ldr	r1, [r7, #8]
 800185c:	6978      	ldr	r0, [r7, #20]
 800185e:	f7ff ff6d 	bl	800173c <NVIC_EncodePriority>
 8001862:	4602      	mov	r2, r0
 8001864:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001868:	4611      	mov	r1, r2
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff ff3c 	bl	80016e8 <__NVIC_SetPriority>
}
 8001870:	bf00      	nop
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	08008284 	.word	0x08008284

0800187c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	2b00      	cmp	r3, #0
 800188c:	da03      	bge.n	8001896 <HAL_NVIC_EnableIRQ+0x1a>
 800188e:	21d8      	movs	r1, #216	; 0xd8
 8001890:	4805      	ldr	r0, [pc, #20]	; (80018a8 <HAL_NVIC_EnableIRQ+0x2c>)
 8001892:	f7ff fc09 	bl	80010a8 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff ff08 	bl	80016b0 <__NVIC_EnableIRQ>
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	08008284 	.word	0x08008284

080018ac <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff ff73 	bl	80017a0 <SysTick_Config>
 80018ba:	4603      	mov	r3, r0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80018c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018c6:	b08b      	sub	sp, #44	; 0x2c
 80018c8:	af06      	add	r7, sp, #24
 80018ca:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e0af      	b.n	8001a36 <HAL_PCD_Init+0x172>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a59      	ldr	r2, [pc, #356]	; (8001a40 <HAL_PCD_Init+0x17c>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d003      	beq.n	80018e8 <HAL_PCD_Init+0x24>
 80018e0:	2183      	movs	r1, #131	; 0x83
 80018e2:	4858      	ldr	r0, [pc, #352]	; (8001a44 <HAL_PCD_Init+0x180>)
 80018e4:	f7ff fbe0 	bl	80010a8 <assert_failed>

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d106      	bne.n	8001902 <HAL_PCD_Init+0x3e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f004 f8cd 	bl	8005a9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2203      	movs	r2, #3
 8001906:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f001 fc01 	bl	8003116 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001914:	2300      	movs	r3, #0
 8001916:	73fb      	strb	r3, [r7, #15]
 8001918:	e035      	b.n	8001986 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800191a:	7bfb      	ldrb	r3, [r7, #15]
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	015b      	lsls	r3, r3, #5
 8001920:	4413      	add	r3, r2
 8001922:	3329      	adds	r3, #41	; 0x29
 8001924:	2201      	movs	r2, #1
 8001926:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	015b      	lsls	r3, r3, #5
 800192e:	4413      	add	r3, r2
 8001930:	3328      	adds	r3, #40	; 0x28
 8001932:	7bfa      	ldrb	r2, [r7, #15]
 8001934:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	7bfa      	ldrb	r2, [r7, #15]
 800193a:	b291      	uxth	r1, r2
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	015b      	lsls	r3, r3, #5
 8001940:	4413      	add	r3, r2
 8001942:	3336      	adds	r3, #54	; 0x36
 8001944:	460a      	mov	r2, r1
 8001946:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	015b      	lsls	r3, r3, #5
 800194e:	4413      	add	r3, r2
 8001950:	332b      	adds	r3, #43	; 0x2b
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	015b      	lsls	r3, r3, #5
 800195c:	4413      	add	r3, r2
 800195e:	3338      	adds	r3, #56	; 0x38
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	015b      	lsls	r3, r3, #5
 800196a:	4413      	add	r3, r2
 800196c:	333c      	adds	r3, #60	; 0x3c
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001972:	7bfb      	ldrb	r3, [r7, #15]
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	3302      	adds	r3, #2
 8001978:	015b      	lsls	r3, r3, #5
 800197a:	4413      	add	r3, r2
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001980:	7bfb      	ldrb	r3, [r7, #15]
 8001982:	3301      	adds	r3, #1
 8001984:	73fb      	strb	r3, [r7, #15]
 8001986:	7bfa      	ldrb	r2, [r7, #15]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	429a      	cmp	r2, r3
 800198e:	d3c4      	bcc.n	800191a <HAL_PCD_Init+0x56>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001990:	2300      	movs	r3, #0
 8001992:	73fb      	strb	r3, [r7, #15]
 8001994:	e031      	b.n	80019fa <HAL_PCD_Init+0x136>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001996:	7bfb      	ldrb	r3, [r7, #15]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	015b      	lsls	r3, r3, #5
 800199c:	4413      	add	r3, r2
 800199e:	f203 1329 	addw	r3, r3, #297	; 0x129
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	015b      	lsls	r3, r3, #5
 80019ac:	4413      	add	r3, r2
 80019ae:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019b2:	7bfa      	ldrb	r2, [r7, #15]
 80019b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	015b      	lsls	r3, r3, #5
 80019bc:	4413      	add	r3, r2
 80019be:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	015b      	lsls	r3, r3, #5
 80019cc:	4413      	add	r3, r2
 80019ce:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	015b      	lsls	r3, r3, #5
 80019dc:	4413      	add	r3, r2
 80019de:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	330a      	adds	r3, #10
 80019ec:	015b      	lsls	r3, r3, #5
 80019ee:	4413      	add	r3, r2
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019f4:	7bfb      	ldrb	r3, [r7, #15]
 80019f6:	3301      	adds	r3, #1
 80019f8:	73fb      	strb	r3, [r7, #15]
 80019fa:	7bfa      	ldrb	r2, [r7, #15]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d3c8      	bcc.n	8001996 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	603b      	str	r3, [r7, #0]
 8001a0a:	687e      	ldr	r6, [r7, #4]
 8001a0c:	466d      	mov	r5, sp
 8001a0e:	f106 0410 	add.w	r4, r6, #16
 8001a12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a16:	6823      	ldr	r3, [r4, #0]
 8001a18:	602b      	str	r3, [r5, #0]
 8001a1a:	1d33      	adds	r3, r6, #4
 8001a1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a1e:	6838      	ldr	r0, [r7, #0]
 8001a20:	f001 fb95 	bl	800314e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40005c00 	.word	0x40005c00
 8001a44:	080082c0 	.word	0x080082c0

08001a48 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d101      	bne.n	8001a5e <HAL_PCD_Start+0x16>
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	e016      	b.n	8001a8c <HAL_PCD_Start+0x44>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001a66:	2101      	movs	r1, #1
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 fdc5 	bl	80025f8 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f002 fba3 	bl	80041be <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f001 fb33 	bl	80030e8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f002 fb96 	bl	80041d2 <USB_ReadInterrupts>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001aac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ab0:	d102      	bne.n	8001ab8 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 fad2 	bl	800205c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f002 fb88 	bl	80041d2 <USB_ReadInterrupts>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001acc:	d112      	bne.n	8001af4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ae0:	b292      	uxth	r2, r2
 8001ae2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f004 f855 	bl	8005b96 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001aec:	2100      	movs	r1, #0
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f8d2 	bl	8001c98 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f002 fb6a 	bl	80041d2 <USB_ReadInterrupts>
 8001afe:	4603      	mov	r3, r0
 8001b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b08:	d10b      	bne.n	8001b22 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b1c:	b292      	uxth	r2, r2
 8001b1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f002 fb53 	bl	80041d2 <USB_ReadInterrupts>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b36:	d10b      	bne.n	8001b50 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b4a:	b292      	uxth	r2, r2
 8001b4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f002 fb3c 	bl	80041d2 <USB_ReadInterrupts>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b64:	d126      	bne.n	8001bb4 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0204 	bic.w	r2, r2, #4
 8001b78:	b292      	uxth	r2, r2
 8001b7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f022 0208 	bic.w	r2, r2, #8
 8001b90:	b292      	uxth	r2, r2
 8001b92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f004 f836 	bl	8005c08 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bae:	b292      	uxth	r2, r2
 8001bb0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f002 fb0a 	bl	80041d2 <USB_ReadInterrupts>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bc8:	d131      	bne.n	8001c2e <HAL_PCD_IRQHandler+0x19a>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f042 0208 	orr.w	r2, r2, #8
 8001bdc:	b292      	uxth	r2, r2
 8001bde:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bf4:	b292      	uxth	r2, r2
 8001bf6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f042 0204 	orr.w	r2, r2, #4
 8001c0c:	b292      	uxth	r2, r2
 8001c0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP) == 0U)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f002 fadb 	bl	80041d2 <USB_ReadInterrupts>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c26:	d002      	beq.n	8001c2e <HAL_PCD_IRQHandler+0x19a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f003 ffd3 	bl	8005bd4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f002 facd 	bl	80041d2 <USB_ReadInterrupts>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c42:	d10e      	bne.n	8001c62 <HAL_PCD_IRQHandler+0x1ce>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c56:	b292      	uxth	r2, r2
 8001c58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f003 ff8c 	bl	8005b7a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f002 fab3 	bl	80041d2 <USB_ReadInterrupts>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c76:	d10b      	bne.n	8001c90 <HAL_PCD_IRQHandler+0x1fc>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c8a:	b292      	uxth	r2, r2
 8001c8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001c90:	bf00      	nop
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d101      	bne.n	8001cb2 <HAL_PCD_SetAddress+0x1a>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e013      	b.n	8001cda <HAL_PCD_SetAddress+0x42>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	78fa      	ldrb	r2, [r7, #3]
 8001cbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	78fa      	ldrb	r2, [r7, #3]
 8001cc8:	4611      	mov	r1, r2
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f002 fa64 	bl	8004198 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b084      	sub	sp, #16
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	4608      	mov	r0, r1
 8001cec:	4611      	mov	r1, r2
 8001cee:	461a      	mov	r2, r3
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	70fb      	strb	r3, [r7, #3]
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	803b      	strh	r3, [r7, #0]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	da0b      	bge.n	8001d20 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d08:	78fb      	ldrb	r3, [r7, #3]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	015b      	lsls	r3, r3, #5
 8001d10:	3328      	adds	r3, #40	; 0x28
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	705a      	strb	r2, [r3, #1]
 8001d1e:	e00b      	b.n	8001d38 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d20:	78fb      	ldrb	r3, [r7, #3]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	015b      	lsls	r3, r3, #5
 8001d28:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	4413      	add	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2200      	movs	r2, #0
 8001d36:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d38:	78fb      	ldrb	r3, [r7, #3]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d44:	883a      	ldrh	r2, [r7, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	78ba      	ldrb	r2, [r7, #2]
 8001d4e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	785b      	ldrb	r3, [r3, #1]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d004      	beq.n	8001d62 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d62:	78bb      	ldrb	r3, [r7, #2]
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d102      	bne.n	8001d6e <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <HAL_PCD_EP_Open+0x9a>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e00e      	b.n	8001d9a <HAL_PCD_EP_Open+0xb8>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68f9      	ldr	r1, [r7, #12]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f001 fa04 	bl	8003198 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8001d98:	7afb      	ldrb	r3, [r7, #11]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b084      	sub	sp, #16
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
 8001daa:	460b      	mov	r3, r1
 8001dac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	da0b      	bge.n	8001dce <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001db6:	78fb      	ldrb	r3, [r7, #3]
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	015b      	lsls	r3, r3, #5
 8001dbe:	3328      	adds	r3, #40	; 0x28
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	705a      	strb	r2, [r3, #1]
 8001dcc:	e00b      	b.n	8001de6 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dce:	78fb      	ldrb	r3, [r7, #3]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	015b      	lsls	r3, r3, #5
 8001dd6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	4413      	add	r3, r2
 8001dde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001de6:	78fb      	ldrb	r3, [r7, #3]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d101      	bne.n	8001e00 <HAL_PCD_EP_Close+0x5e>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e00e      	b.n	8001e1e <HAL_PCD_EP_Close+0x7c>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68f9      	ldr	r1, [r7, #12]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f001 fcaa 	bl	8003768 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b086      	sub	sp, #24
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	60f8      	str	r0, [r7, #12]
 8001e2e:	607a      	str	r2, [r7, #4]
 8001e30:	603b      	str	r3, [r7, #0]
 8001e32:	460b      	mov	r3, r1
 8001e34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e36:	7afb      	ldrb	r3, [r7, #11]
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	015b      	lsls	r3, r3, #5
 8001e3e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	4413      	add	r3, r2
 8001e46:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	2200      	movs	r2, #0
 8001e58:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e60:	7afb      	ldrb	r3, [r7, #11]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e6c:	7afb      	ldrb	r3, [r7, #11]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d106      	bne.n	8001e84 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6979      	ldr	r1, [r7, #20]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f001 fe09 	bl	8003a94 <USB_EPStartXfer>
 8001e82:	e005      	b.n	8001e90 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6979      	ldr	r1, [r7, #20]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f001 fe02 	bl	8003a94 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b086      	sub	sp, #24
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	60f8      	str	r0, [r7, #12]
 8001ea2:	607a      	str	r2, [r7, #4]
 8001ea4:	603b      	str	r3, [r7, #0]
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eaa:	7afb      	ldrb	r3, [r7, #11]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	015b      	lsls	r3, r3, #5
 8001eb2:	3328      	adds	r3, #40	; 0x28
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ed2:	7afb      	ldrb	r3, [r7, #11]
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ede:	7afb      	ldrb	r3, [r7, #11]
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d106      	bne.n	8001ef6 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6979      	ldr	r1, [r7, #20]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f001 fdd0 	bl	8003a94 <USB_EPStartXfer>
 8001ef4:	e005      	b.n	8001f02 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6979      	ldr	r1, [r7, #20]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f001 fdc9 	bl	8003a94 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	f003 0207 	and.w	r2, r3, #7
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d901      	bls.n	8001f2a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e046      	b.n	8001fb8 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	da0b      	bge.n	8001f4a <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f32:	78fb      	ldrb	r3, [r7, #3]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	015b      	lsls	r3, r3, #5
 8001f3a:	3328      	adds	r3, #40	; 0x28
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	4413      	add	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2201      	movs	r2, #1
 8001f46:	705a      	strb	r2, [r3, #1]
 8001f48:	e009      	b.n	8001f5e <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f4a:	78fb      	ldrb	r3, [r7, #3]
 8001f4c:	015b      	lsls	r3, r3, #5
 8001f4e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2201      	movs	r2, #1
 8001f62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d101      	bne.n	8001f7e <HAL_PCD_EP_SetStall+0x72>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e01c      	b.n	8001fb8 <HAL_PCD_EP_SetStall+0xac>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68f9      	ldr	r1, [r7, #12]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f002 f82d 	bl	8003fec <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f92:	78fb      	ldrb	r3, [r7, #3]
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d108      	bne.n	8001fae <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4610      	mov	r0, r2
 8001faa:	f002 f921 	bl	80041f0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001fcc:	78fb      	ldrb	r3, [r7, #3]
 8001fce:	f003 020f 	and.w	r2, r3, #15
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d901      	bls.n	8001fde <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e03a      	b.n	8002054 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	da0b      	bge.n	8001ffe <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fe6:	78fb      	ldrb	r3, [r7, #3]
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	015b      	lsls	r3, r3, #5
 8001fee:	3328      	adds	r3, #40	; 0x28
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	705a      	strb	r2, [r3, #1]
 8001ffc:	e00b      	b.n	8002016 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ffe:	78fb      	ldrb	r3, [r7, #3]
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	015b      	lsls	r3, r3, #5
 8002006:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	4413      	add	r3, r2
 800200e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800201c:	78fb      	ldrb	r3, [r7, #3]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	b2da      	uxtb	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800202e:	2b01      	cmp	r3, #1
 8002030:	d101      	bne.n	8002036 <HAL_PCD_EP_ClrStall+0x76>
 8002032:	2302      	movs	r3, #2
 8002034:	e00e      	b.n	8002054 <HAL_PCD_EP_ClrStall+0x94>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68f9      	ldr	r1, [r7, #12]
 8002044:	4618      	mov	r0, r3
 8002046:	f002 f813 	bl	8004070 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800205c:	b590      	push	{r4, r7, lr}
 800205e:	b089      	sub	sp, #36	; 0x24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002064:	e279      	b.n	800255a <PCD_EP_ISR_Handler+0x4fe>
  {
    wIstr = hpcd->Instance->ISTR;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800206e:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002070:	8afb      	ldrh	r3, [r7, #22]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	f003 030f 	and.w	r3, r3, #15
 8002078:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 800207a:	7d7b      	ldrb	r3, [r7, #21]
 800207c:	2b00      	cmp	r3, #0
 800207e:	f040 8139 	bne.w	80022f4 <PCD_EP_ISR_Handler+0x298>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002082:	8afb      	ldrh	r3, [r7, #22]
 8002084:	f003 0310 	and.w	r3, r3, #16
 8002088:	2b00      	cmp	r3, #0
 800208a:	d151      	bne.n	8002130 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	b29b      	uxth	r3, r3
 8002094:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800209c:	b29c      	uxth	r4, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80020a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3328      	adds	r3, #40	; 0x28
 80020b2:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020bc:	b29b      	uxth	r3, r3
 80020be:	461a      	mov	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	4413      	add	r3, r2
 80020c8:	3302      	adds	r3, #2
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	6812      	ldr	r2, [r2, #0]
 80020d0:	4413      	add	r3, r2
 80020d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	695a      	ldr	r2, [r3, #20]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	441a      	add	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80020ee:	2100      	movs	r1, #0
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f003 fd2b 	bl	8005b4c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 822b 	beq.w	800255a <PCD_EP_ISR_Handler+0x4fe>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	2b00      	cmp	r3, #0
 800210a:	f040 8226 	bne.w	800255a <PCD_EP_ISR_Handler+0x4fe>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002114:	b2db      	uxtb	r3, r3
 8002116:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800211a:	b2da      	uxtb	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	b292      	uxth	r2, r2
 8002122:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800212e:	e214      	b.n	800255a <PCD_EP_ISR_Handler+0x4fe>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002136:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002140:	8a7b      	ldrh	r3, [r7, #18]
 8002142:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002146:	2b00      	cmp	r3, #0
 8002148:	d033      	beq.n	80021b2 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002152:	b29b      	uxth	r3, r3
 8002154:	461a      	mov	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	4413      	add	r3, r2
 800215e:	3306      	adds	r3, #6
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6812      	ldr	r2, [r2, #0]
 8002166:	4413      	add	r3, r2
 8002168:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800216c:	881b      	ldrh	r3, [r3, #0]
 800216e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	61da      	str	r2, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup, ep->pmaadress, (uint16_t)ep->xfer_count);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	88da      	ldrh	r2, [r3, #6]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	69db      	ldr	r3, [r3, #28]
 8002188:	b29b      	uxth	r3, r3
 800218a:	f002 f880 	bl	800428e <USB_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	881b      	ldrh	r3, [r3, #0]
 8002194:	b29a      	uxth	r2, r3
 8002196:	f640 738f 	movw	r3, #3983	; 0xf8f
 800219a:	4013      	ands	r3, r2
 800219c:	b29c      	uxth	r4, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80021a6:	b292      	uxth	r2, r2
 80021a8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f003 fca4 	bl	8005af8 <HAL_PCD_SetupStageCallback>
 80021b0:	e1d3      	b.n	800255a <PCD_EP_ISR_Handler+0x4fe>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80021b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f280 81cf 	bge.w	800255a <PCD_EP_ISR_Handler+0x4fe>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80021c8:	4013      	ands	r3, r2
 80021ca:	b29c      	uxth	r4, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80021d4:	b292      	uxth	r2, r2
 80021d6:	801a      	strh	r2, [r3, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	461a      	mov	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	4413      	add	r3, r2
 80021ec:	3306      	adds	r3, #6
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	4413      	add	r3, r2
 80021f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	61da      	str	r2, [r3, #28]

          if (ep->xfer_count != 0U)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d011      	beq.n	8002230 <PCD_EP_ISR_Handler+0x1d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, (uint16_t)ep->xfer_count);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6818      	ldr	r0, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6959      	ldr	r1, [r3, #20]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	88da      	ldrh	r2, [r3, #6]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	b29b      	uxth	r3, r3
 800221e:	f002 f836 	bl	800428e <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	695a      	ldr	r2, [r3, #20]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	441a      	add	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	615a      	str	r2, [r3, #20]

          /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, 0U);
#else
          HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002230:	2100      	movs	r1, #0
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f003 fc72 	bl	8005b1c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	461c      	mov	r4, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002246:	b29b      	uxth	r3, r3
 8002248:	441c      	add	r4, r3
 800224a:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d110      	bne.n	800227a <PCD_EP_ISR_Handler+0x21e>
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002260:	b29a      	uxth	r2, r3
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	801a      	strh	r2, [r3, #0]
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800226e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002272:	b29a      	uxth	r2, r3
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	801a      	strh	r2, [r3, #0]
 8002278:	e026      	b.n	80022c8 <PCD_EP_ISR_Handler+0x26c>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	2b3d      	cmp	r3, #61	; 0x3d
 8002280:	d813      	bhi.n	80022aa <PCD_EP_ISR_Handler+0x24e>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	085b      	lsrs	r3, r3, #1
 8002288:	61bb      	str	r3, [r7, #24]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d002      	beq.n	800229c <PCD_EP_ISR_Handler+0x240>
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	3301      	adds	r3, #1
 800229a:	61bb      	str	r3, [r7, #24]
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	b29b      	uxth	r3, r3
 80022a0:	029b      	lsls	r3, r3, #10
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	801a      	strh	r2, [r3, #0]
 80022a8:	e00e      	b.n	80022c8 <PCD_EP_ISR_Handler+0x26c>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	095b      	lsrs	r3, r3, #5
 80022b0:	61bb      	str	r3, [r7, #24]
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	029b      	lsls	r3, r3, #10
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022d8:	b29c      	uxth	r4, r3
 80022da:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80022de:	b29c      	uxth	r4, r3
 80022e0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80022e4:	b29c      	uxth	r4, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	4ba3      	ldr	r3, [pc, #652]	; (8002578 <PCD_EP_ISR_Handler+0x51c>)
 80022ec:	4323      	orrs	r3, r4
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	8013      	strh	r3, [r2, #0]
 80022f2:	e132      	b.n	800255a <PCD_EP_ISR_Handler+0x4fe>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	461a      	mov	r2, r3
 80022fa:	7d7b      	ldrb	r3, [r7, #21]
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002304:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002308:	2b00      	cmp	r3, #0
 800230a:	f280 80d1 	bge.w	80024b0 <PCD_EP_ISR_Handler+0x454>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	461a      	mov	r2, r3
 8002314:	7d7b      	ldrb	r3, [r7, #21]
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	881b      	ldrh	r3, [r3, #0]
 800231c:	b29a      	uxth	r2, r3
 800231e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002322:	4013      	ands	r3, r2
 8002324:	b29c      	uxth	r4, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	7d7b      	ldrb	r3, [r7, #21]
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002336:	b292      	uxth	r2, r2
 8002338:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800233a:	7d7b      	ldrb	r3, [r7, #21]
 800233c:	015b      	lsls	r3, r3, #5
 800233e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	4413      	add	r3, r2
 8002346:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	7b1b      	ldrb	r3, [r3, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d121      	bne.n	8002394 <PCD_EP_ISR_Handler+0x338>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002358:	b29b      	uxth	r3, r3
 800235a:	461a      	mov	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	4413      	add	r3, r2
 8002364:	3306      	adds	r3, #6
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6812      	ldr	r2, [r2, #0]
 800236c:	4413      	add	r3, r2
 800236e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002378:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 800237a:	8bfb      	ldrh	r3, [r7, #30]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d072      	beq.n	8002466 <PCD_EP_ISR_Handler+0x40a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6818      	ldr	r0, [r3, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6959      	ldr	r1, [r3, #20]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	88da      	ldrh	r2, [r3, #6]
 800238c:	8bfb      	ldrh	r3, [r7, #30]
 800238e:	f001 ff7e 	bl	800428e <USB_ReadPMA>
 8002392:	e068      	b.n	8002466 <PCD_EP_ISR_Handler+0x40a>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	461a      	mov	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d021      	beq.n	80023f2 <PCD_EP_ISR_Handler+0x396>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	461a      	mov	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	4413      	add	r3, r2
 80023c2:	3302      	adds	r3, #2
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6812      	ldr	r2, [r2, #0]
 80023ca:	4413      	add	r3, r2
 80023cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023d6:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80023d8:	8bfb      	ldrh	r3, [r7, #30]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d02a      	beq.n	8002434 <PCD_EP_ISR_Handler+0x3d8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6959      	ldr	r1, [r3, #20]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	891a      	ldrh	r2, [r3, #8]
 80023ea:	8bfb      	ldrh	r3, [r7, #30]
 80023ec:	f001 ff4f 	bl	800428e <USB_ReadPMA>
 80023f0:	e020      	b.n	8002434 <PCD_EP_ISR_Handler+0x3d8>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	461a      	mov	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4413      	add	r3, r2
 8002406:	3306      	adds	r3, #6
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6812      	ldr	r2, [r2, #0]
 800240e:	4413      	add	r3, r2
 8002410:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800241a:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800241c:	8bfb      	ldrh	r3, [r7, #30]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d008      	beq.n	8002434 <PCD_EP_ISR_Handler+0x3d8>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6959      	ldr	r1, [r3, #20]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	895a      	ldrh	r2, [r3, #10]
 800242e:	8bfb      	ldrh	r3, [r7, #30]
 8002430:	f001 ff2d 	bl	800428e <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	461a      	mov	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	b29b      	uxth	r3, r3
 8002446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800244a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800244e:	b29c      	uxth	r4, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	461a      	mov	r2, r3
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	441a      	add	r2, r3
 800245e:	4b47      	ldr	r3, [pc, #284]	; (800257c <PCD_EP_ISR_Handler+0x520>)
 8002460:	4323      	orrs	r3, r4
 8002462:	b29b      	uxth	r3, r3
 8002464:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	69da      	ldr	r2, [r3, #28]
 800246a:	8bfb      	ldrh	r3, [r7, #30]
 800246c:	441a      	add	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	695a      	ldr	r2, [r3, #20]
 8002476:	8bfb      	ldrh	r3, [r7, #30]
 8002478:	441a      	add	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d004      	beq.n	8002490 <PCD_EP_ISR_Handler+0x434>
 8002486:	8bfa      	ldrh	r2, [r7, #30]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	429a      	cmp	r2, r3
 800248e:	d206      	bcs.n	800249e <PCD_EP_ISR_Handler+0x442>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	4619      	mov	r1, r3
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f003 fb40 	bl	8005b1c <HAL_PCD_DataOutStageCallback>
 800249c:	e008      	b.n	80024b0 <PCD_EP_ISR_Handler+0x454>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	7819      	ldrb	r1, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	695a      	ldr	r2, [r3, #20]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7ff fcbb 	bl	8001e26 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80024b0:	8a7b      	ldrh	r3, [r7, #18]
 80024b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d04f      	beq.n	800255a <PCD_EP_ISR_Handler+0x4fe>
      {
        ep = &hpcd->IN_ep[epindex];
 80024ba:	7d7b      	ldrb	r3, [r7, #21]
 80024bc:	015b      	lsls	r3, r3, #5
 80024be:	3328      	adds	r3, #40	; 0x28
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	4413      	add	r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	461a      	mov	r2, r3
 80024cc:	7d7b      	ldrb	r3, [r7, #21]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	881b      	ldrh	r3, [r3, #0]
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80024da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024de:	b29c      	uxth	r4, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	7d7b      	ldrb	r3, [r7, #21]
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	441a      	add	r2, r3
 80024ec:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80024f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002500:	b29b      	uxth	r3, r3
 8002502:	461a      	mov	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	4413      	add	r3, r2
 800250c:	3302      	adds	r3, #2
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	4413      	add	r3, r2
 8002516:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	695a      	ldr	r2, [r3, #20]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	441a      	add	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d106      	bne.n	8002548 <PCD_EP_ISR_Handler+0x4ec>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	4619      	mov	r1, r3
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f003 fb03 	bl	8005b4c <HAL_PCD_DataInStageCallback>
 8002546:	e008      	b.n	800255a <PCD_EP_ISR_Handler+0x4fe>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	7819      	ldrb	r1, [r3, #0]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	695a      	ldr	r2, [r3, #20]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7ff fca0 	bl	8001e9a <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002562:	b29b      	uxth	r3, r3
 8002564:	b21b      	sxth	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	f6ff ad7d 	blt.w	8002066 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3724      	adds	r7, #36	; 0x24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd90      	pop	{r4, r7, pc}
 8002576:	bf00      	nop
 8002578:	ffff8080 	.word	0xffff8080
 800257c:	ffff80c0 	.word	0xffff80c0

08002580 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8002580:	b480      	push	{r7}
 8002582:	b087      	sub	sp, #28
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	607b      	str	r3, [r7, #4]
 800258a:	460b      	mov	r3, r1
 800258c:	817b      	strh	r3, [r7, #10]
 800258e:	4613      	mov	r3, r2
 8002590:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002592:	897b      	ldrh	r3, [r7, #10]
 8002594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002598:	b29b      	uxth	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d008      	beq.n	80025b0 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800259e:	897b      	ldrh	r3, [r7, #10]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	015b      	lsls	r3, r3, #5
 80025a6:	3328      	adds	r3, #40	; 0x28
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	4413      	add	r3, r2
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	e006      	b.n	80025be <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80025b0:	897b      	ldrh	r3, [r7, #10]
 80025b2:	015b      	lsls	r3, r3, #5
 80025b4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	4413      	add	r3, r2
 80025bc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80025be:	893b      	ldrh	r3, [r7, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d107      	bne.n	80025d4 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	2200      	movs	r2, #0
 80025c8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	80da      	strh	r2, [r3, #6]
 80025d2:	e00b      	b.n	80025ec <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	2201      	movs	r2, #1
 80025d8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	b29a      	uxth	r2, r3
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	0c1b      	lsrs	r3, r3, #16
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	371c      	adds	r7, #28
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc80      	pop	{r7}
 80025f6:	4770      	bx	lr

080025f8 <HAL_PCDEx_SetConnectionState>:
  * @param  hpcd: PCD handle
  * @param  state: connection state (0 : disconnected / 1: connected)
  * @retval None
  */
__weak void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	70fb      	strb	r3, [r7, #3]
  UNUSED(hpcd);
  UNUSED(state);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCDEx_SetConnectionState could be implemented in the user file
   */
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr

0800260e <LL_GPIO_SetPinMode>:
{
 800260e:	b480      	push	{r7}
 8002610:	b089      	sub	sp, #36	; 0x24
 8002612:	af00      	add	r7, sp, #0
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	fa93 f3a3 	rbit	r3, r3
 8002628:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	fab3 f383 	clz	r3, r3
 8002630:	b2db      	uxtb	r3, r3
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	2103      	movs	r1, #3
 8002636:	fa01 f303 	lsl.w	r3, r1, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	401a      	ands	r2, r3
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	fa93 f3a3 	rbit	r3, r3
 8002648:	61bb      	str	r3, [r7, #24]
  return result;
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	fab3 f383 	clz	r3, r3
 8002650:	b2db      	uxtb	r3, r3
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	fa01 f303 	lsl.w	r3, r1, r3
 800265a:	431a      	orrs	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	601a      	str	r2, [r3, #0]
}
 8002660:	bf00      	nop
 8002662:	3724      	adds	r7, #36	; 0x24
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr

0800266a <LL_GPIO_SetPinOutputType>:
{
 800266a:	b480      	push	{r7}
 800266c:	b085      	sub	sp, #20
 800266e:	af00      	add	r7, sp, #0
 8002670:	60f8      	str	r0, [r7, #12]
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	43db      	mvns	r3, r3
 800267e:	401a      	ands	r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	fb01 f303 	mul.w	r3, r1, r3
 8002688:	431a      	orrs	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	605a      	str	r2, [r3, #4]
}
 800268e:	bf00      	nop
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr

08002698 <LL_GPIO_SetPinSpeed>:
{
 8002698:	b480      	push	{r7}
 800269a:	b089      	sub	sp, #36	; 0x24
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	fa93 f3a3 	rbit	r3, r3
 80026b2:	613b      	str	r3, [r7, #16]
  return result;
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	fab3 f383 	clz	r3, r3
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	2103      	movs	r1, #3
 80026c0:	fa01 f303 	lsl.w	r3, r1, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	401a      	ands	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	fa93 f3a3 	rbit	r3, r3
 80026d2:	61bb      	str	r3, [r7, #24]
  return result;
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	fab3 f383 	clz	r3, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	fa01 f303 	lsl.w	r3, r1, r3
 80026e4:	431a      	orrs	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	609a      	str	r2, [r3, #8]
}
 80026ea:	bf00      	nop
 80026ec:	3724      	adds	r7, #36	; 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <LL_GPIO_SetPinPull>:
{
 80026f4:	b480      	push	{r7}
 80026f6:	b089      	sub	sp, #36	; 0x24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	fa93 f3a3 	rbit	r3, r3
 800270e:	613b      	str	r3, [r7, #16]
  return result;
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	fab3 f383 	clz	r3, r3
 8002716:	b2db      	uxtb	r3, r3
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	2103      	movs	r1, #3
 800271c:	fa01 f303 	lsl.w	r3, r1, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	401a      	ands	r2, r3
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	fa93 f3a3 	rbit	r3, r3
 800272e:	61bb      	str	r3, [r7, #24]
  return result;
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	fab3 f383 	clz	r3, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	fa01 f303 	lsl.w	r3, r1, r3
 8002740:	431a      	orrs	r2, r3
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	60da      	str	r2, [r3, #12]
}
 8002746:	bf00      	nop
 8002748:	3724      	adds	r7, #36	; 0x24
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr

08002750 <LL_GPIO_SetAFPin_0_7>:
{
 8002750:	b480      	push	{r7}
 8002752:	b089      	sub	sp, #36	; 0x24
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a1a      	ldr	r2, [r3, #32]
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	fa93 f3a3 	rbit	r3, r3
 800276a:	613b      	str	r3, [r7, #16]
  return result;
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	fab3 f383 	clz	r3, r3
 8002772:	b2db      	uxtb	r3, r3
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	210f      	movs	r1, #15
 8002778:	fa01 f303 	lsl.w	r3, r1, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	401a      	ands	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	fa93 f3a3 	rbit	r3, r3
 800278a:	61bb      	str	r3, [r7, #24]
  return result;
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	fab3 f383 	clz	r3, r3
 8002792:	b2db      	uxtb	r3, r3
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	fa01 f303 	lsl.w	r3, r1, r3
 800279c:	431a      	orrs	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	621a      	str	r2, [r3, #32]
}
 80027a2:	bf00      	nop
 80027a4:	3724      	adds	r7, #36	; 0x24
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr

080027ac <LL_GPIO_SetAFPin_8_15>:
{
 80027ac:	b480      	push	{r7}
 80027ae:	b089      	sub	sp, #36	; 0x24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	0a1b      	lsrs	r3, r3, #8
 80027c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	fa93 f3a3 	rbit	r3, r3
 80027c8:	613b      	str	r3, [r7, #16]
  return result;
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	fab3 f383 	clz	r3, r3
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	210f      	movs	r1, #15
 80027d6:	fa01 f303 	lsl.w	r3, r1, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	401a      	ands	r2, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	0a1b      	lsrs	r3, r3, #8
 80027e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	fa93 f3a3 	rbit	r3, r3
 80027ea:	61bb      	str	r3, [r7, #24]
  return result;
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	fab3 f383 	clz	r3, r3
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	fa01 f303 	lsl.w	r3, r1, r3
 80027fc:	431a      	orrs	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002802:	bf00      	nop
 8002804:	3724      	adds	r7, #36	; 0x24
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr

0800280c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b088      	sub	sp, #32
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800281a:	2300      	movs	r3, #0
 800281c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a90      	ldr	r2, [pc, #576]	; (8002a64 <LL_GPIO_Init+0x258>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d013      	beq.n	800284e <LL_GPIO_Init+0x42>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a8f      	ldr	r2, [pc, #572]	; (8002a68 <LL_GPIO_Init+0x25c>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d00f      	beq.n	800284e <LL_GPIO_Init+0x42>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a8e      	ldr	r2, [pc, #568]	; (8002a6c <LL_GPIO_Init+0x260>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d00b      	beq.n	800284e <LL_GPIO_Init+0x42>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a8d      	ldr	r2, [pc, #564]	; (8002a70 <LL_GPIO_Init+0x264>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d007      	beq.n	800284e <LL_GPIO_Init+0x42>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a8c      	ldr	r2, [pc, #560]	; (8002a74 <LL_GPIO_Init+0x268>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d003      	beq.n	800284e <LL_GPIO_Init+0x42>
 8002846:	21b9      	movs	r1, #185	; 0xb9
 8002848:	488b      	ldr	r0, [pc, #556]	; (8002a78 <LL_GPIO_Init+0x26c>)
 800284a:	f7fe fc2d 	bl	80010a8 <assert_failed>
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d004      	beq.n	8002860 <LL_GPIO_Init+0x54>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800285e:	d303      	bcc.n	8002868 <LL_GPIO_Init+0x5c>
 8002860:	21ba      	movs	r1, #186	; 0xba
 8002862:	4885      	ldr	r0, [pc, #532]	; (8002a78 <LL_GPIO_Init+0x26c>)
 8002864:	f7fe fc20 	bl	80010a8 <assert_failed>
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00f      	beq.n	8002890 <LL_GPIO_Init+0x84>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d00b      	beq.n	8002890 <LL_GPIO_Init+0x84>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d007      	beq.n	8002890 <LL_GPIO_Init+0x84>
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b03      	cmp	r3, #3
 8002886:	d003      	beq.n	8002890 <LL_GPIO_Init+0x84>
 8002888:	21bb      	movs	r1, #187	; 0xbb
 800288a:	487b      	ldr	r0, [pc, #492]	; (8002a78 <LL_GPIO_Init+0x26c>)
 800288c:	f7fe fc0c 	bl	80010a8 <assert_failed>
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00b      	beq.n	80028b0 <LL_GPIO_Init+0xa4>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d007      	beq.n	80028b0 <LL_GPIO_Init+0xa4>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d003      	beq.n	80028b0 <LL_GPIO_Init+0xa4>
 80028a8:	21bc      	movs	r1, #188	; 0xbc
 80028aa:	4873      	ldr	r0, [pc, #460]	; (8002a78 <LL_GPIO_Init+0x26c>)
 80028ac:	f7fe fbfc 	bl	80010a8 <assert_failed>

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	fa93 f3a3 	rbit	r3, r3
 80028bc:	613b      	str	r3, [r7, #16]
  return result;
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	fab3 f383 	clz	r3, r3
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80028c8:	e0a2      	b.n	8002a10 <LL_GPIO_Init+0x204>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	2101      	movs	r1, #1
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	fa01 f303 	lsl.w	r3, r1, r3
 80028d6:	4013      	ands	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 8094 	beq.w	8002a0a <LL_GPIO_Init+0x1fe>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	461a      	mov	r2, r3
 80028e8:	69b9      	ldr	r1, [r7, #24]
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff fe8f 	bl	800260e <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d003      	beq.n	8002900 <LL_GPIO_Init+0xf4>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d11a      	bne.n	8002936 <LL_GPIO_Init+0x12a>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00f      	beq.n	8002928 <LL_GPIO_Init+0x11c>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d00b      	beq.n	8002928 <LL_GPIO_Init+0x11c>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	2b02      	cmp	r3, #2
 8002916:	d007      	beq.n	8002928 <LL_GPIO_Init+0x11c>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	2b03      	cmp	r3, #3
 800291e:	d003      	beq.n	8002928 <LL_GPIO_Init+0x11c>
 8002920:	21d0      	movs	r1, #208	; 0xd0
 8002922:	4855      	ldr	r0, [pc, #340]	; (8002a78 <LL_GPIO_Init+0x26c>)
 8002924:	f7fe fbc0 	bl	80010a8 <assert_failed>

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	461a      	mov	r2, r3
 800292e:	69b9      	ldr	r1, [r7, #24]
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7ff feb1 	bl	8002698 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	461a      	mov	r2, r3
 800293c:	69b9      	ldr	r1, [r7, #24]
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7ff fed8 	bl	80026f4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d15e      	bne.n	8002a0a <LL_GPIO_Init+0x1fe>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d03f      	beq.n	80029d4 <LL_GPIO_Init+0x1c8>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d03b      	beq.n	80029d4 <LL_GPIO_Init+0x1c8>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	2b02      	cmp	r3, #2
 8002962:	d037      	beq.n	80029d4 <LL_GPIO_Init+0x1c8>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	2b03      	cmp	r3, #3
 800296a:	d033      	beq.n	80029d4 <LL_GPIO_Init+0x1c8>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	2b04      	cmp	r3, #4
 8002972:	d02f      	beq.n	80029d4 <LL_GPIO_Init+0x1c8>
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	2b05      	cmp	r3, #5
 800297a:	d02b      	beq.n	80029d4 <LL_GPIO_Init+0x1c8>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	2b06      	cmp	r3, #6
 8002982:	d027      	beq.n	80029d4 <LL_GPIO_Init+0x1c8>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	2b07      	cmp	r3, #7
 800298a:	d023      	beq.n	80029d4 <LL_GPIO_Init+0x1c8>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	2b08      	cmp	r3, #8
 8002992:	d01f      	beq.n	80029d4 <LL_GPIO_Init+0x1c8>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	2b09      	cmp	r3, #9
 800299a:	d01b      	beq.n	80029d4 <LL_GPIO_Init+0x1c8>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	2b0a      	cmp	r3, #10
 80029a2:	d017      	beq.n	80029d4 <LL_GPIO_Init+0x1c8>
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	2b0b      	cmp	r3, #11
 80029aa:	d013      	beq.n	80029d4 <LL_GPIO_Init+0x1c8>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	2b0c      	cmp	r3, #12
 80029b2:	d00f      	beq.n	80029d4 <LL_GPIO_Init+0x1c8>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	2b0d      	cmp	r3, #13
 80029ba:	d00b      	beq.n	80029d4 <LL_GPIO_Init+0x1c8>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	2b0e      	cmp	r3, #14
 80029c2:	d007      	beq.n	80029d4 <LL_GPIO_Init+0x1c8>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	2b0f      	cmp	r3, #15
 80029ca:	d003      	beq.n	80029d4 <LL_GPIO_Init+0x1c8>
 80029cc:	21dc      	movs	r1, #220	; 0xdc
 80029ce:	482a      	ldr	r0, [pc, #168]	; (8002a78 <LL_GPIO_Init+0x26c>)
 80029d0:	f7fe fb6a 	bl	80010a8 <assert_failed>
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	fa93 f3a3 	rbit	r3, r3
 80029de:	60bb      	str	r3, [r7, #8]
  return result;
 80029e0:	68bb      	ldr	r3, [r7, #8]

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80029e2:	fab3 f383 	clz	r3, r3
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b07      	cmp	r3, #7
 80029ea:	d807      	bhi.n	80029fc <LL_GPIO_Init+0x1f0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	461a      	mov	r2, r3
 80029f2:	69b9      	ldr	r1, [r7, #24]
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff feab 	bl	8002750 <LL_GPIO_SetAFPin_0_7>
 80029fa:	e006      	b.n	8002a0a <LL_GPIO_Init+0x1fe>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	461a      	mov	r2, r3
 8002a02:	69b9      	ldr	r1, [r7, #24]
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f7ff fed1 	bl	80027ac <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	fa22 f303 	lsr.w	r3, r2, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f47f af55 	bne.w	80028ca <LL_GPIO_Init+0xbe>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d003      	beq.n	8002a30 <LL_GPIO_Init+0x224>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d113      	bne.n	8002a58 <LL_GPIO_Init+0x24c>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d007      	beq.n	8002a48 <LL_GPIO_Init+0x23c>
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d003      	beq.n	8002a48 <LL_GPIO_Init+0x23c>
 8002a40:	21ef      	movs	r1, #239	; 0xef
 8002a42:	480d      	ldr	r0, [pc, #52]	; (8002a78 <LL_GPIO_Init+0x26c>)
 8002a44:	f7fe fb30 	bl	80010a8 <assert_failed>

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	6819      	ldr	r1, [r3, #0]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	461a      	mov	r2, r3
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7ff fe09 	bl	800266a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3720      	adds	r7, #32
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40020000 	.word	0x40020000
 8002a68:	40020400 	.word	0x40020400
 8002a6c:	40020800 	.word	0x40020800
 8002a70:	40020c00 	.word	0x40020c00
 8002a74:	40021400 	.word	0x40021400
 8002a78:	080082f8 	.word	0x080082f8

08002a7c <LL_RCC_MSI_GetRange>:
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE));
 8002a80:	4b03      	ldr	r3, [pc, #12]	; (8002a90 <LL_RCC_MSI_GetRange+0x14>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr
 8002a90:	40023800 	.word	0x40023800

08002a94 <LL_RCC_GetSysClkSource>:
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002a98:	4b03      	ldr	r3, [pc, #12]	; (8002aa8 <LL_RCC_GetSysClkSource+0x14>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 030c 	and.w	r3, r3, #12
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr
 8002aa8:	40023800 	.word	0x40023800

08002aac <LL_RCC_GetAHBPrescaler>:
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002ab0:	4b03      	ldr	r3, [pc, #12]	; (8002ac0 <LL_RCC_GetAHBPrescaler+0x14>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr
 8002ac0:	40023800 	.word	0x40023800

08002ac4 <LL_RCC_GetAPB1Prescaler>:
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002ac8:	4b03      	ldr	r3, [pc, #12]	; (8002ad8 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr
 8002ad8:	40023800 	.word	0x40023800

08002adc <LL_RCC_GetAPB2Prescaler>:
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002ae0:	4b03      	ldr	r3, [pc, #12]	; (8002af0 <LL_RCC_GetAPB2Prescaler+0x14>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr
 8002af0:	40023800 	.word	0x40023800

08002af4 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002af8:	4b03      	ldr	r3, [pc, #12]	; (8002b08 <LL_RCC_PLL_GetMainSource+0x14>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr
 8002b08:	40023800 	.word	0x40023800

08002b0c <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_24
  *         @arg @ref LL_RCC_PLL_MUL_32
  *         @arg @ref LL_RCC_PLL_MUL_48
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002b10:	4b03      	ldr	r3, [pc, #12]	; (8002b20 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr
 8002b20:	40023800 	.word	0x40023800

08002b24 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLL_DIV_2
  *         @arg @ref LL_RCC_PLL_DIV_3
  *         @arg @ref LL_RCC_PLL_DIV_4
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLDIV));
 8002b28:	4b03      	ldr	r3, [pc, #12]	; (8002b38 <LL_RCC_PLL_GetDivider+0x14>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr
 8002b38:	40023800 	.word	0x40023800

08002b3c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002b44:	f000 f820 	bl	8002b88 <RCC_GetSystemClockFreq>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 f868 	bl	8002c28 <RCC_GetHCLKClockFreq>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 f876 	bl	8002c54 <RCC_GetPCLK1ClockFreq>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f000 f882 	bl	8002c7c <RCC_GetPCLK2ClockFreq>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	60da      	str	r2, [r3, #12]
}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002b8e:	f7ff ff81 	bl	8002a94 <LL_RCC_GetSysClkSource>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b0c      	cmp	r3, #12
 8002b96:	d832      	bhi.n	8002bfe <RCC_GetSystemClockFreq+0x76>
 8002b98:	a201      	add	r2, pc, #4	; (adr r2, 8002ba0 <RCC_GetSystemClockFreq+0x18>)
 8002b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b9e:	bf00      	nop
 8002ba0:	08002bd5 	.word	0x08002bd5
 8002ba4:	08002bff 	.word	0x08002bff
 8002ba8:	08002bff 	.word	0x08002bff
 8002bac:	08002bff 	.word	0x08002bff
 8002bb0:	08002beb 	.word	0x08002beb
 8002bb4:	08002bff 	.word	0x08002bff
 8002bb8:	08002bff 	.word	0x08002bff
 8002bbc:	08002bff 	.word	0x08002bff
 8002bc0:	08002bf1 	.word	0x08002bf1
 8002bc4:	08002bff 	.word	0x08002bff
 8002bc8:	08002bff 	.word	0x08002bff
 8002bcc:	08002bff 	.word	0x08002bff
 8002bd0:	08002bf7 	.word	0x08002bf7
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002bd4:	f7ff ff52 	bl	8002a7c <LL_RCC_MSI_GetRange>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	0b5b      	lsrs	r3, r3, #13
 8002bdc:	3301      	adds	r3, #1
 8002bde:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	607b      	str	r3, [r7, #4]
      break;
 8002be8:	e014      	b.n	8002c14 <RCC_GetSystemClockFreq+0x8c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002bea:	4b0d      	ldr	r3, [pc, #52]	; (8002c20 <RCC_GetSystemClockFreq+0x98>)
 8002bec:	607b      	str	r3, [r7, #4]
      break;
 8002bee:	e011      	b.n	8002c14 <RCC_GetSystemClockFreq+0x8c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002bf0:	4b0c      	ldr	r3, [pc, #48]	; (8002c24 <RCC_GetSystemClockFreq+0x9c>)
 8002bf2:	607b      	str	r3, [r7, #4]
      break;
 8002bf4:	e00e      	b.n	8002c14 <RCC_GetSystemClockFreq+0x8c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002bf6:	f000 f855 	bl	8002ca4 <RCC_PLL_GetFreqDomain_SYS>
 8002bfa:	6078      	str	r0, [r7, #4]
      break;
 8002bfc:	e00a      	b.n	8002c14 <RCC_GetSystemClockFreq+0x8c>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002bfe:	f7ff ff3d 	bl	8002a7c <LL_RCC_MSI_GetRange>
 8002c02:	4603      	mov	r3, r0
 8002c04:	0b5b      	lsrs	r3, r3, #13
 8002c06:	3301      	adds	r3, #1
 8002c08:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	607b      	str	r3, [r7, #4]
      break;
 8002c12:	bf00      	nop
  }

  return frequency;
 8002c14:	687b      	ldr	r3, [r7, #4]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	00f42400 	.word	0x00f42400
 8002c24:	007a1200 	.word	0x007a1200

08002c28 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002c30:	f7ff ff3c 	bl	8002aac <LL_RCC_GetAHBPrescaler>
 8002c34:	4603      	mov	r3, r0
 8002c36:	091b      	lsrs	r3, r3, #4
 8002c38:	f003 030f 	and.w	r3, r3, #15
 8002c3c:	4a04      	ldr	r2, [pc, #16]	; (8002c50 <RCC_GetHCLKClockFreq+0x28>)
 8002c3e:	5cd3      	ldrb	r3, [r2, r3]
 8002c40:	461a      	mov	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	40d3      	lsrs	r3, r2
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	08008428 	.word	0x08008428

08002c54 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002c5c:	f7ff ff32 	bl	8002ac4 <LL_RCC_GetAPB1Prescaler>
 8002c60:	4603      	mov	r3, r0
 8002c62:	0a1b      	lsrs	r3, r3, #8
 8002c64:	4a04      	ldr	r2, [pc, #16]	; (8002c78 <RCC_GetPCLK1ClockFreq+0x24>)
 8002c66:	5cd3      	ldrb	r3, [r2, r3]
 8002c68:	461a      	mov	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	40d3      	lsrs	r3, r2
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	08008438 	.word	0x08008438

08002c7c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002c84:	f7ff ff2a 	bl	8002adc <LL_RCC_GetAPB2Prescaler>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	0adb      	lsrs	r3, r3, #11
 8002c8c:	4a04      	ldr	r2, [pc, #16]	; (8002ca0 <RCC_GetPCLK2ClockFreq+0x24>)
 8002c8e:	5cd3      	ldrb	r3, [r2, r3]
 8002c90:	461a      	mov	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	40d3      	lsrs	r3, r2
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	08008438 	.word	0x08008438

08002ca4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002ca4:	b590      	push	{r4, r7, lr}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
  uint32_t pllsource, pllinputfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002caa:	f7ff ff23 	bl	8002af4 <LL_RCC_PLL_GetMainSource>
 8002cae:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <RCC_PLL_GetFreqDomain_SYS+0x1a>
 8002cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cba:	d003      	beq.n	8002cc4 <RCC_PLL_GetFreqDomain_SYS+0x20>
 8002cbc:	e005      	b.n	8002cca <RCC_PLL_GetFreqDomain_SYS+0x26>
  {
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002cbe:	4b0f      	ldr	r3, [pc, #60]	; (8002cfc <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8002cc0:	607b      	str	r3, [r7, #4]
      break;
 8002cc2:	e005      	b.n	8002cd0 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002cc4:	4b0e      	ldr	r3, [pc, #56]	; (8002d00 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8002cc6:	607b      	str	r3, [r7, #4]
      break;
 8002cc8:	e002      	b.n	8002cd0 <RCC_PLL_GetFreqDomain_SYS+0x2c>

    default:
      pllinputfreq = HSI_VALUE;
 8002cca:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8002ccc:	607b      	str	r3, [r7, #4]
      break;
 8002cce:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetDivider());
 8002cd0:	f7ff ff1c 	bl	8002b0c <LL_RCC_PLL_GetMultiplicator>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	0c9b      	lsrs	r3, r3, #18
 8002cd8:	4a0a      	ldr	r2, [pc, #40]	; (8002d04 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8002cda:	5cd3      	ldrb	r3, [r2, r3]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	fb03 f402 	mul.w	r4, r3, r2
 8002ce4:	f7ff ff1e 	bl	8002b24 <LL_RCC_PLL_GetDivider>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	0d9b      	lsrs	r3, r3, #22
 8002cec:	3301      	adds	r3, #1
 8002cee:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd90      	pop	{r4, r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	00f42400 	.word	0x00f42400
 8002d00:	007a1200 	.word	0x007a1200
 8002d04:	0800841c 	.word	0x0800841c

08002d08 <LL_USART_IsEnabled>:
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d1c:	bf0c      	ite	eq
 8002d1e:	2301      	moveq	r3, #1
 8002d20:	2300      	movne	r3, #0
 8002d22:	b2db      	uxtb	r3, r3
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr

08002d2e <LL_USART_SetStopBitsLength>:
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	611a      	str	r2, [r3, #16]
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr

08002d52 <LL_USART_SetHWFlowCtrl>:
{
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	615a      	str	r2, [r3, #20]
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr
	...

08002d78 <LL_USART_SetBaudRate>:
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
 8002d84:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d8c:	d152      	bne.n	8002e34 <LL_USART_SetBaudRate+0xbc>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	009a      	lsls	r2, r3, #2
 8002d98:	441a      	add	r2, r3
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da2:	4a4f      	ldr	r2, [pc, #316]	; (8002ee0 <LL_USART_SetBaudRate+0x168>)
 8002da4:	fba2 2303 	umull	r2, r3, r2, r3
 8002da8:	095b      	lsrs	r3, r3, #5
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	011b      	lsls	r3, r3, #4
 8002dae:	b299      	uxth	r1, r3
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	4613      	mov	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	009a      	lsls	r2, r3, #2
 8002dba:	441a      	add	r2, r3
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dc4:	4b46      	ldr	r3, [pc, #280]	; (8002ee0 <LL_USART_SetBaudRate+0x168>)
 8002dc6:	fba3 0302 	umull	r0, r3, r3, r2
 8002dca:	095b      	lsrs	r3, r3, #5
 8002dcc:	2064      	movs	r0, #100	; 0x64
 8002dce:	fb00 f303 	mul.w	r3, r0, r3
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	3332      	adds	r3, #50	; 0x32
 8002dd8:	4a41      	ldr	r2, [pc, #260]	; (8002ee0 <LL_USART_SetBaudRate+0x168>)
 8002dda:	fba2 2303 	umull	r2, r3, r2, r3
 8002dde:	095b      	lsrs	r3, r3, #5
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	440b      	add	r3, r1
 8002dee:	b299      	uxth	r1, r3
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	4613      	mov	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	009a      	lsls	r2, r3, #2
 8002dfa:	441a      	add	r2, r3
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e04:	4b36      	ldr	r3, [pc, #216]	; (8002ee0 <LL_USART_SetBaudRate+0x168>)
 8002e06:	fba3 0302 	umull	r0, r3, r3, r2
 8002e0a:	095b      	lsrs	r3, r3, #5
 8002e0c:	2064      	movs	r0, #100	; 0x64
 8002e0e:	fb00 f303 	mul.w	r3, r0, r3
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	3332      	adds	r3, #50	; 0x32
 8002e18:	4a31      	ldr	r2, [pc, #196]	; (8002ee0 <LL_USART_SetBaudRate+0x168>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	440b      	add	r3, r1
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	609a      	str	r2, [r3, #8]
}
 8002e32:	e04f      	b.n	8002ed4 <LL_USART_SetBaudRate+0x15c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	4613      	mov	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	009a      	lsls	r2, r3, #2
 8002e3e:	441a      	add	r2, r3
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e48:	4a25      	ldr	r2, [pc, #148]	; (8002ee0 <LL_USART_SetBaudRate+0x168>)
 8002e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4e:	095b      	lsrs	r3, r3, #5
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	b299      	uxth	r1, r3
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009a      	lsls	r2, r3, #2
 8002e60:	441a      	add	r2, r3
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ee0 <LL_USART_SetBaudRate+0x168>)
 8002e6c:	fba3 0302 	umull	r0, r3, r3, r2
 8002e70:	095b      	lsrs	r3, r3, #5
 8002e72:	2064      	movs	r0, #100	; 0x64
 8002e74:	fb00 f303 	mul.w	r3, r0, r3
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	011b      	lsls	r3, r3, #4
 8002e7c:	3332      	adds	r3, #50	; 0x32
 8002e7e:	4a18      	ldr	r2, [pc, #96]	; (8002ee0 <LL_USART_SetBaudRate+0x168>)
 8002e80:	fba2 2303 	umull	r2, r3, r2, r3
 8002e84:	095b      	lsrs	r3, r3, #5
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	440b      	add	r3, r1
 8002e90:	b299      	uxth	r1, r3
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	4613      	mov	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	009a      	lsls	r2, r3, #2
 8002e9c:	441a      	add	r2, r3
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ea6:	4b0e      	ldr	r3, [pc, #56]	; (8002ee0 <LL_USART_SetBaudRate+0x168>)
 8002ea8:	fba3 0302 	umull	r0, r3, r3, r2
 8002eac:	095b      	lsrs	r3, r3, #5
 8002eae:	2064      	movs	r0, #100	; 0x64
 8002eb0:	fb00 f303 	mul.w	r3, r0, r3
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	011b      	lsls	r3, r3, #4
 8002eb8:	3332      	adds	r3, #50	; 0x32
 8002eba:	4a09      	ldr	r2, [pc, #36]	; (8002ee0 <LL_USART_SetBaudRate+0x168>)
 8002ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec0:	095b      	lsrs	r3, r3, #5
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	f003 030f 	and.w	r3, r3, #15
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	440b      	add	r3, r1
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	461a      	mov	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	609a      	str	r2, [r3, #8]
}
 8002ed4:	bf00      	nop
 8002ed6:	3714      	adds	r7, #20
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bc80      	pop	{r7}
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	51eb851f 	.word	0x51eb851f

08002ee4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b088      	sub	sp, #32
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61bb      	str	r3, [r7, #24]
  LL_RCC_ClocksTypeDef rcc_clocks;

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(USARTx));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a76      	ldr	r2, [pc, #472]	; (80030d4 <LL_USART_Init+0x1f0>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d00b      	beq.n	8002f16 <LL_USART_Init+0x32>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a75      	ldr	r2, [pc, #468]	; (80030d8 <LL_USART_Init+0x1f4>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d007      	beq.n	8002f16 <LL_USART_Init+0x32>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a74      	ldr	r2, [pc, #464]	; (80030dc <LL_USART_Init+0x1f8>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d003      	beq.n	8002f16 <LL_USART_Init+0x32>
 8002f0e:	21cf      	movs	r1, #207	; 0xcf
 8002f10:	4873      	ldr	r0, [pc, #460]	; (80030e0 <LL_USART_Init+0x1fc>)
 8002f12:	f7fe f8c9 	bl	80010a8 <assert_failed>
  assert_param(IS_LL_USART_BAUDRATE(USART_InitStruct->BaudRate));
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a72      	ldr	r2, [pc, #456]	; (80030e4 <LL_USART_Init+0x200>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d903      	bls.n	8002f28 <LL_USART_Init+0x44>
 8002f20:	21d0      	movs	r1, #208	; 0xd0
 8002f22:	486f      	ldr	r0, [pc, #444]	; (80030e0 <LL_USART_Init+0x1fc>)
 8002f24:	f7fe f8c0 	bl	80010a8 <assert_failed>
  assert_param(IS_LL_USART_DATAWIDTH(USART_InitStruct->DataWidth));
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d008      	beq.n	8002f42 <LL_USART_Init+0x5e>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f38:	d003      	beq.n	8002f42 <LL_USART_Init+0x5e>
 8002f3a:	21d1      	movs	r1, #209	; 0xd1
 8002f3c:	4868      	ldr	r0, [pc, #416]	; (80030e0 <LL_USART_Init+0x1fc>)
 8002f3e:	f7fe f8b3 	bl	80010a8 <assert_failed>
  assert_param(IS_LL_USART_STOPBITS(USART_InitStruct->StopBits));
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f4a:	d011      	beq.n	8002f70 <LL_USART_Init+0x8c>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00d      	beq.n	8002f70 <LL_USART_Init+0x8c>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f5c:	d008      	beq.n	8002f70 <LL_USART_Init+0x8c>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f66:	d003      	beq.n	8002f70 <LL_USART_Init+0x8c>
 8002f68:	21d2      	movs	r1, #210	; 0xd2
 8002f6a:	485d      	ldr	r0, [pc, #372]	; (80030e0 <LL_USART_Init+0x1fc>)
 8002f6c:	f7fe f89c 	bl	80010a8 <assert_failed>
  assert_param(IS_LL_USART_PARITY(USART_InitStruct->Parity));
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00d      	beq.n	8002f94 <LL_USART_Init+0xb0>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f80:	d008      	beq.n	8002f94 <LL_USART_Init+0xb0>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002f8a:	d003      	beq.n	8002f94 <LL_USART_Init+0xb0>
 8002f8c:	21d3      	movs	r1, #211	; 0xd3
 8002f8e:	4854      	ldr	r0, [pc, #336]	; (80030e0 <LL_USART_Init+0x1fc>)
 8002f90:	f7fe f88a 	bl	80010a8 <assert_failed>
  assert_param(IS_LL_USART_DIRECTION(USART_InitStruct->TransferDirection));
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00f      	beq.n	8002fbc <LL_USART_Init+0xd8>
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	2b04      	cmp	r3, #4
 8002fa2:	d00b      	beq.n	8002fbc <LL_USART_Init+0xd8>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d007      	beq.n	8002fbc <LL_USART_Init+0xd8>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	2b0c      	cmp	r3, #12
 8002fb2:	d003      	beq.n	8002fbc <LL_USART_Init+0xd8>
 8002fb4:	21d4      	movs	r1, #212	; 0xd4
 8002fb6:	484a      	ldr	r0, [pc, #296]	; (80030e0 <LL_USART_Init+0x1fc>)
 8002fb8:	f7fe f876 	bl	80010a8 <assert_failed>
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d012      	beq.n	8002fea <LL_USART_Init+0x106>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fcc:	d00d      	beq.n	8002fea <LL_USART_Init+0x106>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fd6:	d008      	beq.n	8002fea <LL_USART_Init+0x106>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fe0:	d003      	beq.n	8002fea <LL_USART_Init+0x106>
 8002fe2:	21d5      	movs	r1, #213	; 0xd5
 8002fe4:	483e      	ldr	r0, [pc, #248]	; (80030e0 <LL_USART_Init+0x1fc>)
 8002fe6:	f7fe f85f 	bl	80010a8 <assert_failed>
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d008      	beq.n	8003004 <LL_USART_Init+0x120>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ffa:	d003      	beq.n	8003004 <LL_USART_Init+0x120>
 8002ffc:	21d6      	movs	r1, #214	; 0xd6
 8002ffe:	4838      	ldr	r0, [pc, #224]	; (80030e0 <LL_USART_Init+0x1fc>)
 8003000:	f7fe f852 	bl	80010a8 <assert_failed>

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f7ff fe7f 	bl	8002d08 <LL_USART_IsEnabled>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d15c      	bne.n	80030ca <LL_USART_Init+0x1e6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003018:	f023 030c 	bic.w	r3, r3, #12
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	6851      	ldr	r1, [r2, #4]
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	68d2      	ldr	r2, [r2, #12]
 8003024:	4311      	orrs	r1, r2
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	6912      	ldr	r2, [r2, #16]
 800302a:	4311      	orrs	r1, r2
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	6992      	ldr	r2, [r2, #24]
 8003030:	430a      	orrs	r2, r1
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	4619      	mov	r1, r3
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7ff fe75 	bl	8002d2e <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	4619      	mov	r1, r3
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7ff fe81 	bl	8002d52 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003050:	f107 0308 	add.w	r3, r7, #8
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff fd71 	bl	8002b3c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a1d      	ldr	r2, [pc, #116]	; (80030d4 <LL_USART_Init+0x1f0>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d102      	bne.n	8003068 <LL_USART_Init+0x184>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	61bb      	str	r3, [r7, #24]
 8003066:	e00c      	b.n	8003082 <LL_USART_Init+0x19e>
    }
    else if (USARTx == USART2)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a1b      	ldr	r2, [pc, #108]	; (80030d8 <LL_USART_Init+0x1f4>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d102      	bne.n	8003076 <LL_USART_Init+0x192>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	61bb      	str	r3, [r7, #24]
 8003074:	e005      	b.n	8003082 <LL_USART_Init+0x19e>
    }
    else if (USARTx == USART3)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a18      	ldr	r2, [pc, #96]	; (80030dc <LL_USART_Init+0x1f8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d101      	bne.n	8003082 <LL_USART_Init+0x19e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d020      	beq.n	80030ca <LL_USART_Init+0x1e6>
        && (USART_InitStruct->BaudRate != 0U))
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d01c      	beq.n	80030ca <LL_USART_Init+0x1e6>
    {
      status = SUCCESS;
 8003090:	2300      	movs	r3, #0
 8003092:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	699a      	ldr	r2, [r3, #24]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	69b9      	ldr	r1, [r7, #24]
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7ff fe6a 	bl	8002d78 <LL_USART_SetBaudRate>
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);

      /* Check BRR is greater than or equal to 16d */
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b0f      	cmp	r3, #15
 80030aa:	d804      	bhi.n	80030b6 <LL_USART_Init+0x1d2>
 80030ac:	f240 1125 	movw	r1, #293	; 0x125
 80030b0:	480b      	ldr	r0, [pc, #44]	; (80030e0 <LL_USART_Init+0x1fc>)
 80030b2:	f7fd fff9 	bl	80010a8 <assert_failed>

      /* Check BRR is greater than or equal to 16d */
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030be:	d304      	bcc.n	80030ca <LL_USART_Init+0x1e6>
 80030c0:	f44f 7194 	mov.w	r1, #296	; 0x128
 80030c4:	4806      	ldr	r0, [pc, #24]	; (80030e0 <LL_USART_Init+0x1fc>)
 80030c6:	f7fd ffef 	bl	80010a8 <assert_failed>
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80030ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3720      	adds	r7, #32
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40013800 	.word	0x40013800
 80030d8:	40004400 	.word	0x40004400
 80030dc:	40004800 	.word	0x40004800
 80030e0:	08008330 	.word	0x08008330
 80030e4:	003d0900 	.word	0x003d0900

080030e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80030f0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80030f4:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	89fb      	ldrh	r3, [r7, #14]
 8003100:	4313      	orrs	r3, r2
 8003102:	b29a      	uxth	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr

08003116 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003116:	b480      	push	{r7}
 8003118:	b085      	sub	sp, #20
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800311e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003122:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800312a:	b29b      	uxth	r3, r3
 800312c:	b21a      	sxth	r2, r3
 800312e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003132:	43db      	mvns	r3, r3
 8003134:	b21b      	sxth	r3, r3
 8003136:	4013      	ands	r3, r2
 8003138:	b21b      	sxth	r3, r3
 800313a:	b29a      	uxth	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	bc80      	pop	{r7}
 800314c:	4770      	bx	lr

0800314e <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800314e:	b084      	sub	sp, #16
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	f107 0014 	add.w	r0, r7, #20
 800315c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7ff ffb1 	bl	80030e8 <USB_EnableGlobalInt>

  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003192:	b004      	add	sp, #16
 8003194:	4770      	bx	lr
	...

08003198 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003198:	b490      	push	{r4, r7}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80031a2:	2300      	movs	r3, #0
 80031a4:	75fb      	strb	r3, [r7, #23]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80031b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031bc:	82bb      	strh	r3, [r7, #20]

  /* initialize Endpoint */
  switch (ep->type)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	78db      	ldrb	r3, [r3, #3]
 80031c2:	2b03      	cmp	r3, #3
 80031c4:	d819      	bhi.n	80031fa <USB_ActivateEndpoint+0x62>
 80031c6:	a201      	add	r2, pc, #4	; (adr r2, 80031cc <USB_ActivateEndpoint+0x34>)
 80031c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031cc:	080031dd 	.word	0x080031dd
 80031d0:	080031f1 	.word	0x080031f1
 80031d4:	08003201 	.word	0x08003201
 80031d8:	080031e7 	.word	0x080031e7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80031dc:	8abb      	ldrh	r3, [r7, #20]
 80031de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031e2:	82bb      	strh	r3, [r7, #20]
      break;
 80031e4:	e00d      	b.n	8003202 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80031e6:	8abb      	ldrh	r3, [r7, #20]
 80031e8:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80031ec:	82bb      	strh	r3, [r7, #20]
      break;
 80031ee:	e008      	b.n	8003202 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80031f0:	8abb      	ldrh	r3, [r7, #20]
 80031f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031f6:	82bb      	strh	r3, [r7, #20]
      break;
 80031f8:	e003      	b.n	8003202 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	75fb      	strb	r3, [r7, #23]
      break;
 80031fe:	e000      	b.n	8003202 <USB_ActivateEndpoint+0x6a>
      break;
 8003200:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	441a      	add	r2, r3
 800320c:	8abb      	ldrh	r3, [r7, #20]
 800320e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003212:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800321a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800321e:	b29b      	uxth	r3, r3
 8003220:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	881b      	ldrh	r3, [r3, #0]
 800322e:	b29b      	uxth	r3, r3
 8003230:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003238:	b29a      	uxth	r2, r3
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	b29b      	uxth	r3, r3
 8003240:	4313      	orrs	r3, r2
 8003242:	b29c      	uxth	r4, r3
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	441a      	add	r2, r3
 800324e:	4b87      	ldr	r3, [pc, #540]	; (800346c <USB_ActivateEndpoint+0x2d4>)
 8003250:	4323      	orrs	r3, r4
 8003252:	b29b      	uxth	r3, r3
 8003254:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	7b1b      	ldrb	r3, [r3, #12]
 800325a:	2b00      	cmp	r3, #0
 800325c:	f040 810c 	bne.w	8003478 <USB_ActivateEndpoint+0x2e0>
  {
    if (ep->is_in != 0U)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	785b      	ldrb	r3, [r3, #1]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d067      	beq.n	8003338 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003268:	687c      	ldr	r4, [r7, #4]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003270:	b29b      	uxth	r3, r3
 8003272:	441c      	add	r4, r3
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	4423      	add	r3, r4
 800327c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003280:	461c      	mov	r4, r3
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	88db      	ldrh	r3, [r3, #6]
 8003286:	085b      	lsrs	r3, r3, #1
 8003288:	b29b      	uxth	r3, r3
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	b29b      	uxth	r3, r3
 800328e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	b29c      	uxth	r4, r3
 800329e:	4623      	mov	r3, r4
 80032a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d014      	beq.n	80032d2 <USB_ActivateEndpoint+0x13a>
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	881b      	ldrh	r3, [r3, #0]
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032be:	b29c      	uxth	r4, r3
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	441a      	add	r2, r3
 80032ca:	4b69      	ldr	r3, [pc, #420]	; (8003470 <USB_ActivateEndpoint+0x2d8>)
 80032cc:	4323      	orrs	r3, r4
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	78db      	ldrb	r3, [r3, #3]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d018      	beq.n	800330c <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032f0:	b29c      	uxth	r4, r3
 80032f2:	f084 0320 	eor.w	r3, r4, #32
 80032f6:	b29c      	uxth	r4, r3
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	441a      	add	r2, r3
 8003302:	4b5a      	ldr	r3, [pc, #360]	; (800346c <USB_ActivateEndpoint+0x2d4>)
 8003304:	4323      	orrs	r3, r4
 8003306:	b29b      	uxth	r3, r3
 8003308:	8013      	strh	r3, [r2, #0]
 800330a:	e225      	b.n	8003758 <USB_ActivateEndpoint+0x5c0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4413      	add	r3, r2
 8003316:	881b      	ldrh	r3, [r3, #0]
 8003318:	b29b      	uxth	r3, r3
 800331a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800331e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003322:	b29c      	uxth	r4, r3
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	441a      	add	r2, r3
 800332e:	4b4f      	ldr	r3, [pc, #316]	; (800346c <USB_ActivateEndpoint+0x2d4>)
 8003330:	4323      	orrs	r3, r4
 8003332:	b29b      	uxth	r3, r3
 8003334:	8013      	strh	r3, [r2, #0]
 8003336:	e20f      	b.n	8003758 <USB_ActivateEndpoint+0x5c0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003338:	687c      	ldr	r4, [r7, #4]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003340:	b29b      	uxth	r3, r3
 8003342:	441c      	add	r4, r3
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	4423      	add	r3, r4
 800334c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003350:	461c      	mov	r4, r3
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	88db      	ldrh	r3, [r3, #6]
 8003356:	085b      	lsrs	r3, r3, #1
 8003358:	b29b      	uxth	r3, r3
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	b29b      	uxth	r3, r3
 800335e:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003360:	687c      	ldr	r4, [r7, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003368:	b29b      	uxth	r3, r3
 800336a:	441c      	add	r4, r3
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	4423      	add	r3, r4
 8003374:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d110      	bne.n	80033a4 <USB_ActivateEndpoint+0x20c>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800338a:	b29a      	uxth	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	801a      	strh	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	881b      	ldrh	r3, [r3, #0]
 8003394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800339c:	b29a      	uxth	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	801a      	strh	r2, [r3, #0]
 80033a2:	e026      	b.n	80033f2 <USB_ActivateEndpoint+0x25a>
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	2b3d      	cmp	r3, #61	; 0x3d
 80033aa:	d813      	bhi.n	80033d4 <USB_ActivateEndpoint+0x23c>
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	085b      	lsrs	r3, r3, #1
 80033b2:	613b      	str	r3, [r7, #16]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d002      	beq.n	80033c6 <USB_ActivateEndpoint+0x22e>
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	3301      	adds	r3, #1
 80033c4:	613b      	str	r3, [r7, #16]
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	029b      	lsls	r3, r3, #10
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	801a      	strh	r2, [r3, #0]
 80033d2:	e00e      	b.n	80033f2 <USB_ActivateEndpoint+0x25a>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	095b      	lsrs	r3, r3, #5
 80033da:	613b      	str	r3, [r7, #16]
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	b29b      	uxth	r3, r3
 80033e0:	029b      	lsls	r3, r3, #10
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	b29c      	uxth	r4, r3
 8003400:	4623      	mov	r3, r4
 8003402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d014      	beq.n	8003434 <USB_ActivateEndpoint+0x29c>
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	881b      	ldrh	r3, [r3, #0]
 8003416:	b29b      	uxth	r3, r3
 8003418:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800341c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003420:	b29c      	uxth	r4, r3
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	441a      	add	r2, r3
 800342c:	4b11      	ldr	r3, [pc, #68]	; (8003474 <USB_ActivateEndpoint+0x2dc>)
 800342e:	4323      	orrs	r3, r4
 8003430:	b29b      	uxth	r3, r3
 8003432:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	b29b      	uxth	r3, r3
 8003442:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800344a:	b29c      	uxth	r4, r3
 800344c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003450:	b29c      	uxth	r4, r3
 8003452:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003456:	b29c      	uxth	r4, r3
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	441a      	add	r2, r3
 8003462:	4b02      	ldr	r3, [pc, #8]	; (800346c <USB_ActivateEndpoint+0x2d4>)
 8003464:	4323      	orrs	r3, r4
 8003466:	b29b      	uxth	r3, r3
 8003468:	8013      	strh	r3, [r2, #0]
 800346a:	e175      	b.n	8003758 <USB_ActivateEndpoint+0x5c0>
 800346c:	ffff8080 	.word	0xffff8080
 8003470:	ffff80c0 	.word	0xffff80c0
 8003474:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	881b      	ldrh	r3, [r3, #0]
 8003484:	b29b      	uxth	r3, r3
 8003486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800348a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348e:	b29c      	uxth	r4, r3
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	441a      	add	r2, r3
 800349a:	4b96      	ldr	r3, [pc, #600]	; (80036f4 <USB_ActivateEndpoint+0x55c>)
 800349c:	4323      	orrs	r3, r4
 800349e:	b29b      	uxth	r3, r3
 80034a0:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80034a2:	687c      	ldr	r4, [r7, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	441c      	add	r4, r3
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	4423      	add	r3, r4
 80034b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034ba:	461c      	mov	r4, r3
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	891b      	ldrh	r3, [r3, #8]
 80034c0:	085b      	lsrs	r3, r3, #1
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	8023      	strh	r3, [r4, #0]
 80034ca:	687c      	ldr	r4, [r7, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	441c      	add	r4, r3
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	4423      	add	r3, r4
 80034de:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80034e2:	461c      	mov	r4, r3
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	895b      	ldrh	r3, [r3, #10]
 80034e8:	085b      	lsrs	r3, r3, #1
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	785b      	ldrb	r3, [r3, #1]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f040 8088 	bne.w	800360c <USB_ActivateEndpoint+0x474>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	b29c      	uxth	r4, r3
 800350a:	4623      	mov	r3, r4
 800350c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d014      	beq.n	800353e <USB_ActivateEndpoint+0x3a6>
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	881b      	ldrh	r3, [r3, #0]
 8003520:	b29b      	uxth	r3, r3
 8003522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800352a:	b29c      	uxth	r4, r3
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	441a      	add	r2, r3
 8003536:	4b70      	ldr	r3, [pc, #448]	; (80036f8 <USB_ActivateEndpoint+0x560>)
 8003538:	4323      	orrs	r3, r4
 800353a:	b29b      	uxth	r3, r3
 800353c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	b29c      	uxth	r4, r3
 800354c:	4623      	mov	r3, r4
 800354e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003552:	2b00      	cmp	r3, #0
 8003554:	d014      	beq.n	8003580 <USB_ActivateEndpoint+0x3e8>
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	b29b      	uxth	r3, r3
 8003564:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800356c:	b29c      	uxth	r4, r3
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	441a      	add	r2, r3
 8003578:	4b60      	ldr	r3, [pc, #384]	; (80036fc <USB_ActivateEndpoint+0x564>)
 800357a:	4323      	orrs	r3, r4
 800357c:	b29b      	uxth	r3, r3
 800357e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	881b      	ldrh	r3, [r3, #0]
 800358c:	b29b      	uxth	r3, r3
 800358e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003596:	b29c      	uxth	r4, r3
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	441a      	add	r2, r3
 80035a2:	4b56      	ldr	r3, [pc, #344]	; (80036fc <USB_ActivateEndpoint+0x564>)
 80035a4:	4323      	orrs	r3, r4
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	881b      	ldrh	r3, [r3, #0]
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c0:	b29c      	uxth	r4, r3
 80035c2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80035c6:	b29c      	uxth	r4, r3
 80035c8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80035cc:	b29c      	uxth	r4, r3
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	441a      	add	r2, r3
 80035d8:	4b49      	ldr	r3, [pc, #292]	; (8003700 <USB_ActivateEndpoint+0x568>)
 80035da:	4323      	orrs	r3, r4
 80035dc:	b29b      	uxth	r3, r3
 80035de:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	881b      	ldrh	r3, [r3, #0]
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035f6:	b29c      	uxth	r4, r3
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	441a      	add	r2, r3
 8003602:	4b3f      	ldr	r3, [pc, #252]	; (8003700 <USB_ActivateEndpoint+0x568>)
 8003604:	4323      	orrs	r3, r4
 8003606:	b29b      	uxth	r3, r3
 8003608:	8013      	strh	r3, [r2, #0]
 800360a:	e0a5      	b.n	8003758 <USB_ActivateEndpoint+0x5c0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	881b      	ldrh	r3, [r3, #0]
 8003618:	b29c      	uxth	r4, r3
 800361a:	4623      	mov	r3, r4
 800361c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d014      	beq.n	800364e <USB_ActivateEndpoint+0x4b6>
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	881b      	ldrh	r3, [r3, #0]
 8003630:	b29b      	uxth	r3, r3
 8003632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800363a:	b29c      	uxth	r4, r3
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	441a      	add	r2, r3
 8003646:	4b2c      	ldr	r3, [pc, #176]	; (80036f8 <USB_ActivateEndpoint+0x560>)
 8003648:	4323      	orrs	r3, r4
 800364a:	b29b      	uxth	r3, r3
 800364c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	b29c      	uxth	r4, r3
 800365c:	4623      	mov	r3, r4
 800365e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003662:	2b00      	cmp	r3, #0
 8003664:	d014      	beq.n	8003690 <USB_ActivateEndpoint+0x4f8>
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4413      	add	r3, r2
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	b29b      	uxth	r3, r3
 8003674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800367c:	b29c      	uxth	r4, r3
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	441a      	add	r2, r3
 8003688:	4b1c      	ldr	r3, [pc, #112]	; (80036fc <USB_ActivateEndpoint+0x564>)
 800368a:	4323      	orrs	r3, r4
 800368c:	b29b      	uxth	r3, r3
 800368e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4413      	add	r3, r2
 800369a:	881b      	ldrh	r3, [r3, #0]
 800369c:	b29b      	uxth	r3, r3
 800369e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a6:	b29c      	uxth	r4, r3
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	441a      	add	r2, r3
 80036b2:	4b11      	ldr	r3, [pc, #68]	; (80036f8 <USB_ActivateEndpoint+0x560>)
 80036b4:	4323      	orrs	r3, r4
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	78db      	ldrb	r3, [r3, #3]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d020      	beq.n	8003704 <USB_ActivateEndpoint+0x56c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036d8:	b29c      	uxth	r4, r3
 80036da:	f084 0320 	eor.w	r3, r4, #32
 80036de:	b29c      	uxth	r4, r3
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	441a      	add	r2, r3
 80036ea:	4b05      	ldr	r3, [pc, #20]	; (8003700 <USB_ActivateEndpoint+0x568>)
 80036ec:	4323      	orrs	r3, r4
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	8013      	strh	r3, [r2, #0]
 80036f2:	e01c      	b.n	800372e <USB_ActivateEndpoint+0x596>
 80036f4:	ffff8180 	.word	0xffff8180
 80036f8:	ffffc080 	.word	0xffffc080
 80036fc:	ffff80c0 	.word	0xffff80c0
 8003700:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	b29b      	uxth	r3, r3
 8003712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003716:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800371a:	b29c      	uxth	r4, r3
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	441a      	add	r2, r3
 8003726:	4b0f      	ldr	r3, [pc, #60]	; (8003764 <USB_ActivateEndpoint+0x5cc>)
 8003728:	4323      	orrs	r3, r4
 800372a:	b29b      	uxth	r3, r3
 800372c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	881b      	ldrh	r3, [r3, #0]
 800373a:	b29b      	uxth	r3, r3
 800373c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003744:	b29c      	uxth	r4, r3
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	441a      	add	r2, r3
 8003750:	4b04      	ldr	r3, [pc, #16]	; (8003764 <USB_ActivateEndpoint+0x5cc>)
 8003752:	4323      	orrs	r3, r4
 8003754:	b29b      	uxth	r3, r3
 8003756:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003758:	7dfb      	ldrb	r3, [r7, #23]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bc90      	pop	{r4, r7}
 8003762:	4770      	bx	lr
 8003764:	ffff8080 	.word	0xffff8080

08003768 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003768:	b490      	push	{r4, r7}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	7b1b      	ldrb	r3, [r3, #12]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d171      	bne.n	800385e <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	785b      	ldrb	r3, [r3, #1]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d036      	beq.n	80037f0 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4413      	add	r3, r2
 800378c:	881b      	ldrh	r3, [r3, #0]
 800378e:	b29c      	uxth	r4, r3
 8003790:	4623      	mov	r3, r4
 8003792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003796:	2b00      	cmp	r3, #0
 8003798:	d014      	beq.n	80037c4 <USB_DeactivateEndpoint+0x5c>
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	881b      	ldrh	r3, [r3, #0]
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037b0:	b29c      	uxth	r4, r3
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	441a      	add	r2, r3
 80037bc:	4b6b      	ldr	r3, [pc, #428]	; (800396c <USB_DeactivateEndpoint+0x204>)
 80037be:	4323      	orrs	r3, r4
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	881b      	ldrh	r3, [r3, #0]
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037da:	b29c      	uxth	r4, r3
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	441a      	add	r2, r3
 80037e6:	4b62      	ldr	r3, [pc, #392]	; (8003970 <USB_DeactivateEndpoint+0x208>)
 80037e8:	4323      	orrs	r3, r4
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	8013      	strh	r3, [r2, #0]
 80037ee:	e144      	b.n	8003a7a <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	881b      	ldrh	r3, [r3, #0]
 80037fc:	b29c      	uxth	r4, r3
 80037fe:	4623      	mov	r3, r4
 8003800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d014      	beq.n	8003832 <USB_DeactivateEndpoint+0xca>
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	881b      	ldrh	r3, [r3, #0]
 8003814:	b29b      	uxth	r3, r3
 8003816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800381a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381e:	b29c      	uxth	r4, r3
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	441a      	add	r2, r3
 800382a:	4b52      	ldr	r3, [pc, #328]	; (8003974 <USB_DeactivateEndpoint+0x20c>)
 800382c:	4323      	orrs	r3, r4
 800382e:	b29b      	uxth	r3, r3
 8003830:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4413      	add	r3, r2
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	b29b      	uxth	r3, r3
 8003840:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003844:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003848:	b29c      	uxth	r4, r3
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	441a      	add	r2, r3
 8003854:	4b46      	ldr	r3, [pc, #280]	; (8003970 <USB_DeactivateEndpoint+0x208>)
 8003856:	4323      	orrs	r3, r4
 8003858:	b29b      	uxth	r3, r3
 800385a:	8013      	strh	r3, [r2, #0]
 800385c:	e10d      	b.n	8003a7a <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	785b      	ldrb	r3, [r3, #1]
 8003862:	2b00      	cmp	r3, #0
 8003864:	f040 8088 	bne.w	8003978 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4413      	add	r3, r2
 8003872:	881b      	ldrh	r3, [r3, #0]
 8003874:	b29c      	uxth	r4, r3
 8003876:	4623      	mov	r3, r4
 8003878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d014      	beq.n	80038aa <USB_DeactivateEndpoint+0x142>
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4413      	add	r3, r2
 800388a:	881b      	ldrh	r3, [r3, #0]
 800388c:	b29b      	uxth	r3, r3
 800388e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003896:	b29c      	uxth	r4, r3
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	441a      	add	r2, r3
 80038a2:	4b34      	ldr	r3, [pc, #208]	; (8003974 <USB_DeactivateEndpoint+0x20c>)
 80038a4:	4323      	orrs	r3, r4
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4413      	add	r3, r2
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	b29c      	uxth	r4, r3
 80038b8:	4623      	mov	r3, r4
 80038ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d014      	beq.n	80038ec <USB_DeactivateEndpoint+0x184>
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4413      	add	r3, r2
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038d8:	b29c      	uxth	r4, r3
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	441a      	add	r2, r3
 80038e4:	4b21      	ldr	r3, [pc, #132]	; (800396c <USB_DeactivateEndpoint+0x204>)
 80038e6:	4323      	orrs	r3, r4
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	881b      	ldrh	r3, [r3, #0]
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003902:	b29c      	uxth	r4, r3
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	441a      	add	r2, r3
 800390e:	4b17      	ldr	r3, [pc, #92]	; (800396c <USB_DeactivateEndpoint+0x204>)
 8003910:	4323      	orrs	r3, r4
 8003912:	b29b      	uxth	r3, r3
 8003914:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	b29b      	uxth	r3, r3
 8003924:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800392c:	b29c      	uxth	r4, r3
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	441a      	add	r2, r3
 8003938:	4b0d      	ldr	r3, [pc, #52]	; (8003970 <USB_DeactivateEndpoint+0x208>)
 800393a:	4323      	orrs	r3, r4
 800393c:	b29b      	uxth	r3, r3
 800393e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	b29b      	uxth	r3, r3
 800394e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003952:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003956:	b29c      	uxth	r4, r3
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	441a      	add	r2, r3
 8003962:	4b03      	ldr	r3, [pc, #12]	; (8003970 <USB_DeactivateEndpoint+0x208>)
 8003964:	4323      	orrs	r3, r4
 8003966:	b29b      	uxth	r3, r3
 8003968:	8013      	strh	r3, [r2, #0]
 800396a:	e086      	b.n	8003a7a <USB_DeactivateEndpoint+0x312>
 800396c:	ffff80c0 	.word	0xffff80c0
 8003970:	ffff8080 	.word	0xffff8080
 8003974:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	b29c      	uxth	r4, r3
 8003986:	4623      	mov	r3, r4
 8003988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d014      	beq.n	80039ba <USB_DeactivateEndpoint+0x252>
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4413      	add	r3, r2
 800399a:	881b      	ldrh	r3, [r3, #0]
 800399c:	b29b      	uxth	r3, r3
 800399e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a6:	b29c      	uxth	r4, r3
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	441a      	add	r2, r3
 80039b2:	4b35      	ldr	r3, [pc, #212]	; (8003a88 <USB_DeactivateEndpoint+0x320>)
 80039b4:	4323      	orrs	r3, r4
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4413      	add	r3, r2
 80039c4:	881b      	ldrh	r3, [r3, #0]
 80039c6:	b29c      	uxth	r4, r3
 80039c8:	4623      	mov	r3, r4
 80039ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d014      	beq.n	80039fc <USB_DeactivateEndpoint+0x294>
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	881b      	ldrh	r3, [r3, #0]
 80039de:	b29b      	uxth	r3, r3
 80039e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e8:	b29c      	uxth	r4, r3
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	441a      	add	r2, r3
 80039f4:	4b25      	ldr	r3, [pc, #148]	; (8003a8c <USB_DeactivateEndpoint+0x324>)
 80039f6:	4323      	orrs	r3, r4
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	881b      	ldrh	r3, [r3, #0]
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a12:	b29c      	uxth	r4, r3
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	441a      	add	r2, r3
 8003a1e:	4b1a      	ldr	r3, [pc, #104]	; (8003a88 <USB_DeactivateEndpoint+0x320>)
 8003a20:	4323      	orrs	r3, r4
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	881b      	ldrh	r3, [r3, #0]
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a3c:	b29c      	uxth	r4, r3
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	441a      	add	r2, r3
 8003a48:	4b11      	ldr	r3, [pc, #68]	; (8003a90 <USB_DeactivateEndpoint+0x328>)
 8003a4a:	4323      	orrs	r3, r4
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a66:	b29c      	uxth	r4, r3
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	441a      	add	r2, r3
 8003a72:	4b07      	ldr	r3, [pc, #28]	; (8003a90 <USB_DeactivateEndpoint+0x328>)
 8003a74:	4323      	orrs	r3, r4
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bc90      	pop	{r4, r7}
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	ffffc080 	.word	0xffffc080
 8003a8c:	ffff80c0 	.word	0xffff80c0
 8003a90:	ffff8080 	.word	0xffff8080

08003a94 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003a94:	b590      	push	{r4, r7, lr}
 8003a96:	b095      	sub	sp, #84	; 0x54
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	785b      	ldrb	r3, [r3, #1]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	f040 815d 	bne.w	8003d62 <USB_EPStartXfer+0x2ce>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	699a      	ldr	r2, [r3, #24]
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d909      	bls.n	8003ac8 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	699a      	ldr	r2, [r3, #24]
 8003abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ac0:	1ad2      	subs	r2, r2, r3
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	619a      	str	r2, [r3, #24]
 8003ac6:	e005      	b.n	8003ad4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	7b1b      	ldrb	r3, [r3, #12]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d11a      	bne.n	8003b12 <USB_EPStartXfer+0x7e>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	6959      	ldr	r1, [r3, #20]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	88da      	ldrh	r2, [r3, #6]
 8003ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 fb8c 	bl	8004206 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003aee:	687c      	ldr	r4, [r7, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	441c      	add	r4, r3
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	4423      	add	r3, r4
 8003b02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	801a      	strh	r2, [r3, #0]
 8003b10:	e10b      	b.n	8003d2a <USB_EPStartXfer+0x296>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4413      	add	r3, r2
 8003b1c:	881b      	ldrh	r3, [r3, #0]
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d062      	beq.n	8003bee <USB_EPStartXfer+0x15a>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003b28:	687c      	ldr	r4, [r7, #4]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	785b      	ldrb	r3, [r3, #1]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d144      	bne.n	8003bbc <USB_EPStartXfer+0x128>
 8003b32:	687c      	ldr	r4, [r7, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	441c      	add	r4, r3
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	4423      	add	r3, r4
 8003b46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d110      	bne.n	8003b74 <USB_EPStartXfer+0xe0>
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	881b      	ldrh	r3, [r3, #0]
 8003b56:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	801a      	strh	r2, [r3, #0]
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	881b      	ldrh	r3, [r3, #0]
 8003b64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	801a      	strh	r2, [r3, #0]
 8003b72:	e037      	b.n	8003be4 <USB_EPStartXfer+0x150>
 8003b74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b76:	2b3d      	cmp	r3, #61	; 0x3d
 8003b78:	d811      	bhi.n	8003b9e <USB_EPStartXfer+0x10a>
 8003b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b7c:	085b      	lsrs	r3, r3, #1
 8003b7e:	647b      	str	r3, [r7, #68]	; 0x44
 8003b80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <USB_EPStartXfer+0xfc>
 8003b8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	647b      	str	r3, [r7, #68]	; 0x44
 8003b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	029b      	lsls	r3, r3, #10
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	801a      	strh	r2, [r3, #0]
 8003b9c:	e022      	b.n	8003be4 <USB_EPStartXfer+0x150>
 8003b9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ba0:	095b      	lsrs	r3, r3, #5
 8003ba2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	029b      	lsls	r3, r3, #10
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	801a      	strh	r2, [r3, #0]
 8003bba:	e013      	b.n	8003be4 <USB_EPStartXfer+0x150>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	785b      	ldrb	r3, [r3, #1]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d10f      	bne.n	8003be4 <USB_EPStartXfer+0x150>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	441c      	add	r4, r3
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	4423      	add	r3, r4
 8003bd6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	895b      	ldrh	r3, [r3, #10]
 8003be8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003bec:	e061      	b.n	8003cb2 <USB_EPStartXfer+0x21e>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	785b      	ldrb	r3, [r3, #1]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d144      	bne.n	8003c80 <USB_EPStartXfer+0x1ec>
 8003bf6:	687c      	ldr	r4, [r7, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	441c      	add	r4, r3
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	4423      	add	r3, r4
 8003c0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c0e:	61bb      	str	r3, [r7, #24]
 8003c10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d110      	bne.n	8003c38 <USB_EPStartXfer+0x1a4>
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	881b      	ldrh	r3, [r3, #0]
 8003c1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	801a      	strh	r2, [r3, #0]
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	801a      	strh	r2, [r3, #0]
 8003c36:	e038      	b.n	8003caa <USB_EPStartXfer+0x216>
 8003c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c3a:	2b3d      	cmp	r3, #61	; 0x3d
 8003c3c:	d811      	bhi.n	8003c62 <USB_EPStartXfer+0x1ce>
 8003c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c40:	085b      	lsrs	r3, r3, #1
 8003c42:	643b      	str	r3, [r7, #64]	; 0x40
 8003c44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d002      	beq.n	8003c54 <USB_EPStartXfer+0x1c0>
 8003c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c50:	3301      	adds	r3, #1
 8003c52:	643b      	str	r3, [r7, #64]	; 0x40
 8003c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	029b      	lsls	r3, r3, #10
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	801a      	strh	r2, [r3, #0]
 8003c60:	e023      	b.n	8003caa <USB_EPStartXfer+0x216>
 8003c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c64:	095b      	lsrs	r3, r3, #5
 8003c66:	643b      	str	r3, [r7, #64]	; 0x40
 8003c68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	029b      	lsls	r3, r3, #10
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	801a      	strh	r2, [r3, #0]
 8003c7e:	e014      	b.n	8003caa <USB_EPStartXfer+0x216>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	785b      	ldrb	r3, [r3, #1]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d110      	bne.n	8003caa <USB_EPStartXfer+0x216>
 8003c88:	687c      	ldr	r4, [r7, #4]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	441c      	add	r4, r3
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	4423      	add	r3, r4
 8003c9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ca0:	61fb      	str	r3, [r7, #28]
 8003ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr0;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	891b      	ldrh	r3, [r3, #8]
 8003cae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	6959      	ldr	r1, [r3, #20]
 8003cb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 faa1 	bl	8004206 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	785b      	ldrb	r3, [r3, #1]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d115      	bne.n	8003cf8 <USB_EPStartXfer+0x264>
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	4413      	add	r3, r2
 8003cd6:	881b      	ldrh	r3, [r3, #0]
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ce2:	b29c      	uxth	r4, r3
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	441a      	add	r2, r3
 8003cee:	4b99      	ldr	r3, [pc, #612]	; (8003f54 <USB_EPStartXfer+0x4c0>)
 8003cf0:	4323      	orrs	r3, r4
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	8013      	strh	r3, [r2, #0]
 8003cf6:	e018      	b.n	8003d2a <USB_EPStartXfer+0x296>
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	785b      	ldrb	r3, [r3, #1]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d114      	bne.n	8003d2a <USB_EPStartXfer+0x296>
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d16:	b29c      	uxth	r4, r3
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	441a      	add	r2, r3
 8003d22:	4b8d      	ldr	r3, [pc, #564]	; (8003f58 <USB_EPStartXfer+0x4c4>)
 8003d24:	4323      	orrs	r3, r4
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d40:	b29c      	uxth	r4, r3
 8003d42:	f084 0310 	eor.w	r3, r4, #16
 8003d46:	b29c      	uxth	r4, r3
 8003d48:	f084 0320 	eor.w	r3, r4, #32
 8003d4c:	b29c      	uxth	r4, r3
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	441a      	add	r2, r3
 8003d58:	4b80      	ldr	r3, [pc, #512]	; (8003f5c <USB_EPStartXfer+0x4c8>)
 8003d5a:	4323      	orrs	r3, r4
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	8013      	strh	r3, [r2, #0]
 8003d60:	e13c      	b.n	8003fdc <USB_EPStartXfer+0x548>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	699a      	ldr	r2, [r3, #24]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d909      	bls.n	8003d82 <USB_EPStartXfer+0x2ee>
    {
      len = ep->maxpacket;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len -= len;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	699a      	ldr	r2, [r3, #24]
 8003d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d7a:	1ad2      	subs	r2, r2, r3
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	619a      	str	r2, [r3, #24]
 8003d80:	e005      	b.n	8003d8e <USB_EPStartXfer+0x2fa>
    }
    else
    {
      len = ep->xfer_len;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	64bb      	str	r3, [r7, #72]	; 0x48
      ep->xfer_len = 0U;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	7b1b      	ldrb	r3, [r3, #12]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d144      	bne.n	8003e20 <USB_EPStartXfer+0x38c>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003d96:	687c      	ldr	r4, [r7, #4]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	441c      	add	r4, r3
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	4423      	add	r3, r4
 8003daa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003dae:	623b      	str	r3, [r7, #32]
 8003db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d110      	bne.n	8003dd8 <USB_EPStartXfer+0x344>
 8003db6:	6a3b      	ldr	r3, [r7, #32]
 8003db8:	881b      	ldrh	r3, [r3, #0]
 8003dba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	6a3b      	ldr	r3, [r7, #32]
 8003dc2:	801a      	strh	r2, [r3, #0]
 8003dc4:	6a3b      	ldr	r3, [r7, #32]
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	6a3b      	ldr	r3, [r7, #32]
 8003dd4:	801a      	strh	r2, [r3, #0]
 8003dd6:	e0e6      	b.n	8003fa6 <USB_EPStartXfer+0x512>
 8003dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dda:	2b3d      	cmp	r3, #61	; 0x3d
 8003ddc:	d811      	bhi.n	8003e02 <USB_EPStartXfer+0x36e>
 8003dde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003de0:	085b      	lsrs	r3, r3, #1
 8003de2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <USB_EPStartXfer+0x360>
 8003dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003df0:	3301      	adds	r3, #1
 8003df2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	029b      	lsls	r3, r3, #10
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	801a      	strh	r2, [r3, #0]
 8003e00:	e0d1      	b.n	8003fa6 <USB_EPStartXfer+0x512>
 8003e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e04:	095b      	lsrs	r3, r3, #5
 8003e06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	029b      	lsls	r3, r3, #10
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	801a      	strh	r2, [r3, #0]
 8003e1e:	e0c2      	b.n	8003fa6 <USB_EPStartXfer+0x512>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	785b      	ldrb	r3, [r3, #1]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d144      	bne.n	8003eb2 <USB_EPStartXfer+0x41e>
 8003e28:	687c      	ldr	r4, [r7, #4]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	441c      	add	r4, r3
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	011b      	lsls	r3, r3, #4
 8003e3a:	4423      	add	r3, r4
 8003e3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d110      	bne.n	8003e6a <USB_EPStartXfer+0x3d6>
 8003e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4a:	881b      	ldrh	r3, [r3, #0]
 8003e4c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e54:	801a      	strh	r2, [r3, #0]
 8003e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e58:	881b      	ldrh	r3, [r3, #0]
 8003e5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e66:	801a      	strh	r2, [r3, #0]
 8003e68:	e038      	b.n	8003edc <USB_EPStartXfer+0x448>
 8003e6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e6c:	2b3d      	cmp	r3, #61	; 0x3d
 8003e6e:	d811      	bhi.n	8003e94 <USB_EPStartXfer+0x400>
 8003e70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e72:	085b      	lsrs	r3, r3, #1
 8003e74:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d002      	beq.n	8003e86 <USB_EPStartXfer+0x3f2>
 8003e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e82:	3301      	adds	r3, #1
 8003e84:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	029b      	lsls	r3, r3, #10
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e90:	801a      	strh	r2, [r3, #0]
 8003e92:	e023      	b.n	8003edc <USB_EPStartXfer+0x448>
 8003e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e96:	095b      	lsrs	r3, r3, #5
 8003e98:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	029b      	lsls	r3, r3, #10
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eae:	801a      	strh	r2, [r3, #0]
 8003eb0:	e014      	b.n	8003edc <USB_EPStartXfer+0x448>
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	785b      	ldrb	r3, [r3, #1]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d110      	bne.n	8003edc <USB_EPStartXfer+0x448>
 8003eba:	687c      	ldr	r4, [r7, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	441c      	add	r4, r3
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	4423      	add	r3, r4
 8003ece:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ed2:	633b      	str	r3, [r7, #48]	; 0x30
 8003ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eda:	801a      	strh	r2, [r3, #0]
 8003edc:	687c      	ldr	r4, [r7, #4]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	785b      	ldrb	r3, [r3, #1]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d14b      	bne.n	8003f7e <USB_EPStartXfer+0x4ea>
 8003ee6:	687c      	ldr	r4, [r7, #4]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	441c      	add	r4, r3
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	011b      	lsls	r3, r3, #4
 8003ef8:	4423      	add	r3, r4
 8003efa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003efe:	627b      	str	r3, [r7, #36]	; 0x24
 8003f00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d110      	bne.n	8003f28 <USB_EPStartXfer+0x494>
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	801a      	strh	r2, [r3, #0]
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	801a      	strh	r2, [r3, #0]
 8003f26:	e03e      	b.n	8003fa6 <USB_EPStartXfer+0x512>
 8003f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f2a:	2b3d      	cmp	r3, #61	; 0x3d
 8003f2c:	d818      	bhi.n	8003f60 <USB_EPStartXfer+0x4cc>
 8003f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f30:	085b      	lsrs	r3, r3, #1
 8003f32:	637b      	str	r3, [r7, #52]	; 0x34
 8003f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d002      	beq.n	8003f44 <USB_EPStartXfer+0x4b0>
 8003f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f40:	3301      	adds	r3, #1
 8003f42:	637b      	str	r3, [r7, #52]	; 0x34
 8003f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	029b      	lsls	r3, r3, #10
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	801a      	strh	r2, [r3, #0]
 8003f50:	e029      	b.n	8003fa6 <USB_EPStartXfer+0x512>
 8003f52:	bf00      	nop
 8003f54:	ffff80c0 	.word	0xffff80c0
 8003f58:	ffffc080 	.word	0xffffc080
 8003f5c:	ffff8080 	.word	0xffff8080
 8003f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f62:	095b      	lsrs	r3, r3, #5
 8003f64:	637b      	str	r3, [r7, #52]	; 0x34
 8003f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	029b      	lsls	r3, r3, #10
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	801a      	strh	r2, [r3, #0]
 8003f7c:	e013      	b.n	8003fa6 <USB_EPStartXfer+0x512>
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	785b      	ldrb	r3, [r3, #1]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d10f      	bne.n	8003fa6 <USB_EPStartXfer+0x512>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	441c      	add	r4, r3
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	011b      	lsls	r3, r3, #4
 8003f96:	4423      	add	r3, r4
 8003f98:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa4:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4413      	add	r3, r2
 8003fb0:	881b      	ldrh	r3, [r3, #0]
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fbc:	b29c      	uxth	r4, r3
 8003fbe:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003fc2:	b29c      	uxth	r4, r3
 8003fc4:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003fc8:	b29c      	uxth	r4, r3
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	441a      	add	r2, r3
 8003fd4:	4b04      	ldr	r3, [pc, #16]	; (8003fe8 <USB_EPStartXfer+0x554>)
 8003fd6:	4323      	orrs	r3, r4
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3754      	adds	r7, #84	; 0x54
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd90      	pop	{r4, r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	ffff8080 	.word	0xffff8080

08003fec <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003fec:	b490      	push	{r4, r7}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	785b      	ldrb	r3, [r3, #1]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d018      	beq.n	8004030 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	b29b      	uxth	r3, r3
 800400c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004014:	b29c      	uxth	r4, r3
 8004016:	f084 0310 	eor.w	r3, r4, #16
 800401a:	b29c      	uxth	r4, r3
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	441a      	add	r2, r3
 8004026:	4b11      	ldr	r3, [pc, #68]	; (800406c <USB_EPSetStall+0x80>)
 8004028:	4323      	orrs	r3, r4
 800402a:	b29b      	uxth	r3, r3
 800402c:	8013      	strh	r3, [r2, #0]
 800402e:	e017      	b.n	8004060 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	b29b      	uxth	r3, r3
 800403e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004046:	b29c      	uxth	r4, r3
 8004048:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800404c:	b29c      	uxth	r4, r3
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	441a      	add	r2, r3
 8004058:	4b04      	ldr	r3, [pc, #16]	; (800406c <USB_EPSetStall+0x80>)
 800405a:	4323      	orrs	r3, r4
 800405c:	b29b      	uxth	r3, r3
 800405e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bc90      	pop	{r4, r7}
 800406a:	4770      	bx	lr
 800406c:	ffff8080 	.word	0xffff8080

08004070 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004070:	b490      	push	{r4, r7}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	7b1b      	ldrb	r3, [r3, #12]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d17d      	bne.n	800417e <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	785b      	ldrb	r3, [r3, #1]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d03d      	beq.n	8004106 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	881b      	ldrh	r3, [r3, #0]
 8004096:	b29c      	uxth	r4, r3
 8004098:	4623      	mov	r3, r4
 800409a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d014      	beq.n	80040cc <USB_EPClearStall+0x5c>
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	4413      	add	r3, r2
 80040ac:	881b      	ldrh	r3, [r3, #0]
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b8:	b29c      	uxth	r4, r3
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	441a      	add	r2, r3
 80040c4:	4b31      	ldr	r3, [pc, #196]	; (800418c <USB_EPClearStall+0x11c>)
 80040c6:	4323      	orrs	r3, r4
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	78db      	ldrb	r3, [r3, #3]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d054      	beq.n	800417e <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040ea:	b29c      	uxth	r4, r3
 80040ec:	f084 0320 	eor.w	r3, r4, #32
 80040f0:	b29c      	uxth	r4, r3
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	441a      	add	r2, r3
 80040fc:	4b24      	ldr	r3, [pc, #144]	; (8004190 <USB_EPClearStall+0x120>)
 80040fe:	4323      	orrs	r3, r4
 8004100:	b29b      	uxth	r3, r3
 8004102:	8013      	strh	r3, [r2, #0]
 8004104:	e03b      	b.n	800417e <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4413      	add	r3, r2
 8004110:	881b      	ldrh	r3, [r3, #0]
 8004112:	b29c      	uxth	r4, r3
 8004114:	4623      	mov	r3, r4
 8004116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d014      	beq.n	8004148 <USB_EPClearStall+0xd8>
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	b29b      	uxth	r3, r3
 800412c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004134:	b29c      	uxth	r4, r3
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	441a      	add	r2, r3
 8004140:	4b14      	ldr	r3, [pc, #80]	; (8004194 <USB_EPClearStall+0x124>)
 8004142:	4323      	orrs	r3, r4
 8004144:	b29b      	uxth	r3, r3
 8004146:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	b29b      	uxth	r3, r3
 8004156:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800415a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415e:	b29c      	uxth	r4, r3
 8004160:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004164:	b29c      	uxth	r4, r3
 8004166:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800416a:	b29c      	uxth	r4, r3
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	441a      	add	r2, r3
 8004176:	4b06      	ldr	r3, [pc, #24]	; (8004190 <USB_EPClearStall+0x120>)
 8004178:	4323      	orrs	r3, r4
 800417a:	b29b      	uxth	r3, r3
 800417c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bc90      	pop	{r4, r7}
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	ffff80c0 	.word	0xffff80c0
 8004190:	ffff8080 	.word	0xffff8080
 8004194:	ffffc080 	.word	0xffffc080

08004198 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	460b      	mov	r3, r1
 80041a2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80041a4:	78fb      	ldrb	r3, [r7, #3]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d103      	bne.n	80041b2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2280      	movs	r2, #128	; 0x80
 80041ae:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bc80      	pop	{r7}
 80041bc:	4770      	bx	lr

080041be <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80041be:	b480      	push	{r7}
 80041c0:	b083      	sub	sp, #12
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bc80      	pop	{r7}
 80041d0:	4770      	bx	lr

080041d2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b085      	sub	sp, #20
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80041e4:	68fb      	ldr	r3, [r7, #12]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bc80      	pop	{r7}
 80041ee:	4770      	bx	lr

080041f0 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	bc80      	pop	{r7}
 8004204:	4770      	bx	lr

08004206 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004206:	b480      	push	{r7}
 8004208:	b08d      	sub	sp, #52	; 0x34
 800420a:	af00      	add	r7, sp, #0
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	4611      	mov	r1, r2
 8004212:	461a      	mov	r2, r3
 8004214:	460b      	mov	r3, r1
 8004216:	80fb      	strh	r3, [r7, #6]
 8004218:	4613      	mov	r3, r2
 800421a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800421c:	88bb      	ldrh	r3, [r7, #4]
 800421e:	3301      	adds	r3, #1
 8004220:	085b      	lsrs	r3, r3, #1
 8004222:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800422c:	88fb      	ldrh	r3, [r7, #6]
 800422e:	005a      	lsls	r2, r3, #1
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	4413      	add	r3, r2
 8004234:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004238:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800423e:	e01e      	b.n	800427e <USB_WritePMA+0x78>
  {
    temp1 = (uint16_t) * pBuf;
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	3301      	adds	r3, #1
 800424a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) * pBuf << 8));
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	b29b      	uxth	r3, r3
 8004252:	021b      	lsls	r3, r3, #8
 8004254:	b29b      	uxth	r3, r3
 8004256:	461a      	mov	r2, r3
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	4313      	orrs	r3, r2
 800425c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	b29a      	uxth	r2, r3
 8004262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004264:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004268:	3302      	adds	r3, #2
 800426a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800426c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426e:	3302      	adds	r3, #2
 8004270:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	3301      	adds	r3, #1
 8004276:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427a:	3b01      	subs	r3, #1
 800427c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800427e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1dd      	bne.n	8004240 <USB_WritePMA+0x3a>
  }
}
 8004284:	bf00      	nop
 8004286:	3734      	adds	r7, #52	; 0x34
 8004288:	46bd      	mov	sp, r7
 800428a:	bc80      	pop	{r7}
 800428c:	4770      	bx	lr

0800428e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800428e:	b480      	push	{r7}
 8004290:	b08b      	sub	sp, #44	; 0x2c
 8004292:	af00      	add	r7, sp, #0
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	4611      	mov	r1, r2
 800429a:	461a      	mov	r2, r3
 800429c:	460b      	mov	r3, r1
 800429e:	80fb      	strh	r3, [r7, #6]
 80042a0:	4613      	mov	r3, r2
 80042a2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80042a4:	88bb      	ldrh	r3, [r7, #4]
 80042a6:	085b      	lsrs	r3, r3, #1
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	61fb      	str	r3, [r7, #28]

  pdwVal = (uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80042b4:	88fb      	ldrh	r3, [r7, #6]
 80042b6:	005a      	lsls	r2, r3, #1
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	4413      	add	r3, r2
 80042bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042c0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	627b      	str	r3, [r7, #36]	; 0x24
 80042c6:	e01a      	b.n	80042fe <USB_ReadPMA+0x70>
  {
    temp = *pdwVal;
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	3302      	adds	r3, #2
 80042d2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	3301      	adds	r3, #1
 80042e0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	0a1b      	lsrs	r3, r3, #8
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	3301      	adds	r3, #1
 80042f0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80042f2:	6a3b      	ldr	r3, [r7, #32]
 80042f4:	3302      	adds	r3, #2
 80042f6:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	3b01      	subs	r3, #1
 80042fc:	627b      	str	r3, [r7, #36]	; 0x24
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1e1      	bne.n	80042c8 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004304:	88bb      	ldrh	r3, [r7, #4]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	b29b      	uxth	r3, r3
 800430c:	2b00      	cmp	r3, #0
 800430e:	d006      	beq.n	800431e <USB_ReadPMA+0x90>
  {
    temp = *pdwVal;
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	881b      	ldrh	r3, [r3, #0]
 8004314:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	b2da      	uxtb	r2, r3
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	701a      	strb	r2, [r3, #0]
  }
}
 800431e:	bf00      	nop
 8004320:	372c      	adds	r7, #44	; 0x2c
 8004322:	46bd      	mov	sp, r7
 8004324:	bc80      	pop	{r7}
 8004326:	4770      	bx	lr

08004328 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8004330:	4a03      	ldr	r2, [pc, #12]	; (8004340 <LL_SetSystemCoreClock+0x18>)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6013      	str	r3, [r2, #0]
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	bc80      	pop	{r7}
 800433e:	4770      	bx	lr
 8004340:	20000000 	.word	0x20000000

08004344 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init (USBD_HandleTypeDef *pdev,
                               uint8_t cfgidx)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	460b      	mov	r3, r1
 800434e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004350:	2300      	movs	r3, #0
 8004352:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8004354:	2308      	movs	r3, #8
 8004356:	2203      	movs	r2, #3
 8004358:	2181      	movs	r1, #129	; 0x81
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f001 fccd 	bl	8005cfa <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8004366:	2302      	movs	r3, #2
 8004368:	2203      	movs	r2, #3
 800436a:	2101      	movs	r1, #1
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f001 fcc4 	bl	8005cfa <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 800437a:	2018      	movs	r0, #24
 800437c:	f001 fdca 	bl	8005f14 <USBD_static_malloc>
 8004380:	4602      	mov	r2, r0
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800438e:	2b00      	cmp	r3, #0
 8004390:	d102      	bne.n	8004398 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8004392:	2301      	movs	r3, #1
 8004394:	73fb      	strb	r3, [r7, #15]
 8004396:	e011      	b.n	80043bc <USBD_CUSTOM_HID_Init+0x78>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef*) pdev->pClassData;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800439e:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2200      	movs	r2, #0
 80043a4:	751a      	strb	r2, [r3, #20]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	2302      	movs	r3, #2
 80043b4:	2101      	movs	r1, #1
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f001 fd89 	bl	8005ece <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit (USBD_HandleTypeDef *pdev,
                                 uint8_t cfgidx)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b082      	sub	sp, #8
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
 80043ce:	460b      	mov	r3, r1
 80043d0:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 80043d2:	2181      	movs	r1, #129	; 0x81
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f001 fcb6 	bl	8005d46 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 80043e0:	2101      	movs	r1, #1
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f001 fcaf 	bl	8005d46 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* FRee allocated memory */
  if(pdev->pClassData != NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00e      	beq.n	8004418 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800440a:	4618      	mov	r0, r3
 800440c:	f001 fd8e 	bl	8005f2c <USBD_static_free>
    pdev->pClassData = NULL;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }
  return USBD_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
	...

08004424 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup (USBD_HandleTypeDef *pdev,
                                       USBD_SetupReqTypedef *req)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b088      	sub	sp, #32
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004434:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8004436:	2300      	movs	r3, #0
 8004438:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800443a:	2300      	movs	r3, #0
 800443c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800443e:	2300      	movs	r3, #0
 8004440:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800444e:	2b00      	cmp	r3, #0
 8004450:	d051      	beq.n	80044f6 <USBD_CUSTOM_HID_Setup+0xd2>
 8004452:	2b20      	cmp	r3, #32
 8004454:	f040 80d8 	bne.w	8004608 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
  case USB_REQ_TYPE_CLASS :
    switch (req->bRequest)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	785b      	ldrb	r3, [r3, #1]
 800445c:	3b02      	subs	r3, #2
 800445e:	2b09      	cmp	r3, #9
 8004460:	d841      	bhi.n	80044e6 <USBD_CUSTOM_HID_Setup+0xc2>
 8004462:	a201      	add	r2, pc, #4	; (adr r2, 8004468 <USBD_CUSTOM_HID_Setup+0x44>)
 8004464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004468:	080044c1 	.word	0x080044c1
 800446c:	0800449f 	.word	0x0800449f
 8004470:	080044e7 	.word	0x080044e7
 8004474:	080044e7 	.word	0x080044e7
 8004478:	080044e7 	.word	0x080044e7
 800447c:	080044e7 	.word	0x080044e7
 8004480:	080044e7 	.word	0x080044e7
 8004484:	080044d1 	.word	0x080044d1
 8004488:	080044af 	.word	0x080044af
 800448c:	08004491 	.word	0x08004491
    {
    case CUSTOM_HID_REQ_SET_PROTOCOL:
      hhid->Protocol = (uint8_t)(req->wValue);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	885b      	ldrh	r3, [r3, #2]
 8004494:	b2db      	uxtb	r3, r3
 8004496:	461a      	mov	r2, r3
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	605a      	str	r2, [r3, #4]
      break;
 800449c:	e02a      	b.n	80044f4 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_PROTOCOL:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	3304      	adds	r3, #4
 80044a2:	2201      	movs	r2, #1
 80044a4:	4619      	mov	r1, r3
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f001 f91a 	bl	80056e0 <USBD_CtlSendData>
      break;
 80044ac:	e022      	b.n	80044f4 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_IDLE:
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	885b      	ldrh	r3, [r3, #2]
 80044b2:	0a1b      	lsrs	r3, r3, #8
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	461a      	mov	r2, r3
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	609a      	str	r2, [r3, #8]
      break;
 80044be:	e019      	b.n	80044f4 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_GET_IDLE:
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	3308      	adds	r3, #8
 80044c4:	2201      	movs	r2, #1
 80044c6:	4619      	mov	r1, r3
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f001 f909 	bl	80056e0 <USBD_CtlSendData>
      break;
 80044ce:	e011      	b.n	80044f4 <USBD_CUSTOM_HID_Setup+0xd0>

    case CUSTOM_HID_REQ_SET_REPORT:
      hhid->IsReportAvailable = 1U;
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	2201      	movs	r2, #1
 80044d4:	611a      	str	r2, [r3, #16]
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, req->wLength);
 80044d6:	6939      	ldr	r1, [r7, #16]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	88db      	ldrh	r3, [r3, #6]
 80044dc:	461a      	mov	r2, r3
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f001 f92c 	bl	800573c <USBD_CtlPrepareRx>
      break;
 80044e4:	e006      	b.n	80044f4 <USBD_CUSTOM_HID_Setup+0xd0>

    default:
      USBD_CtlError (pdev, req);
 80044e6:	6839      	ldr	r1, [r7, #0]
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f001 f88f 	bl	800560c <USBD_CtlError>
      ret = USBD_FAIL;
 80044ee:	2302      	movs	r3, #2
 80044f0:	75fb      	strb	r3, [r7, #23]
      break;
 80044f2:	bf00      	nop
    }
    break;
 80044f4:	e08f      	b.n	8004616 <USBD_CUSTOM_HID_Setup+0x1f2>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	785b      	ldrb	r3, [r3, #1]
 80044fa:	2b0b      	cmp	r3, #11
 80044fc:	d87c      	bhi.n	80045f8 <USBD_CUSTOM_HID_Setup+0x1d4>
 80044fe:	a201      	add	r2, pc, #4	; (adr r2, 8004504 <USBD_CUSTOM_HID_Setup+0xe0>)
 8004500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004504:	08004535 	.word	0x08004535
 8004508:	080045f9 	.word	0x080045f9
 800450c:	080045f9 	.word	0x080045f9
 8004510:	080045f9 	.word	0x080045f9
 8004514:	080045f9 	.word	0x080045f9
 8004518:	080045f9 	.word	0x080045f9
 800451c:	0800455d 	.word	0x0800455d
 8004520:	080045f9 	.word	0x080045f9
 8004524:	080045f9 	.word	0x080045f9
 8004528:	080045f9 	.word	0x080045f9
 800452c:	080045ab 	.word	0x080045ab
 8004530:	080045d3 	.word	0x080045d3
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800453a:	2b03      	cmp	r3, #3
 800453c:	d107      	bne.n	800454e <USBD_CUSTOM_HID_Setup+0x12a>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800453e:	f107 030e 	add.w	r3, r7, #14
 8004542:	2202      	movs	r2, #2
 8004544:	4619      	mov	r1, r3
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f001 f8ca 	bl	80056e0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800454c:	e05b      	b.n	8004606 <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 800454e:	6839      	ldr	r1, [r7, #0]
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f001 f85b 	bl	800560c <USBD_CtlError>
			  ret = USBD_FAIL;
 8004556:	2302      	movs	r3, #2
 8004558:	75fb      	strb	r3, [r7, #23]
      break;
 800455a:	e054      	b.n	8004606 <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_GET_DESCRIPTOR:
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	885b      	ldrh	r3, [r3, #2]
 8004560:	0a1b      	lsrs	r3, r3, #8
 8004562:	b29b      	uxth	r3, r3
 8004564:	2b22      	cmp	r3, #34	; 0x22
 8004566:	d10b      	bne.n	8004580 <USBD_CUSTOM_HID_Setup+0x15c>
      {
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	88db      	ldrh	r3, [r3, #6]
 800456c:	2b2d      	cmp	r3, #45	; 0x2d
 800456e:	bf28      	it	cs
 8004570:	232d      	movcs	r3, #45	; 0x2d
 8004572:	83fb      	strh	r3, [r7, #30]
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	61bb      	str	r3, [r7, #24]
 800457e:	e00d      	b.n	800459c <USBD_CUSTOM_HID_Setup+0x178>
      }
      else
      {
        if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	885b      	ldrh	r3, [r3, #2]
 8004584:	0a1b      	lsrs	r3, r3, #8
 8004586:	b29b      	uxth	r3, r3
 8004588:	2b21      	cmp	r3, #33	; 0x21
 800458a:	d107      	bne.n	800459c <USBD_CUSTOM_HID_Setup+0x178>
        {
          pbuf = USBD_CUSTOM_HID_Desc;
 800458c:	4b24      	ldr	r3, [pc, #144]	; (8004620 <USBD_CUSTOM_HID_Setup+0x1fc>)
 800458e:	61bb      	str	r3, [r7, #24]
          len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	88db      	ldrh	r3, [r3, #6]
 8004594:	2b09      	cmp	r3, #9
 8004596:	bf28      	it	cs
 8004598:	2309      	movcs	r3, #9
 800459a:	83fb      	strh	r3, [r7, #30]
        }
      }

      USBD_CtlSendData (pdev, pbuf, len);
 800459c:	8bfb      	ldrh	r3, [r7, #30]
 800459e:	461a      	mov	r2, r3
 80045a0:	69b9      	ldr	r1, [r7, #24]
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f001 f89c 	bl	80056e0 <USBD_CtlSendData>
      break;
 80045a8:	e02d      	b.n	8004606 <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_GET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80045b0:	2b03      	cmp	r3, #3
 80045b2:	d107      	bne.n	80045c4 <USBD_CUSTOM_HID_Setup+0x1a0>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	330c      	adds	r3, #12
 80045b8:	2201      	movs	r2, #1
 80045ba:	4619      	mov	r1, r3
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f001 f88f 	bl	80056e0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80045c2:	e020      	b.n	8004606 <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 80045c4:	6839      	ldr	r1, [r7, #0]
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f001 f820 	bl	800560c <USBD_CtlError>
			  ret = USBD_FAIL;
 80045cc:	2302      	movs	r3, #2
 80045ce:	75fb      	strb	r3, [r7, #23]
      break;
 80045d0:	e019      	b.n	8004606 <USBD_CUSTOM_HID_Setup+0x1e2>

    case USB_REQ_SET_INTERFACE :
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80045d8:	2b03      	cmp	r3, #3
 80045da:	d106      	bne.n	80045ea <USBD_CUSTOM_HID_Setup+0x1c6>
      {
        hhid->AltSetting = (uint8_t)(req->wValue);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	885b      	ldrh	r3, [r3, #2]
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	461a      	mov	r2, r3
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	60da      	str	r2, [r3, #12]
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80045e8:	e00d      	b.n	8004606 <USBD_CUSTOM_HID_Setup+0x1e2>
        USBD_CtlError (pdev, req);
 80045ea:	6839      	ldr	r1, [r7, #0]
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f001 f80d 	bl	800560c <USBD_CtlError>
			  ret = USBD_FAIL;
 80045f2:	2302      	movs	r3, #2
 80045f4:	75fb      	strb	r3, [r7, #23]
      break;
 80045f6:	e006      	b.n	8004606 <USBD_CUSTOM_HID_Setup+0x1e2>

    default:
      USBD_CtlError (pdev, req);
 80045f8:	6839      	ldr	r1, [r7, #0]
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f001 f806 	bl	800560c <USBD_CtlError>
      ret = USBD_FAIL;
 8004600:	2302      	movs	r3, #2
 8004602:	75fb      	strb	r3, [r7, #23]
      break;
 8004604:	bf00      	nop
    }
    break;
 8004606:	e006      	b.n	8004616 <USBD_CUSTOM_HID_Setup+0x1f2>

  default:
    USBD_CtlError (pdev, req);
 8004608:	6839      	ldr	r1, [r7, #0]
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 fffe 	bl	800560c <USBD_CtlError>
    ret = USBD_FAIL;
 8004610:	2302      	movs	r3, #2
 8004612:	75fb      	strb	r3, [r7, #23]
    break;
 8004614:	bf00      	nop
  }
  return ret;
 8004616:	7dfb      	ldrb	r3, [r7, #23]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3720      	adds	r7, #32
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	200000c8 	.word	0x200000c8

08004624 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport (USBD_HandleTypeDef  *pdev,
                                    uint8_t *report,
                                    uint16_t len)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	4613      	mov	r3, r2
 8004630:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004638:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004640:	2b03      	cmp	r3, #3
 8004642:	d10f      	bne.n	8004664 <USBD_CUSTOM_HID_SendReport+0x40>
  {
    if(hhid->state == CUSTOM_HID_IDLE)
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	7d1b      	ldrb	r3, [r3, #20]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d109      	bne.n	8004660 <USBD_CUSTOM_HID_SendReport+0x3c>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	2201      	movs	r2, #1
 8004650:	751a      	strb	r2, [r3, #20]
      USBD_LL_Transmit (pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8004652:	88fb      	ldrh	r3, [r7, #6]
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	2181      	movs	r1, #129	; 0x81
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f001 fc15 	bl	8005e88 <USBD_LL_Transmit>
 800465e:	e001      	b.n	8004664 <USBD_CUSTOM_HID_SendReport+0x40>
    }
    else
    {
      return USBD_BUSY;
 8004660:	2301      	movs	r3, #1
 8004662:	e000      	b.n	8004666 <USBD_CUSTOM_HID_SendReport+0x42>
    }
  }
  return USBD_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
	...

08004670 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc (uint16_t *length)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_CfgFSDesc);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2229      	movs	r2, #41	; 0x29
 800467c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 800467e:	4b03      	ldr	r3, [pc, #12]	; (800468c <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8004680:	4618      	mov	r0, r3
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	bc80      	pop	{r7}
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	20000044 	.word	0x20000044

08004690 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc (uint16_t *length)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_CfgHSDesc);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2229      	movs	r2, #41	; 0x29
 800469c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 800469e:	4b03      	ldr	r3, [pc, #12]	; (80046ac <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	20000070 	.word	0x20000070

080046b0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc (uint16_t *length)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2229      	movs	r2, #41	; 0x29
 80046bc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 80046be:	4b03      	ldr	r3, [pc, #12]	; (80046cc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bc80      	pop	{r7}
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	2000009c 	.word	0x2000009c

080046d0 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn (USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	460b      	mov	r3, r1
 80046da:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80046e2:	2200      	movs	r2, #0
 80046e4:	751a      	strb	r2, [r3, #20]

  return USBD_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bc80      	pop	{r7}
 80046f0:	4770      	bx	lr

080046f2 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut (USBD_HandleTypeDef *pdev,
                                          uint8_t epnum)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b084      	sub	sp, #16
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
 80046fa:	460b      	mov	r3, r1
 80046fc:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004704:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	7810      	ldrb	r0, [r2, #0]
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	7852      	ldrb	r2, [r2, #1]
 8004716:	4611      	mov	r1, r2
 8004718:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf,
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	2302      	movs	r3, #2
 800471e:	2101      	movs	r1, #1
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f001 fbd4 	bl	8005ece <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800473e:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d10c      	bne.n	8004762 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	7810      	ldrb	r0, [r2, #0]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	7852      	ldrb	r2, [r2, #1]
 8004758:	4611      	mov	r1, r2
 800475a:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	611a      	str	r2, [r3, #16]
  }

  return USBD_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	220a      	movs	r2, #10
 8004778:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800477a:	4b03      	ldr	r3, [pc, #12]	; (8004788 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800477c:	4618      	mov	r0, r3
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	bc80      	pop	{r7}
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	200000d4 	.word	0x200000d4

0800478c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004796:	2302      	movs	r3, #2
 8004798:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d005      	beq.n	80047ac <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 80047a8:	2300      	movs	r3, #0
 80047aa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bc80      	pop	{r7}
 80047b6:	4770      	bx	lr

080047b8 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	4613      	mov	r3, r2
 80047c4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80047cc:	2302      	movs	r3, #2
 80047ce:	e01a      	b.n	8004806 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	79fa      	ldrb	r2, [r7, #7]
 80047fc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f001 fa10 	bl	8005c24 <USBD_LL_Init>

  return USBD_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800480e:	b480      	push	{r7}
 8004810:	b085      	sub	sp, #20
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8004818:	2300      	movs	r3, #0
 800481a:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d006      	beq.n	8004830 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800482a:	2300      	movs	r3, #0
 800482c:	73fb      	strb	r3, [r7, #15]
 800482e:	e001      	b.n	8004834 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004830:	2302      	movs	r3, #2
 8004832:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004834:	7bfb      	ldrb	r3, [r7, #15]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	bc80      	pop	{r7}
 800483e:	4770      	bx	lr

08004840 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f001 fa3b 	bl	8005cc4 <USBD_LL_Start>

  return USBD_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr

0800486c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	460b      	mov	r3, r1
 8004876:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8004878:	2302      	movs	r3, #2
 800487a:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00c      	beq.n	80048a0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	78fa      	ldrb	r2, [r7, #3]
 8004890:	4611      	mov	r1, r2
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	4798      	blx	r3
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800489c:	2300      	movs	r3, #0
 800489e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b082      	sub	sp, #8
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	460b      	mov	r3, r1
 80048b4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	78fa      	ldrb	r2, [r7, #3]
 80048c0:	4611      	mov	r1, r2
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	4798      	blx	r3
  return USBD_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80048e0:	6839      	ldr	r1, [r7, #0]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fe56 	bl	8005594 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 80048f6:	461a      	mov	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8004904:	f003 031f 	and.w	r3, r3, #31
 8004908:	2b01      	cmp	r3, #1
 800490a:	d00c      	beq.n	8004926 <USBD_LL_SetupStage+0x56>
 800490c:	2b01      	cmp	r3, #1
 800490e:	d302      	bcc.n	8004916 <USBD_LL_SetupStage+0x46>
 8004910:	2b02      	cmp	r3, #2
 8004912:	d010      	beq.n	8004936 <USBD_LL_SetupStage+0x66>
 8004914:	e017      	b.n	8004946 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800491c:	4619      	mov	r1, r3
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f9c6 	bl	8004cb0 <USBD_StdDevReq>
    break;
 8004924:	e01a      	b.n	800495c <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800492c:	4619      	mov	r1, r3
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 fa28 	bl	8004d84 <USBD_StdItfReq>
    break;
 8004934:	e012      	b.n	800495c <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800493c:	4619      	mov	r1, r3
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 fa66 	bl	8004e10 <USBD_StdEPReq>
    break;
 8004944:	e00a      	b.n	800495c <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800494c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004950:	b2db      	uxtb	r3, r3
 8004952:	4619      	mov	r1, r3
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f001 fa15 	bl	8005d84 <USBD_LL_StallEP>
    break;
 800495a:	bf00      	nop
  }

  return USBD_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b086      	sub	sp, #24
 800496a:	af00      	add	r7, sp, #0
 800496c:	60f8      	str	r0, [r7, #12]
 800496e:	460b      	mov	r3, r1
 8004970:	607a      	str	r2, [r7, #4]
 8004972:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8004974:	7afb      	ldrb	r3, [r7, #11]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d14b      	bne.n	8004a12 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004980:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8004988:	2b03      	cmp	r3, #3
 800498a:	d134      	bne.n	80049f6 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	68da      	ldr	r2, [r3, #12]
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	429a      	cmp	r2, r3
 8004996:	d919      	bls.n	80049cc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	68da      	ldr	r2, [r3, #12]
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	1ad2      	subs	r2, r2, r3
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	68da      	ldr	r2, [r3, #12]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d203      	bcs.n	80049ba <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	e002      	b.n	80049c0 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 80049be:	b29b      	uxth	r3, r3
 80049c0:	461a      	mov	r2, r3
 80049c2:	6879      	ldr	r1, [r7, #4]
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 fed7 	bl	8005778 <USBD_CtlContinueRx>
 80049ca:	e038      	b.n	8004a3e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00a      	beq.n	80049ee <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80049de:	2b03      	cmp	r3, #3
 80049e0:	d105      	bne.n	80049ee <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 fed4 	bl	800579c <USBD_CtlSendStatus>
 80049f4:	e023      	b.n	8004a3e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80049fc:	2b05      	cmp	r3, #5
 80049fe:	d11e      	bne.n	8004a3e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8004a08:	2100      	movs	r1, #0
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f001 f9ba 	bl	8005d84 <USBD_LL_StallEP>
 8004a10:	e015      	b.n	8004a3e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004a18:	699b      	ldr	r3, [r3, #24]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00d      	beq.n	8004a3a <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8004a24:	2b03      	cmp	r3, #3
 8004a26:	d108      	bne.n	8004a3a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	7afa      	ldrb	r2, [r7, #11]
 8004a32:	4611      	mov	r1, r2
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	4798      	blx	r3
 8004a38:	e001      	b.n	8004a3e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	e000      	b.n	8004a40 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3718      	adds	r7, #24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	460b      	mov	r3, r1
 8004a52:	607a      	str	r2, [r7, #4]
 8004a54:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8004a56:	7afb      	ldrb	r3, [r7, #11]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d17f      	bne.n	8004b5c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	3314      	adds	r3, #20
 8004a60:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d15c      	bne.n	8004b26 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	68da      	ldr	r2, [r3, #12]
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d915      	bls.n	8004aa4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	68da      	ldr	r2, [r3, #12]
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	1ad2      	subs	r2, r2, r3
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	68f8      	ldr	r0, [r7, #12]
 8004a92:	f000 fe41 	bl	8005718 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004a96:	2300      	movs	r3, #0
 8004a98:	2200      	movs	r2, #0
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f001 fa16 	bl	8005ece <USBD_LL_PrepareReceive>
 8004aa2:	e04e      	b.n	8004b42 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	6912      	ldr	r2, [r2, #16]
 8004aac:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ab0:	fb02 f201 	mul.w	r2, r2, r1
 8004ab4:	1a9b      	subs	r3, r3, r2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d11c      	bne.n	8004af4 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	689a      	ldr	r2, [r3, #8]
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d316      	bcc.n	8004af4 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	689a      	ldr	r2, [r3, #8]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d20f      	bcs.n	8004af4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 fe1d 	bl	8005718 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	2200      	movs	r2, #0
 8004aea:	2100      	movs	r1, #0
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f001 f9ee 	bl	8005ece <USBD_LL_PrepareReceive>
 8004af2:	e026      	b.n	8004b42 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00a      	beq.n	8004b16 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004b06:	2b03      	cmp	r3, #3
 8004b08:	d105      	bne.n	8004b16 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8004b16:	2180      	movs	r1, #128	; 0x80
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f001 f933 	bl	8005d84 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f000 fe4f 	bl	80057c2 <USBD_CtlReceiveStatus>
 8004b24:	e00d      	b.n	8004b42 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8004b2c:	2b04      	cmp	r3, #4
 8004b2e:	d004      	beq.n	8004b3a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d103      	bne.n	8004b42 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004b3a:	2180      	movs	r1, #128	; 0x80
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f001 f921 	bl	8005d84 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d11d      	bne.n	8004b88 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f7ff fe83 	bl	8004858 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8004b5a:	e015      	b.n	8004b88 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00d      	beq.n	8004b84 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8004b6e:	2b03      	cmp	r3, #3
 8004b70:	d108      	bne.n	8004b84 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	7afa      	ldrb	r2, [r7, #11]
 8004b7c:	4611      	mov	r1, r2
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	4798      	blx	r3
 8004b82:	e001      	b.n	8004b88 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004b84:	2302      	movs	r3, #2
 8004b86:	e000      	b.n	8004b8a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3718      	adds	r7, #24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b082      	sub	sp, #8
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004b9a:	2340      	movs	r3, #64	; 0x40
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f001 f8aa 	bl	8005cfa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2240      	movs	r2, #64	; 0x40
 8004bb2:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004bb6:	2340      	movs	r3, #64	; 0x40
 8004bb8:	2200      	movs	r2, #0
 8004bba:	2180      	movs	r1, #128	; 0x80
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f001 f89c 	bl	8005cfa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2240      	movs	r2, #64	; 0x40
 8004bcc:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d009      	beq.n	8004c0a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6852      	ldr	r2, [r2, #4]
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	4611      	mov	r1, r2
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	4798      	blx	r3
  }

  return USBD_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3708      	adds	r7, #8
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	78fa      	ldrb	r2, [r7, #3]
 8004c24:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bc80      	pop	{r7}
 8004c30:	4770      	bx	lr

08004c32 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b083      	sub	sp, #12
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2204      	movs	r2, #4
 8004c4a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bc80      	pop	{r7}
 8004c58:	4770      	bx	lr

08004c5a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bc80      	pop	{r7}
 8004c78:	4770      	bx	lr

08004c7a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b082      	sub	sp, #8
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004c88:	2b03      	cmp	r3, #3
 8004c8a:	d10b      	bne.n	8004ca4 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004c92:	69db      	ldr	r3, [r3, #28]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d005      	beq.n	8004ca4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004c9e:	69db      	ldr	r3, [r3, #28]
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3708      	adds	r7, #8
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
	...

08004cb0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004cc6:	2b20      	cmp	r3, #32
 8004cc8:	d004      	beq.n	8004cd4 <USBD_StdDevReq+0x24>
 8004cca:	2b40      	cmp	r3, #64	; 0x40
 8004ccc:	d002      	beq.n	8004cd4 <USBD_StdDevReq+0x24>
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d008      	beq.n	8004ce4 <USBD_StdDevReq+0x34>
 8004cd2:	e04c      	b.n	8004d6e <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	6839      	ldr	r1, [r7, #0]
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	4798      	blx	r3
    break;
 8004ce2:	e049      	b.n	8004d78 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	785b      	ldrb	r3, [r3, #1]
 8004ce8:	2b09      	cmp	r3, #9
 8004cea:	d83a      	bhi.n	8004d62 <USBD_StdDevReq+0xb2>
 8004cec:	a201      	add	r2, pc, #4	; (adr r2, 8004cf4 <USBD_StdDevReq+0x44>)
 8004cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf2:	bf00      	nop
 8004cf4:	08004d45 	.word	0x08004d45
 8004cf8:	08004d59 	.word	0x08004d59
 8004cfc:	08004d63 	.word	0x08004d63
 8004d00:	08004d4f 	.word	0x08004d4f
 8004d04:	08004d63 	.word	0x08004d63
 8004d08:	08004d27 	.word	0x08004d27
 8004d0c:	08004d1d 	.word	0x08004d1d
 8004d10:	08004d63 	.word	0x08004d63
 8004d14:	08004d3b 	.word	0x08004d3b
 8004d18:	08004d31 	.word	0x08004d31
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8004d1c:	6839      	ldr	r1, [r7, #0]
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f9d2 	bl	80050c8 <USBD_GetDescriptor>
      break;
 8004d24:	e022      	b.n	8004d6c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8004d26:	6839      	ldr	r1, [r7, #0]
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 fac7 	bl	80052bc <USBD_SetAddress>
      break;
 8004d2e:	e01d      	b.n	8004d6c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8004d30:	6839      	ldr	r1, [r7, #0]
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 fb04 	bl	8005340 <USBD_SetConfig>
      break;
 8004d38:	e018      	b.n	8004d6c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8004d3a:	6839      	ldr	r1, [r7, #0]
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 fb8d 	bl	800545c <USBD_GetConfig>
      break;
 8004d42:	e013      	b.n	8004d6c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8004d44:	6839      	ldr	r1, [r7, #0]
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 fbbc 	bl	80054c4 <USBD_GetStatus>
      break;
 8004d4c:	e00e      	b.n	8004d6c <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8004d4e:	6839      	ldr	r1, [r7, #0]
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 fbea 	bl	800552a <USBD_SetFeature>
      break;
 8004d56:	e009      	b.n	8004d6c <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8004d58:	6839      	ldr	r1, [r7, #0]
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 fbf9 	bl	8005552 <USBD_ClrFeature>
      break;
 8004d60:	e004      	b.n	8004d6c <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8004d62:	6839      	ldr	r1, [r7, #0]
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 fc51 	bl	800560c <USBD_CtlError>
      break;
 8004d6a:	bf00      	nop
    }
    break;
 8004d6c:	e004      	b.n	8004d78 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8004d6e:	6839      	ldr	r1, [r7, #0]
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 fc4b 	bl	800560c <USBD_CtlError>
    break;
 8004d76:	bf00      	nop
  }

  return ret;
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop

08004d84 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d9a:	2b20      	cmp	r3, #32
 8004d9c:	d003      	beq.n	8004da6 <USBD_StdItfReq+0x22>
 8004d9e:	2b40      	cmp	r3, #64	; 0x40
 8004da0:	d001      	beq.n	8004da6 <USBD_StdItfReq+0x22>
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d12a      	bne.n	8004dfc <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004dac:	3b01      	subs	r3, #1
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d81d      	bhi.n	8004dee <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	889b      	ldrh	r3, [r3, #4]
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d813      	bhi.n	8004de4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	6839      	ldr	r1, [r7, #0]
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	4798      	blx	r3
 8004dca:	4603      	mov	r3, r0
 8004dcc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	88db      	ldrh	r3, [r3, #6]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d110      	bne.n	8004df8 <USBD_StdItfReq+0x74>
 8004dd6:	7bfb      	ldrb	r3, [r7, #15]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10d      	bne.n	8004df8 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 fcdd 	bl	800579c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8004de2:	e009      	b.n	8004df8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8004de4:	6839      	ldr	r1, [r7, #0]
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 fc10 	bl	800560c <USBD_CtlError>
      break;
 8004dec:	e004      	b.n	8004df8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8004dee:	6839      	ldr	r1, [r7, #0]
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 fc0b 	bl	800560c <USBD_CtlError>
      break;
 8004df6:	e000      	b.n	8004dfa <USBD_StdItfReq+0x76>
      break;
 8004df8:	bf00      	nop
    }
    break;
 8004dfa:	e004      	b.n	8004e06 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8004dfc:	6839      	ldr	r1, [r7, #0]
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 fc04 	bl	800560c <USBD_CtlError>
    break;
 8004e04:	bf00      	nop
  }

  return USBD_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	889b      	ldrh	r3, [r3, #4]
 8004e22:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e2c:	2b20      	cmp	r3, #32
 8004e2e:	d004      	beq.n	8004e3a <USBD_StdEPReq+0x2a>
 8004e30:	2b40      	cmp	r3, #64	; 0x40
 8004e32:	d002      	beq.n	8004e3a <USBD_StdEPReq+0x2a>
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d008      	beq.n	8004e4a <USBD_StdEPReq+0x3a>
 8004e38:	e13b      	b.n	80050b2 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	6839      	ldr	r1, [r7, #0]
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	4798      	blx	r3
    break;
 8004e48:	e138      	b.n	80050bc <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e52:	2b20      	cmp	r3, #32
 8004e54:	d10a      	bne.n	8004e6c <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	6839      	ldr	r1, [r7, #0]
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	4798      	blx	r3
 8004e64:	4603      	mov	r3, r0
 8004e66:	73fb      	strb	r3, [r7, #15]

      return ret;
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
 8004e6a:	e128      	b.n	80050be <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	785b      	ldrb	r3, [r3, #1]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d03e      	beq.n	8004ef2 <USBD_StdEPReq+0xe2>
 8004e74:	2b03      	cmp	r3, #3
 8004e76:	d002      	beq.n	8004e7e <USBD_StdEPReq+0x6e>
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d070      	beq.n	8004f5e <USBD_StdEPReq+0x14e>
 8004e7c:	e113      	b.n	80050a6 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d002      	beq.n	8004e8e <USBD_StdEPReq+0x7e>
 8004e88:	2b03      	cmp	r3, #3
 8004e8a:	d015      	beq.n	8004eb8 <USBD_StdEPReq+0xa8>
 8004e8c:	e02b      	b.n	8004ee6 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004e8e:	7bbb      	ldrb	r3, [r7, #14]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00c      	beq.n	8004eae <USBD_StdEPReq+0x9e>
 8004e94:	7bbb      	ldrb	r3, [r7, #14]
 8004e96:	2b80      	cmp	r3, #128	; 0x80
 8004e98:	d009      	beq.n	8004eae <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8004e9a:	7bbb      	ldrb	r3, [r7, #14]
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 ff70 	bl	8005d84 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8004ea4:	2180      	movs	r1, #128	; 0x80
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 ff6c 	bl	8005d84 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004eac:	e020      	b.n	8004ef0 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8004eae:	6839      	ldr	r1, [r7, #0]
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 fbab 	bl	800560c <USBD_CtlError>
        break;
 8004eb6:	e01b      	b.n	8004ef0 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	885b      	ldrh	r3, [r3, #2]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10e      	bne.n	8004ede <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004ec0:	7bbb      	ldrb	r3, [r7, #14]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00b      	beq.n	8004ede <USBD_StdEPReq+0xce>
 8004ec6:	7bbb      	ldrb	r3, [r7, #14]
 8004ec8:	2b80      	cmp	r3, #128	; 0x80
 8004eca:	d008      	beq.n	8004ede <USBD_StdEPReq+0xce>
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	88db      	ldrh	r3, [r3, #6]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d104      	bne.n	8004ede <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8004ed4:	7bbb      	ldrb	r3, [r7, #14]
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 ff53 	bl	8005d84 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 fc5c 	bl	800579c <USBD_CtlSendStatus>

        break;
 8004ee4:	e004      	b.n	8004ef0 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8004ee6:	6839      	ldr	r1, [r7, #0]
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 fb8f 	bl	800560c <USBD_CtlError>
        break;
 8004eee:	bf00      	nop
      }
      break;
 8004ef0:	e0de      	b.n	80050b0 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d002      	beq.n	8004f02 <USBD_StdEPReq+0xf2>
 8004efc:	2b03      	cmp	r3, #3
 8004efe:	d015      	beq.n	8004f2c <USBD_StdEPReq+0x11c>
 8004f00:	e026      	b.n	8004f50 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004f02:	7bbb      	ldrb	r3, [r7, #14]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00c      	beq.n	8004f22 <USBD_StdEPReq+0x112>
 8004f08:	7bbb      	ldrb	r3, [r7, #14]
 8004f0a:	2b80      	cmp	r3, #128	; 0x80
 8004f0c:	d009      	beq.n	8004f22 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8004f0e:	7bbb      	ldrb	r3, [r7, #14]
 8004f10:	4619      	mov	r1, r3
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 ff36 	bl	8005d84 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8004f18:	2180      	movs	r1, #128	; 0x80
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 ff32 	bl	8005d84 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004f20:	e01c      	b.n	8004f5c <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8004f22:	6839      	ldr	r1, [r7, #0]
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 fb71 	bl	800560c <USBD_CtlError>
        break;
 8004f2a:	e017      	b.n	8004f5c <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	885b      	ldrh	r3, [r3, #2]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d112      	bne.n	8004f5a <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8004f34:	7bbb      	ldrb	r3, [r7, #14]
 8004f36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d004      	beq.n	8004f48 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8004f3e:	7bbb      	ldrb	r3, [r7, #14]
 8004f40:	4619      	mov	r1, r3
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 ff3d 	bl	8005dc2 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 fc27 	bl	800579c <USBD_CtlSendStatus>
        }
        break;
 8004f4e:	e004      	b.n	8004f5a <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8004f50:	6839      	ldr	r1, [r7, #0]
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 fb5a 	bl	800560c <USBD_CtlError>
        break;
 8004f58:	e000      	b.n	8004f5c <USBD_StdEPReq+0x14c>
        break;
 8004f5a:	bf00      	nop
      }
      break;
 8004f5c:	e0a8      	b.n	80050b0 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d002      	beq.n	8004f6e <USBD_StdEPReq+0x15e>
 8004f68:	2b03      	cmp	r3, #3
 8004f6a:	d031      	beq.n	8004fd0 <USBD_StdEPReq+0x1c0>
 8004f6c:	e095      	b.n	800509a <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004f6e:	7bbb      	ldrb	r3, [r7, #14]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d007      	beq.n	8004f84 <USBD_StdEPReq+0x174>
 8004f74:	7bbb      	ldrb	r3, [r7, #14]
 8004f76:	2b80      	cmp	r3, #128	; 0x80
 8004f78:	d004      	beq.n	8004f84 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8004f7a:	6839      	ldr	r1, [r7, #0]
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 fb45 	bl	800560c <USBD_CtlError>
          break;
 8004f82:	e08f      	b.n	80050a4 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004f84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	da0b      	bge.n	8004fa4 <USBD_StdEPReq+0x194>
 8004f8c:	7bbb      	ldrb	r3, [r7, #14]
 8004f8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f92:	4613      	mov	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	3310      	adds	r3, #16
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	3304      	adds	r3, #4
 8004fa2:	e00a      	b.n	8004fba <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8004fa4:	7bbb      	ldrb	r3, [r7, #14]
 8004fa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8004faa:	4613      	mov	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	4413      	add	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	4413      	add	r3, r2
 8004fba:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	2202      	movs	r2, #2
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 fb89 	bl	80056e0 <USBD_CtlSendData>
          break;
 8004fce:	e069      	b.n	80050a4 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8004fd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	da11      	bge.n	8004ffc <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004fd8:	7bbb      	ldrb	r3, [r7, #14]
 8004fda:	f003 020f 	and.w	r2, r3, #15
 8004fde:	6879      	ldr	r1, [r7, #4]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	440b      	add	r3, r1
 8004fea:	3318      	adds	r3, #24
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d117      	bne.n	8005022 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8004ff2:	6839      	ldr	r1, [r7, #0]
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 fb09 	bl	800560c <USBD_CtlError>
            break;
 8004ffa:	e053      	b.n	80050a4 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004ffc:	7bbb      	ldrb	r3, [r7, #14]
 8004ffe:	f003 020f 	and.w	r2, r3, #15
 8005002:	6879      	ldr	r1, [r7, #4]
 8005004:	4613      	mov	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	440b      	add	r3, r1
 800500e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d104      	bne.n	8005022 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8005018:	6839      	ldr	r1, [r7, #0]
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 faf6 	bl	800560c <USBD_CtlError>
            break;
 8005020:	e040      	b.n	80050a4 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005022:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005026:	2b00      	cmp	r3, #0
 8005028:	da0b      	bge.n	8005042 <USBD_StdEPReq+0x232>
 800502a:	7bbb      	ldrb	r3, [r7, #14]
 800502c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005030:	4613      	mov	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	3310      	adds	r3, #16
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	4413      	add	r3, r2
 800503e:	3304      	adds	r3, #4
 8005040:	e00a      	b.n	8005058 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8005042:	7bbb      	ldrb	r3, [r7, #14]
 8005044:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	4413      	add	r3, r2
 8005058:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800505a:	7bbb      	ldrb	r3, [r7, #14]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d002      	beq.n	8005066 <USBD_StdEPReq+0x256>
 8005060:	7bbb      	ldrb	r3, [r7, #14]
 8005062:	2b80      	cmp	r3, #128	; 0x80
 8005064:	d103      	bne.n	800506e <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	2200      	movs	r2, #0
 800506a:	601a      	str	r2, [r3, #0]
 800506c:	e00e      	b.n	800508c <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800506e:	7bbb      	ldrb	r3, [r7, #14]
 8005070:	4619      	mov	r1, r3
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 fec4 	bl	8005e00 <USBD_LL_IsStallEP>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	2201      	movs	r2, #1
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	e002      	b.n	800508c <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	2200      	movs	r2, #0
 800508a:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2202      	movs	r2, #2
 8005090:	4619      	mov	r1, r3
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 fb24 	bl	80056e0 <USBD_CtlSendData>
          break;
 8005098:	e004      	b.n	80050a4 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800509a:	6839      	ldr	r1, [r7, #0]
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 fab5 	bl	800560c <USBD_CtlError>
        break;
 80050a2:	bf00      	nop
      }
      break;
 80050a4:	e004      	b.n	80050b0 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 80050a6:	6839      	ldr	r1, [r7, #0]
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 faaf 	bl	800560c <USBD_CtlError>
      break;
 80050ae:	bf00      	nop
    }
    break;
 80050b0:	e004      	b.n	80050bc <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 80050b2:	6839      	ldr	r1, [r7, #0]
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 faa9 	bl	800560c <USBD_CtlError>
    break;
 80050ba:	bf00      	nop
  }

  return ret;
 80050bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
	...

080050c8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	885b      	ldrh	r3, [r3, #2]
 80050d6:	0a1b      	lsrs	r3, r3, #8
 80050d8:	b29b      	uxth	r3, r3
 80050da:	3b01      	subs	r3, #1
 80050dc:	2b06      	cmp	r3, #6
 80050de:	f200 80c9 	bhi.w	8005274 <USBD_GetDescriptor+0x1ac>
 80050e2:	a201      	add	r2, pc, #4	; (adr r2, 80050e8 <USBD_GetDescriptor+0x20>)
 80050e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e8:	08005105 	.word	0x08005105
 80050ec:	0800511d 	.word	0x0800511d
 80050f0:	0800515d 	.word	0x0800515d
 80050f4:	08005275 	.word	0x08005275
 80050f8:	08005275 	.word	0x08005275
 80050fc:	08005221 	.word	0x08005221
 8005100:	08005247 	.word	0x08005247
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	7c12      	ldrb	r2, [r2, #16]
 8005110:	f107 010a 	add.w	r1, r7, #10
 8005114:	4610      	mov	r0, r2
 8005116:	4798      	blx	r3
 8005118:	60f8      	str	r0, [r7, #12]
    break;
 800511a:	e0b0      	b.n	800527e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	7c1b      	ldrb	r3, [r3, #16]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10d      	bne.n	8005140 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800512a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800512c:	f107 020a 	add.w	r2, r7, #10
 8005130:	4610      	mov	r0, r2
 8005132:	4798      	blx	r3
 8005134:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	3301      	adds	r3, #1
 800513a:	2202      	movs	r2, #2
 800513c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800513e:	e09e      	b.n	800527e <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005148:	f107 020a 	add.w	r2, r7, #10
 800514c:	4610      	mov	r0, r2
 800514e:	4798      	blx	r3
 8005150:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	3301      	adds	r3, #1
 8005156:	2202      	movs	r2, #2
 8005158:	701a      	strb	r2, [r3, #0]
    break;
 800515a:	e090      	b.n	800527e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	885b      	ldrh	r3, [r3, #2]
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b05      	cmp	r3, #5
 8005164:	d856      	bhi.n	8005214 <USBD_GetDescriptor+0x14c>
 8005166:	a201      	add	r2, pc, #4	; (adr r2, 800516c <USBD_GetDescriptor+0xa4>)
 8005168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516c:	08005185 	.word	0x08005185
 8005170:	0800519d 	.word	0x0800519d
 8005174:	080051b5 	.word	0x080051b5
 8005178:	080051cd 	.word	0x080051cd
 800517c:	080051e5 	.word	0x080051e5
 8005180:	080051fd 	.word	0x080051fd
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	7c12      	ldrb	r2, [r2, #16]
 8005190:	f107 010a 	add.w	r1, r7, #10
 8005194:	4610      	mov	r0, r2
 8005196:	4798      	blx	r3
 8005198:	60f8      	str	r0, [r7, #12]
      break;
 800519a:	e040      	b.n	800521e <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	7c12      	ldrb	r2, [r2, #16]
 80051a8:	f107 010a 	add.w	r1, r7, #10
 80051ac:	4610      	mov	r0, r2
 80051ae:	4798      	blx	r3
 80051b0:	60f8      	str	r0, [r7, #12]
      break;
 80051b2:	e034      	b.n	800521e <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	7c12      	ldrb	r2, [r2, #16]
 80051c0:	f107 010a 	add.w	r1, r7, #10
 80051c4:	4610      	mov	r0, r2
 80051c6:	4798      	blx	r3
 80051c8:	60f8      	str	r0, [r7, #12]
      break;
 80051ca:	e028      	b.n	800521e <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	7c12      	ldrb	r2, [r2, #16]
 80051d8:	f107 010a 	add.w	r1, r7, #10
 80051dc:	4610      	mov	r0, r2
 80051de:	4798      	blx	r3
 80051e0:	60f8      	str	r0, [r7, #12]
      break;
 80051e2:	e01c      	b.n	800521e <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	7c12      	ldrb	r2, [r2, #16]
 80051f0:	f107 010a 	add.w	r1, r7, #10
 80051f4:	4610      	mov	r0, r2
 80051f6:	4798      	blx	r3
 80051f8:	60f8      	str	r0, [r7, #12]
      break;
 80051fa:	e010      	b.n	800521e <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	7c12      	ldrb	r2, [r2, #16]
 8005208:	f107 010a 	add.w	r1, r7, #10
 800520c:	4610      	mov	r0, r2
 800520e:	4798      	blx	r3
 8005210:	60f8      	str	r0, [r7, #12]
      break;
 8005212:	e004      	b.n	800521e <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8005214:	6839      	ldr	r1, [r7, #0]
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f9f8 	bl	800560c <USBD_CtlError>
      return;
 800521c:	e04b      	b.n	80052b6 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800521e:	e02e      	b.n	800527e <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	7c1b      	ldrb	r3, [r3, #16]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d109      	bne.n	800523c <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800522e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005230:	f107 020a 	add.w	r2, r7, #10
 8005234:	4610      	mov	r0, r2
 8005236:	4798      	blx	r3
 8005238:	60f8      	str	r0, [r7, #12]
      break;
 800523a:	e020      	b.n	800527e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800523c:	6839      	ldr	r1, [r7, #0]
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f9e4 	bl	800560c <USBD_CtlError>
      return;
 8005244:	e037      	b.n	80052b6 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	7c1b      	ldrb	r3, [r3, #16]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10d      	bne.n	800526a <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005256:	f107 020a 	add.w	r2, r7, #10
 800525a:	4610      	mov	r0, r2
 800525c:	4798      	blx	r3
 800525e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	3301      	adds	r3, #1
 8005264:	2207      	movs	r2, #7
 8005266:	701a      	strb	r2, [r3, #0]
      break;
 8005268:	e009      	b.n	800527e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800526a:	6839      	ldr	r1, [r7, #0]
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 f9cd 	bl	800560c <USBD_CtlError>
      return;
 8005272:	e020      	b.n	80052b6 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8005274:	6839      	ldr	r1, [r7, #0]
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f9c8 	bl	800560c <USBD_CtlError>
    return;
 800527c:	e01b      	b.n	80052b6 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800527e:	897b      	ldrh	r3, [r7, #10]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d011      	beq.n	80052a8 <USBD_GetDescriptor+0x1e0>
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	88db      	ldrh	r3, [r3, #6]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00d      	beq.n	80052a8 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	88da      	ldrh	r2, [r3, #6]
 8005290:	897b      	ldrh	r3, [r7, #10]
 8005292:	4293      	cmp	r3, r2
 8005294:	bf28      	it	cs
 8005296:	4613      	movcs	r3, r2
 8005298:	b29b      	uxth	r3, r3
 800529a:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800529c:	897b      	ldrh	r3, [r7, #10]
 800529e:	461a      	mov	r2, r3
 80052a0:	68f9      	ldr	r1, [r7, #12]
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 fa1c 	bl	80056e0 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	88db      	ldrh	r3, [r3, #6]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d102      	bne.n	80052b6 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 fa73 	bl	800579c <USBD_CtlSendStatus>
  }
}
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	889b      	ldrh	r3, [r3, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d130      	bne.n	8005330 <USBD_SetAddress+0x74>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	88db      	ldrh	r3, [r3, #6]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d12c      	bne.n	8005330 <USBD_SetAddress+0x74>
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	885b      	ldrh	r3, [r3, #2]
 80052da:	2b7f      	cmp	r3, #127	; 0x7f
 80052dc:	d828      	bhi.n	8005330 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	885b      	ldrh	r3, [r3, #2]
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80052f0:	2b03      	cmp	r3, #3
 80052f2:	d104      	bne.n	80052fe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 80052f4:	6839      	ldr	r1, [r7, #0]
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f988 	bl	800560c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052fc:	e01c      	b.n	8005338 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	7bfa      	ldrb	r2, [r7, #15]
 8005302:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005306:	7bfb      	ldrb	r3, [r7, #15]
 8005308:	4619      	mov	r1, r3
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fd9d 	bl	8005e4a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 fa43 	bl	800579c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005316:	7bfb      	ldrb	r3, [r7, #15]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d004      	beq.n	8005326 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2202      	movs	r2, #2
 8005320:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005324:	e008      	b.n	8005338 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800532e:	e003      	b.n	8005338 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005330:	6839      	ldr	r1, [r7, #0]
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f96a 	bl	800560c <USBD_CtlError>
  }
}
 8005338:	bf00      	nop
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	885b      	ldrh	r3, [r3, #2]
 800534e:	b2da      	uxtb	r2, r3
 8005350:	4b41      	ldr	r3, [pc, #260]	; (8005458 <USBD_SetConfig+0x118>)
 8005352:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005354:	4b40      	ldr	r3, [pc, #256]	; (8005458 <USBD_SetConfig+0x118>)
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d904      	bls.n	8005366 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800535c:	6839      	ldr	r1, [r7, #0]
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f954 	bl	800560c <USBD_CtlError>
 8005364:	e075      	b.n	8005452 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800536c:	2b02      	cmp	r3, #2
 800536e:	d002      	beq.n	8005376 <USBD_SetConfig+0x36>
 8005370:	2b03      	cmp	r3, #3
 8005372:	d023      	beq.n	80053bc <USBD_SetConfig+0x7c>
 8005374:	e062      	b.n	800543c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8005376:	4b38      	ldr	r3, [pc, #224]	; (8005458 <USBD_SetConfig+0x118>)
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d01a      	beq.n	80053b4 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800537e:	4b36      	ldr	r3, [pc, #216]	; (8005458 <USBD_SetConfig+0x118>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	461a      	mov	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2203      	movs	r2, #3
 800538c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005390:	4b31      	ldr	r3, [pc, #196]	; (8005458 <USBD_SetConfig+0x118>)
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	4619      	mov	r1, r3
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7ff fa68 	bl	800486c <USBD_SetClassConfig>
 800539c:	4603      	mov	r3, r0
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d104      	bne.n	80053ac <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80053a2:	6839      	ldr	r1, [r7, #0]
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 f931 	bl	800560c <USBD_CtlError>
          return;
 80053aa:	e052      	b.n	8005452 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f9f5 	bl	800579c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80053b2:	e04e      	b.n	8005452 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f9f1 	bl	800579c <USBD_CtlSendStatus>
      break;
 80053ba:	e04a      	b.n	8005452 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80053bc:	4b26      	ldr	r3, [pc, #152]	; (8005458 <USBD_SetConfig+0x118>)
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d112      	bne.n	80053ea <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2202      	movs	r2, #2
 80053c8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80053cc:	4b22      	ldr	r3, [pc, #136]	; (8005458 <USBD_SetConfig+0x118>)
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	461a      	mov	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80053d6:	4b20      	ldr	r3, [pc, #128]	; (8005458 <USBD_SetConfig+0x118>)
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	4619      	mov	r1, r3
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f7ff fa64 	bl	80048aa <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f9da 	bl	800579c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80053e8:	e033      	b.n	8005452 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 80053ea:	4b1b      	ldr	r3, [pc, #108]	; (8005458 <USBD_SetConfig+0x118>)
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	461a      	mov	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d01d      	beq.n	8005434 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	4619      	mov	r1, r3
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f7ff fa52 	bl	80048aa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005406:	4b14      	ldr	r3, [pc, #80]	; (8005458 <USBD_SetConfig+0x118>)
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	461a      	mov	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005410:	4b11      	ldr	r3, [pc, #68]	; (8005458 <USBD_SetConfig+0x118>)
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	4619      	mov	r1, r3
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7ff fa28 	bl	800486c <USBD_SetClassConfig>
 800541c:	4603      	mov	r3, r0
 800541e:	2b02      	cmp	r3, #2
 8005420:	d104      	bne.n	800542c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8005422:	6839      	ldr	r1, [r7, #0]
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 f8f1 	bl	800560c <USBD_CtlError>
          return;
 800542a:	e012      	b.n	8005452 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f9b5 	bl	800579c <USBD_CtlSendStatus>
      break;
 8005432:	e00e      	b.n	8005452 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f9b1 	bl	800579c <USBD_CtlSendStatus>
      break;
 800543a:	e00a      	b.n	8005452 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800543c:	6839      	ldr	r1, [r7, #0]
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f8e4 	bl	800560c <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8005444:	4b04      	ldr	r3, [pc, #16]	; (8005458 <USBD_SetConfig+0x118>)
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	4619      	mov	r1, r3
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7ff fa2d 	bl	80048aa <USBD_ClrClassConfig>
      break;
 8005450:	bf00      	nop
    }
  }
}
 8005452:	3708      	adds	r7, #8
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	20000360 	.word	0x20000360

0800545c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	88db      	ldrh	r3, [r3, #6]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d004      	beq.n	8005478 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800546e:	6839      	ldr	r1, [r7, #0]
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f8cb 	bl	800560c <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8005476:	e021      	b.n	80054bc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800547e:	2b01      	cmp	r3, #1
 8005480:	db17      	blt.n	80054b2 <USBD_GetConfig+0x56>
 8005482:	2b02      	cmp	r3, #2
 8005484:	dd02      	ble.n	800548c <USBD_GetConfig+0x30>
 8005486:	2b03      	cmp	r3, #3
 8005488:	d00b      	beq.n	80054a2 <USBD_GetConfig+0x46>
 800548a:	e012      	b.n	80054b2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	3308      	adds	r3, #8
 8005496:	2201      	movs	r2, #1
 8005498:	4619      	mov	r1, r3
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f920 	bl	80056e0 <USBD_CtlSendData>
      break;
 80054a0:	e00c      	b.n	80054bc <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	3304      	adds	r3, #4
 80054a6:	2201      	movs	r2, #1
 80054a8:	4619      	mov	r1, r3
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f918 	bl	80056e0 <USBD_CtlSendData>
      break;
 80054b0:	e004      	b.n	80054bc <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 80054b2:	6839      	ldr	r1, [r7, #0]
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 f8a9 	bl	800560c <USBD_CtlError>
      break;
 80054ba:	bf00      	nop
}
 80054bc:	bf00      	nop
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80054d4:	3b01      	subs	r3, #1
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d81e      	bhi.n	8005518 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	88db      	ldrh	r3, [r3, #6]
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d004      	beq.n	80054ec <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80054e2:	6839      	ldr	r1, [r7, #0]
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 f891 	bl	800560c <USBD_CtlError>
      break;
 80054ea:	e01a      	b.n	8005522 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d005      	beq.n	8005508 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	f043 0202 	orr.w	r2, r3, #2
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	330c      	adds	r3, #12
 800550c:	2202      	movs	r2, #2
 800550e:	4619      	mov	r1, r3
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 f8e5 	bl	80056e0 <USBD_CtlSendData>
    break;
 8005516:	e004      	b.n	8005522 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8005518:	6839      	ldr	r1, [r7, #0]
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f876 	bl	800560c <USBD_CtlError>
    break;
 8005520:	bf00      	nop
  }
}
 8005522:	bf00      	nop
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b082      	sub	sp, #8
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
 8005532:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	885b      	ldrh	r3, [r3, #2]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d106      	bne.n	800554a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f929 	bl	800579c <USBD_CtlSendStatus>
  }

}
 800554a:	bf00      	nop
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b082      	sub	sp, #8
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
 800555a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005562:	3b01      	subs	r3, #1
 8005564:	2b02      	cmp	r3, #2
 8005566:	d80b      	bhi.n	8005580 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	885b      	ldrh	r3, [r3, #2]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d10c      	bne.n	800558a <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 f90f 	bl	800579c <USBD_CtlSendStatus>
    }
    break;
 800557e:	e004      	b.n	800558a <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8005580:	6839      	ldr	r1, [r7, #0]
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f842 	bl	800560c <USBD_CtlError>
    break;
 8005588:	e000      	b.n	800558c <USBD_ClrFeature+0x3a>
    break;
 800558a:	bf00      	nop
  }
}
 800558c:	bf00      	nop
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	781a      	ldrb	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	785a      	ldrb	r2, [r3, #1]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	3302      	adds	r3, #2
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	b29a      	uxth	r2, r3
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	3303      	adds	r3, #3
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	b29b      	uxth	r3, r3
 80055be:	021b      	lsls	r3, r3, #8
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	4413      	add	r3, r2
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	3304      	adds	r3, #4
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	3305      	adds	r3, #5
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	b29b      	uxth	r3, r3
 80055da:	021b      	lsls	r3, r3, #8
 80055dc:	b29b      	uxth	r3, r3
 80055de:	4413      	add	r3, r2
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	3306      	adds	r3, #6
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	3307      	adds	r3, #7
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	021b      	lsls	r3, r3, #8
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	4413      	add	r3, r2
 80055fc:	b29a      	uxth	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	80da      	strh	r2, [r3, #6]

}
 8005602:	bf00      	nop
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	bc80      	pop	{r7}
 800560a:	4770      	bx	lr

0800560c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8005616:	2180      	movs	r1, #128	; 0x80
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 fbb3 	bl	8005d84 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800561e:	2100      	movs	r1, #0
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 fbaf 	bl	8005d84 <USBD_LL_StallEP>
}
 8005626:	bf00      	nop
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b086      	sub	sp, #24
 8005632:	af00      	add	r7, sp, #0
 8005634:	60f8      	str	r0, [r7, #12]
 8005636:	60b9      	str	r1, [r7, #8]
 8005638:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800563a:	2300      	movs	r3, #0
 800563c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d032      	beq.n	80056aa <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 f834 	bl	80056b2 <USBD_GetLen>
 800564a:	4603      	mov	r3, r0
 800564c:	3301      	adds	r3, #1
 800564e:	b29b      	uxth	r3, r3
 8005650:	005b      	lsls	r3, r3, #1
 8005652:	b29a      	uxth	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005658:	7dfb      	ldrb	r3, [r7, #23]
 800565a:	1c5a      	adds	r2, r3, #1
 800565c:	75fa      	strb	r2, [r7, #23]
 800565e:	461a      	mov	r2, r3
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	4413      	add	r3, r2
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	7812      	ldrb	r2, [r2, #0]
 8005668:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800566a:	7dfb      	ldrb	r3, [r7, #23]
 800566c:	1c5a      	adds	r2, r3, #1
 800566e:	75fa      	strb	r2, [r7, #23]
 8005670:	461a      	mov	r2, r3
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	4413      	add	r3, r2
 8005676:	2203      	movs	r2, #3
 8005678:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800567a:	e012      	b.n	80056a2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	1c5a      	adds	r2, r3, #1
 8005680:	60fa      	str	r2, [r7, #12]
 8005682:	7dfa      	ldrb	r2, [r7, #23]
 8005684:	1c51      	adds	r1, r2, #1
 8005686:	75f9      	strb	r1, [r7, #23]
 8005688:	4611      	mov	r1, r2
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	440a      	add	r2, r1
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8005692:	7dfb      	ldrb	r3, [r7, #23]
 8005694:	1c5a      	adds	r2, r3, #1
 8005696:	75fa      	strb	r2, [r7, #23]
 8005698:	461a      	mov	r2, r3
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	4413      	add	r3, r2
 800569e:	2200      	movs	r2, #0
 80056a0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1e8      	bne.n	800567c <USBD_GetString+0x4e>
    }
  }
}
 80056aa:	bf00      	nop
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b085      	sub	sp, #20
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80056ba:	2300      	movs	r3, #0
 80056bc:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80056be:	e005      	b.n	80056cc <USBD_GetLen+0x1a>
    {
        len++;
 80056c0:	7bfb      	ldrb	r3, [r7, #15]
 80056c2:	3301      	adds	r3, #1
 80056c4:	73fb      	strb	r3, [r7, #15]
        buf++;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	3301      	adds	r3, #1
 80056ca:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1f5      	bne.n	80056c0 <USBD_GetLen+0xe>
    }

    return len;
 80056d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	bc80      	pop	{r7}
 80056de:	4770      	bx	lr

080056e0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	4613      	mov	r3, r2
 80056ec:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2202      	movs	r2, #2
 80056f2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80056f6:	88fa      	ldrh	r2, [r7, #6]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80056fc:	88fa      	ldrh	r2, [r7, #6]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8005702:	88fb      	ldrh	r3, [r7, #6]
 8005704:	68ba      	ldr	r2, [r7, #8]
 8005706:	2100      	movs	r1, #0
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f000 fbbd 	bl	8005e88 <USBD_LL_Transmit>

  return USBD_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3710      	adds	r7, #16
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	4613      	mov	r3, r2
 8005724:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8005726:	88fb      	ldrh	r3, [r7, #6]
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	2100      	movs	r1, #0
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f000 fbab 	bl	8005e88 <USBD_LL_Transmit>

  return USBD_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	4613      	mov	r3, r2
 8005748:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2203      	movs	r2, #3
 800574e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8005752:	88fa      	ldrh	r2, [r7, #6]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800575a:	88fa      	ldrh	r2, [r7, #6]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8005762:	88fb      	ldrh	r3, [r7, #6]
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	2100      	movs	r1, #0
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f000 fbb0 	bl	8005ece <USBD_LL_PrepareReceive>

  return USBD_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	4613      	mov	r3, r2
 8005784:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005786:	88fb      	ldrh	r3, [r7, #6]
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	2100      	movs	r1, #0
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f000 fb9e 	bl	8005ece <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2204      	movs	r2, #4
 80057a8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80057ac:	2300      	movs	r3, #0
 80057ae:	2200      	movs	r2, #0
 80057b0:	2100      	movs	r1, #0
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fb68 	bl	8005e88 <USBD_LL_Transmit>

  return USBD_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b082      	sub	sp, #8
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2205      	movs	r2, #5
 80057ce:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80057d2:	2300      	movs	r3, #0
 80057d4:	2200      	movs	r2, #0
 80057d6:	2100      	movs	r1, #0
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 fb78 	bl	8005ece <USBD_LL_PrepareReceive>

  return USBD_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3708      	adds	r7, #8
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80057ec:	2200      	movs	r2, #0
 80057ee:	4912      	ldr	r1, [pc, #72]	; (8005838 <MX_USB_DEVICE_Init+0x50>)
 80057f0:	4812      	ldr	r0, [pc, #72]	; (800583c <MX_USB_DEVICE_Init+0x54>)
 80057f2:	f7fe ffe1 	bl	80047b8 <USBD_Init>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80057fc:	f7fb fc4e 	bl	800109c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8005800:	490f      	ldr	r1, [pc, #60]	; (8005840 <MX_USB_DEVICE_Init+0x58>)
 8005802:	480e      	ldr	r0, [pc, #56]	; (800583c <MX_USB_DEVICE_Init+0x54>)
 8005804:	f7ff f803 	bl	800480e <USBD_RegisterClass>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800580e:	f7fb fc45 	bl	800109c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8005812:	490c      	ldr	r1, [pc, #48]	; (8005844 <MX_USB_DEVICE_Init+0x5c>)
 8005814:	4809      	ldr	r0, [pc, #36]	; (800583c <MX_USB_DEVICE_Init+0x54>)
 8005816:	f7fe ffb9 	bl	800478c <USBD_CUSTOM_HID_RegisterInterface>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d001      	beq.n	8005824 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005820:	f7fb fc3c 	bl	800109c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005824:	4805      	ldr	r0, [pc, #20]	; (800583c <MX_USB_DEVICE_Init+0x54>)
 8005826:	f7ff f80b 	bl	8004840 <USBD_Start>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d001      	beq.n	8005834 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005830:	f7fb fc34 	bl	800109c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005834:	bf00      	nop
 8005836:	bd80      	pop	{r7, pc}
 8005838:	20000120 	.word	0x20000120
 800583c:	200003b4 	.word	0x200003b4
 8005840:	2000000c 	.word	0x2000000c
 8005844:	20000110 	.word	0x20000110

08005848 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8005848:	b480      	push	{r7}
 800584a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800584c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800584e:	4618      	mov	r0, r3
 8005850:	46bd      	mov	sp, r7
 8005852:	bc80      	pop	{r7}
 8005854:	4770      	bx	lr

08005856 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8005856:	b480      	push	{r7}
 8005858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800585a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800585c:	4618      	mov	r0, r3
 800585e:	46bd      	mov	sp, r7
 8005860:	bc80      	pop	{r7}
 8005862:	4770      	bx	lr

08005864 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	4603      	mov	r3, r0
 800586c:	460a      	mov	r2, r1
 800586e:	71fb      	strb	r3, [r7, #7]
 8005870:	4613      	mov	r3, r2
 8005872:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8005874:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005876:	4618      	mov	r0, r3
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	bc80      	pop	{r7}
 800587e:	4770      	bx	lr

08005880 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	4603      	mov	r3, r0
 8005888:	6039      	str	r1, [r7, #0]
 800588a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	2212      	movs	r2, #18
 8005890:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005892:	4b03      	ldr	r3, [pc, #12]	; (80058a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005894:	4618      	mov	r0, r3
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	bc80      	pop	{r7}
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	2000013c 	.word	0x2000013c

080058a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	4603      	mov	r3, r0
 80058ac:	6039      	str	r1, [r7, #0]
 80058ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	2204      	movs	r2, #4
 80058b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80058b6:	4b03      	ldr	r3, [pc, #12]	; (80058c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	bc80      	pop	{r7}
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	20000150 	.word	0x20000150

080058c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	4603      	mov	r3, r0
 80058d0:	6039      	str	r1, [r7, #0]
 80058d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80058d4:	79fb      	ldrb	r3, [r7, #7]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d105      	bne.n	80058e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	4907      	ldr	r1, [pc, #28]	; (80058fc <USBD_FS_ProductStrDescriptor+0x34>)
 80058de:	4808      	ldr	r0, [pc, #32]	; (8005900 <USBD_FS_ProductStrDescriptor+0x38>)
 80058e0:	f7ff fea5 	bl	800562e <USBD_GetString>
 80058e4:	e004      	b.n	80058f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80058e6:	683a      	ldr	r2, [r7, #0]
 80058e8:	4904      	ldr	r1, [pc, #16]	; (80058fc <USBD_FS_ProductStrDescriptor+0x34>)
 80058ea:	4805      	ldr	r0, [pc, #20]	; (8005900 <USBD_FS_ProductStrDescriptor+0x38>)
 80058ec:	f7ff fe9f 	bl	800562e <USBD_GetString>
  }
  return USBD_StrDesc;
 80058f0:	4b02      	ldr	r3, [pc, #8]	; (80058fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	20000650 	.word	0x20000650
 8005900:	0800836c 	.word	0x0800836c

08005904 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	4603      	mov	r3, r0
 800590c:	6039      	str	r1, [r7, #0]
 800590e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005910:	683a      	ldr	r2, [r7, #0]
 8005912:	4904      	ldr	r1, [pc, #16]	; (8005924 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005914:	4804      	ldr	r0, [pc, #16]	; (8005928 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005916:	f7ff fe8a 	bl	800562e <USBD_GetString>
  return USBD_StrDesc;
 800591a:	4b02      	ldr	r3, [pc, #8]	; (8005924 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800591c:	4618      	mov	r0, r3
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	20000650 	.word	0x20000650
 8005928:	0800837c 	.word	0x0800837c

0800592c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	4603      	mov	r3, r0
 8005934:	6039      	str	r1, [r7, #0]
 8005936:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	221a      	movs	r2, #26
 800593c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800593e:	f000 f843 	bl	80059c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005942:	4b02      	ldr	r3, [pc, #8]	; (800594c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005944:	4618      	mov	r0, r3
 8005946:	3708      	adds	r7, #8
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	20000154 	.word	0x20000154

08005950 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	4603      	mov	r3, r0
 8005958:	6039      	str	r1, [r7, #0]
 800595a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800595c:	79fb      	ldrb	r3, [r7, #7]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d105      	bne.n	800596e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	4907      	ldr	r1, [pc, #28]	; (8005984 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005966:	4808      	ldr	r0, [pc, #32]	; (8005988 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005968:	f7ff fe61 	bl	800562e <USBD_GetString>
 800596c:	e004      	b.n	8005978 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	4904      	ldr	r1, [pc, #16]	; (8005984 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005972:	4805      	ldr	r0, [pc, #20]	; (8005988 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005974:	f7ff fe5b 	bl	800562e <USBD_GetString>
  }
  return USBD_StrDesc;
 8005978:	4b02      	ldr	r3, [pc, #8]	; (8005984 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800597a:	4618      	mov	r0, r3
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	20000650 	.word	0x20000650
 8005988:	08008390 	.word	0x08008390

0800598c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	4603      	mov	r3, r0
 8005994:	6039      	str	r1, [r7, #0]
 8005996:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005998:	79fb      	ldrb	r3, [r7, #7]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d105      	bne.n	80059aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	4907      	ldr	r1, [pc, #28]	; (80059c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80059a2:	4808      	ldr	r0, [pc, #32]	; (80059c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80059a4:	f7ff fe43 	bl	800562e <USBD_GetString>
 80059a8:	e004      	b.n	80059b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	4904      	ldr	r1, [pc, #16]	; (80059c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80059ae:	4805      	ldr	r0, [pc, #20]	; (80059c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80059b0:	f7ff fe3d 	bl	800562e <USBD_GetString>
  }
  return USBD_StrDesc;
 80059b4:	4b02      	ldr	r3, [pc, #8]	; (80059c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	20000650 	.word	0x20000650
 80059c4:	080083a4 	.word	0x080083a4

080059c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80059ce:	4b0f      	ldr	r3, [pc, #60]	; (8005a0c <Get_SerialNum+0x44>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80059d4:	4b0e      	ldr	r3, [pc, #56]	; (8005a10 <Get_SerialNum+0x48>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80059da:	4b0e      	ldr	r3, [pc, #56]	; (8005a14 <Get_SerialNum+0x4c>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4413      	add	r3, r2
 80059e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d009      	beq.n	8005a02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80059ee:	2208      	movs	r2, #8
 80059f0:	4909      	ldr	r1, [pc, #36]	; (8005a18 <Get_SerialNum+0x50>)
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 f814 	bl	8005a20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80059f8:	2204      	movs	r2, #4
 80059fa:	4908      	ldr	r1, [pc, #32]	; (8005a1c <Get_SerialNum+0x54>)
 80059fc:	68b8      	ldr	r0, [r7, #8]
 80059fe:	f000 f80f 	bl	8005a20 <IntToUnicode>
  }
}
 8005a02:	bf00      	nop
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	1ff800d0 	.word	0x1ff800d0
 8005a10:	1ff800d4 	.word	0x1ff800d4
 8005a14:	1ff800d8 	.word	0x1ff800d8
 8005a18:	20000156 	.word	0x20000156
 8005a1c:	20000166 	.word	0x20000166

08005a20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005a32:	2300      	movs	r3, #0
 8005a34:	75fb      	strb	r3, [r7, #23]
 8005a36:	e027      	b.n	8005a88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	0f1b      	lsrs	r3, r3, #28
 8005a3c:	2b09      	cmp	r3, #9
 8005a3e:	d80b      	bhi.n	8005a58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	0f1b      	lsrs	r3, r3, #28
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	7dfb      	ldrb	r3, [r7, #23]
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	440b      	add	r3, r1
 8005a50:	3230      	adds	r2, #48	; 0x30
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	701a      	strb	r2, [r3, #0]
 8005a56:	e00a      	b.n	8005a6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	0f1b      	lsrs	r3, r3, #28
 8005a5c:	b2da      	uxtb	r2, r3
 8005a5e:	7dfb      	ldrb	r3, [r7, #23]
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	4619      	mov	r1, r3
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	440b      	add	r3, r1
 8005a68:	3237      	adds	r2, #55	; 0x37
 8005a6a:	b2d2      	uxtb	r2, r2
 8005a6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	011b      	lsls	r3, r3, #4
 8005a72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005a74:	7dfb      	ldrb	r3, [r7, #23]
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	3301      	adds	r3, #1
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	2200      	movs	r2, #0
 8005a80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005a82:	7dfb      	ldrb	r3, [r7, #23]
 8005a84:	3301      	adds	r3, #1
 8005a86:	75fb      	strb	r3, [r7, #23]
 8005a88:	7dfa      	ldrb	r2, [r7, #23]
 8005a8a:	79fb      	ldrb	r3, [r7, #7]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d3d3      	bcc.n	8005a38 <IntToUnicode+0x18>
  }
}
 8005a90:	bf00      	nop
 8005a92:	371c      	adds	r7, #28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bc80      	pop	{r7}
 8005a98:	4770      	bx	lr
	...

08005a9c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a11      	ldr	r2, [pc, #68]	; (8005af0 <HAL_PCD_MspInit+0x54>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d11b      	bne.n	8005ae6 <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8005aae:	4b11      	ldr	r3, [pc, #68]	; (8005af4 <HAL_PCD_MspInit+0x58>)
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab2:	4a10      	ldr	r2, [pc, #64]	; (8005af4 <HAL_PCD_MspInit+0x58>)
 8005ab4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005ab8:	6253      	str	r3, [r2, #36]	; 0x24
 8005aba:	4b0e      	ldr	r3, [pc, #56]	; (8005af4 <HAL_PCD_MspInit+0x58>)
 8005abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ac2:	60fb      	str	r3, [r7, #12]
 8005ac4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	2100      	movs	r1, #0
 8005aca:	2013      	movs	r0, #19
 8005acc:	f7fb feaa 	bl	8001824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 8005ad0:	2013      	movs	r0, #19
 8005ad2:	f7fb fed3 	bl	800187c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	2100      	movs	r1, #0
 8005ada:	2014      	movs	r0, #20
 8005adc:	f7fb fea2 	bl	8001824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8005ae0:	2014      	movs	r0, #20
 8005ae2:	f7fb fecb 	bl	800187c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8005ae6:	bf00      	nop
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	40005c00 	.word	0x40005c00
 8005af4:	40023800 	.word	0x40023800

08005af8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	4610      	mov	r0, r2
 8005b10:	f7fe fede 	bl	80048d0 <USBD_LL_SetupStage>
}
 8005b14:	bf00      	nop
 8005b16:	3708      	adds	r7, #8
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	460b      	mov	r3, r1
 8005b26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8005b2e:	78fb      	ldrb	r3, [r7, #3]
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	015b      	lsls	r3, r3, #5
 8005b34:	4413      	add	r3, r2
 8005b36:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	78fb      	ldrb	r3, [r7, #3]
 8005b3e:	4619      	mov	r1, r3
 8005b40:	f7fe ff11 	bl	8004966 <USBD_LL_DataOutStage>
}
 8005b44:	bf00      	nop
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	460b      	mov	r3, r1
 8005b56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8005b5e:	78fb      	ldrb	r3, [r7, #3]
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	015b      	lsls	r3, r3, #5
 8005b64:	4413      	add	r3, r2
 8005b66:	333c      	adds	r3, #60	; 0x3c
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	78fb      	ldrb	r3, [r7, #3]
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	f7fe ff6b 	bl	8004a48 <USBD_LL_DataInStage>
}
 8005b72:	bf00      	nop
 8005b74:	3708      	adds	r7, #8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b082      	sub	sp, #8
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7ff f876 	bl	8004c7a <USBD_LL_SOF>
}
 8005b8e:	bf00      	nop
 8005b90:	3708      	adds	r7, #8
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b084      	sub	sp, #16
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d001      	beq.n	8005bae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8005baa:	f7fb fa77 	bl	800109c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005bb4:	7bfa      	ldrb	r2, [r7, #15]
 8005bb6:	4611      	mov	r1, r2
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7ff f82b 	bl	8004c14 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7fe ffe4 	bl	8004b92 <USBD_LL_Reset>
}
 8005bca:	bf00      	nop
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
	...

08005bd4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7ff f825 	bl	8004c32 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d005      	beq.n	8005bfc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005bf0:	4b04      	ldr	r3, [pc, #16]	; (8005c04 <HAL_PCD_SuspendCallback+0x30>)
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	4a03      	ldr	r2, [pc, #12]	; (8005c04 <HAL_PCD_SuspendCallback+0x30>)
 8005bf6:	f043 0306 	orr.w	r3, r3, #6
 8005bfa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005bfc:	bf00      	nop
 8005bfe:	3708      	adds	r7, #8
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	e000ed00 	.word	0xe000ed00

08005c08 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7ff f81f 	bl	8004c5a <USBD_LL_Resume>
}
 8005c1c:	bf00      	nop
 8005c1e:	3708      	adds	r7, #8
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8005c2c:	4a23      	ldr	r2, [pc, #140]	; (8005cbc <USBD_LL_Init+0x98>)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a21      	ldr	r2, [pc, #132]	; (8005cbc <USBD_LL_Init+0x98>)
 8005c38:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8005c3c:	4b1f      	ldr	r3, [pc, #124]	; (8005cbc <USBD_LL_Init+0x98>)
 8005c3e:	4a20      	ldr	r2, [pc, #128]	; (8005cc0 <USBD_LL_Init+0x9c>)
 8005c40:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005c42:	4b1e      	ldr	r3, [pc, #120]	; (8005cbc <USBD_LL_Init+0x98>)
 8005c44:	2208      	movs	r2, #8
 8005c46:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005c48:	4b1c      	ldr	r3, [pc, #112]	; (8005cbc <USBD_LL_Init+0x98>)
 8005c4a:	2202      	movs	r2, #2
 8005c4c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005c4e:	4b1b      	ldr	r3, [pc, #108]	; (8005cbc <USBD_LL_Init+0x98>)
 8005c50:	2202      	movs	r2, #2
 8005c52:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005c54:	4b19      	ldr	r3, [pc, #100]	; (8005cbc <USBD_LL_Init+0x98>)
 8005c56:	2200      	movs	r2, #0
 8005c58:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005c5a:	4b18      	ldr	r3, [pc, #96]	; (8005cbc <USBD_LL_Init+0x98>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005c60:	4816      	ldr	r0, [pc, #88]	; (8005cbc <USBD_LL_Init+0x98>)
 8005c62:	f7fb fe2f 	bl	80018c4 <HAL_PCD_Init>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d001      	beq.n	8005c70 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8005c6c:	f7fb fa16 	bl	800109c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8005c76:	2318      	movs	r3, #24
 8005c78:	2200      	movs	r2, #0
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	f7fc fc80 	bl	8002580 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8005c86:	2358      	movs	r3, #88	; 0x58
 8005c88:	2200      	movs	r2, #0
 8005c8a:	2180      	movs	r1, #128	; 0x80
 8005c8c:	f7fc fc78 	bl	8002580 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8005c96:	2398      	movs	r3, #152	; 0x98
 8005c98:	2200      	movs	r2, #0
 8005c9a:	2181      	movs	r1, #129	; 0x81
 8005c9c:	f7fc fc70 	bl	8002580 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8005ca6:	23d8      	movs	r3, #216	; 0xd8
 8005ca8:	2200      	movs	r2, #0
 8005caa:	2101      	movs	r1, #1
 8005cac:	f7fc fc68 	bl	8002580 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3708      	adds	r7, #8
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	20000850 	.word	0x20000850
 8005cc0:	40005c00 	.word	0x40005c00

08005cc4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7fb feb4 	bl	8001a48 <HAL_PCD_Start>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005ce4:	7bfb      	ldrb	r3, [r7, #15]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 f92a 	bl	8005f40 <USBD_Get_USB_Status>
 8005cec:	4603      	mov	r3, r0
 8005cee:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005cf0:	7bbb      	ldrb	r3, [r7, #14]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b084      	sub	sp, #16
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
 8005d02:	4608      	mov	r0, r1
 8005d04:	4611      	mov	r1, r2
 8005d06:	461a      	mov	r2, r3
 8005d08:	4603      	mov	r3, r0
 8005d0a:	70fb      	strb	r3, [r7, #3]
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	70bb      	strb	r3, [r7, #2]
 8005d10:	4613      	mov	r3, r2
 8005d12:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d14:	2300      	movs	r3, #0
 8005d16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8005d22:	78bb      	ldrb	r3, [r7, #2]
 8005d24:	883a      	ldrh	r2, [r7, #0]
 8005d26:	78f9      	ldrb	r1, [r7, #3]
 8005d28:	f7fb ffdb 	bl	8001ce2 <HAL_PCD_EP_Open>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005d30:	7bfb      	ldrb	r3, [r7, #15]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 f904 	bl	8005f40 <USBD_Get_USB_Status>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8005d3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b084      	sub	sp, #16
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
 8005d4e:	460b      	mov	r3, r1
 8005d50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d52:	2300      	movs	r3, #0
 8005d54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005d60:	78fa      	ldrb	r2, [r7, #3]
 8005d62:	4611      	mov	r1, r2
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7fc f81c 	bl	8001da2 <HAL_PCD_EP_Close>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005d6e:	7bfb      	ldrb	r3, [r7, #15]
 8005d70:	4618      	mov	r0, r3
 8005d72:	f000 f8e5 	bl	8005f40 <USBD_Get_USB_Status>
 8005d76:	4603      	mov	r3, r0
 8005d78:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8005d7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d90:	2300      	movs	r3, #0
 8005d92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005d94:	2300      	movs	r3, #0
 8005d96:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005d9e:	78fa      	ldrb	r2, [r7, #3]
 8005da0:	4611      	mov	r1, r2
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7fc f8b2 	bl	8001f0c <HAL_PCD_EP_SetStall>
 8005da8:	4603      	mov	r3, r0
 8005daa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005dac:	7bfb      	ldrb	r3, [r7, #15]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f000 f8c6 	bl	8005f40 <USBD_Get_USB_Status>
 8005db4:	4603      	mov	r3, r0
 8005db6:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005db8:	7bbb      	ldrb	r3, [r7, #14]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b084      	sub	sp, #16
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
 8005dca:	460b      	mov	r3, r1
 8005dcc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005ddc:	78fa      	ldrb	r2, [r7, #3]
 8005dde:	4611      	mov	r1, r2
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7fc f8ed 	bl	8001fc0 <HAL_PCD_EP_ClrStall>
 8005de6:	4603      	mov	r3, r0
 8005de8:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005dea:	7bfb      	ldrb	r3, [r7, #15]
 8005dec:	4618      	mov	r0, r3
 8005dee:	f000 f8a7 	bl	8005f40 <USBD_Get_USB_Status>
 8005df2:	4603      	mov	r3, r0
 8005df4:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8005df6:	7bbb      	ldrb	r3, [r7, #14]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	460b      	mov	r3, r1
 8005e0a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005e12:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8005e14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	da08      	bge.n	8005e2e <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005e1c:	78fb      	ldrb	r3, [r7, #3]
 8005e1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	015b      	lsls	r3, r3, #5
 8005e26:	4413      	add	r3, r2
 8005e28:	332a      	adds	r3, #42	; 0x2a
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	e008      	b.n	8005e40 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005e2e:	78fb      	ldrb	r3, [r7, #3]
 8005e30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	015b      	lsls	r3, r3, #5
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8005e3e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bc80      	pop	{r7}
 8005e48:	4770      	bx	lr

08005e4a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b084      	sub	sp, #16
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
 8005e52:	460b      	mov	r3, r1
 8005e54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005e56:	2300      	movs	r3, #0
 8005e58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8005e64:	78fa      	ldrb	r2, [r7, #3]
 8005e66:	4611      	mov	r1, r2
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7fb ff15 	bl	8001c98 <HAL_PCD_SetAddress>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 f863 	bl	8005f40 <USBD_Get_USB_Status>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005e7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b086      	sub	sp, #24
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	607a      	str	r2, [r7, #4]
 8005e92:	461a      	mov	r2, r3
 8005e94:	460b      	mov	r3, r1
 8005e96:	72fb      	strb	r3, [r7, #11]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8005eaa:	893b      	ldrh	r3, [r7, #8]
 8005eac:	7af9      	ldrb	r1, [r7, #11]
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	f7fb fff3 	bl	8001e9a <HAL_PCD_EP_Transmit>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005eb8:	7dfb      	ldrb	r3, [r7, #23]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 f840 	bl	8005f40 <USBD_Get_USB_Status>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8005ec4:	7dbb      	ldrb	r3, [r7, #22]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3718      	adds	r7, #24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b086      	sub	sp, #24
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	60f8      	str	r0, [r7, #12]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	461a      	mov	r2, r3
 8005eda:	460b      	mov	r3, r1
 8005edc:	72fb      	strb	r3, [r7, #11]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8005ef0:	893b      	ldrh	r3, [r7, #8]
 8005ef2:	7af9      	ldrb	r1, [r7, #11]
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	f7fb ff96 	bl	8001e26 <HAL_PCD_EP_Receive>
 8005efa:	4603      	mov	r3, r0
 8005efc:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005efe:	7dfb      	ldrb	r3, [r7, #23]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f000 f81d 	bl	8005f40 <USBD_Get_USB_Status>
 8005f06:	4603      	mov	r3, r0
 8005f08:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8005f0a:	7dbb      	ldrb	r3, [r7, #22]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3718      	adds	r7, #24
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8005f1c:	4b02      	ldr	r3, [pc, #8]	; (8005f28 <USBD_static_malloc+0x14>)
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bc80      	pop	{r7}
 8005f26:	4770      	bx	lr
 8005f28:	20000364 	.word	0x20000364

08005f2c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]

}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bc80      	pop	{r7}
 8005f3c:	4770      	bx	lr
	...

08005f40 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	4603      	mov	r3, r0
 8005f48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005f4e:	79fb      	ldrb	r3, [r7, #7]
 8005f50:	2b03      	cmp	r3, #3
 8005f52:	d817      	bhi.n	8005f84 <USBD_Get_USB_Status+0x44>
 8005f54:	a201      	add	r2, pc, #4	; (adr r2, 8005f5c <USBD_Get_USB_Status+0x1c>)
 8005f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5a:	bf00      	nop
 8005f5c:	08005f6d 	.word	0x08005f6d
 8005f60:	08005f73 	.word	0x08005f73
 8005f64:	08005f79 	.word	0x08005f79
 8005f68:	08005f7f 	.word	0x08005f7f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	73fb      	strb	r3, [r7, #15]
    break;
 8005f70:	e00b      	b.n	8005f8a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005f72:	2302      	movs	r3, #2
 8005f74:	73fb      	strb	r3, [r7, #15]
    break;
 8005f76:	e008      	b.n	8005f8a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	73fb      	strb	r3, [r7, #15]
    break;
 8005f7c:	e005      	b.n	8005f8a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005f7e:	2302      	movs	r3, #2
 8005f80:	73fb      	strb	r3, [r7, #15]
    break;
 8005f82:	e002      	b.n	8005f8a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8005f84:	2302      	movs	r3, #2
 8005f86:	73fb      	strb	r3, [r7, #15]
    break;
 8005f88:	bf00      	nop
  }
  return usb_status;
 8005f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3714      	adds	r7, #20
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bc80      	pop	{r7}
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop

08005f98 <handle_usb>:

/*
 * Periodically send USB report frames.
 * If any keys are pressed == ring buffer length > 1, send key code. Otherwise, send 0x0.
 */
void handle_usb(void) {
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
  uint8_t buff_data[1];
  if (HAL_GetTick() < next_send_timestamp) {
 8005f9e:	f7fb fb4b 	bl	8001638 <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	4b1a      	ldr	r3, [pc, #104]	; (8006010 <handle_usb+0x78>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d32d      	bcc.n	8006008 <handle_usb+0x70>
    return;
  }

  rb_status_t rb_status = ring_buffer_get(&key_press_buff, buff_data, 1);
 8005fac:	1d3b      	adds	r3, r7, #4
 8005fae:	2201      	movs	r2, #1
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	4818      	ldr	r0, [pc, #96]	; (8006014 <handle_usb+0x7c>)
 8005fb4:	f000 f9f6 	bl	80063a4 <ring_buffer_get>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	71fb      	strb	r3, [r7, #7]
  if (rb_status == RB_OK) {
 8005fbc:	79fb      	ldrb	r3, [r7, #7]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d10b      	bne.n	8005fda <handle_usb+0x42>
    data[0] = KEY_MOD_RCTRL | KEY_MOD_RSHIFT; // Modifier keys
 8005fc2:	4b15      	ldr	r3, [pc, #84]	; (8006018 <handle_usb+0x80>)
 8005fc4:	2230      	movs	r2, #48	; 0x30
 8005fc6:	701a      	strb	r2, [r3, #0]

    data[2] = buff_data[0]; // keycode 1
 8005fc8:	793a      	ldrb	r2, [r7, #4]
 8005fca:	4b13      	ldr	r3, [pc, #76]	; (8006018 <handle_usb+0x80>)
 8005fcc:	709a      	strb	r2, [r3, #2]
    USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, data, USB_REPORT_DATA_SIZE);
 8005fce:	2208      	movs	r2, #8
 8005fd0:	4911      	ldr	r1, [pc, #68]	; (8006018 <handle_usb+0x80>)
 8005fd2:	4812      	ldr	r0, [pc, #72]	; (800601c <handle_usb+0x84>)
 8005fd4:	f7fe fb26 	bl	8004624 <USBD_CUSTOM_HID_SendReport>
 8005fd8:	e00f      	b.n	8005ffa <handle_usb+0x62>
  }
  else {
    data[0] = KEY_NONE; // Modifier keys
 8005fda:	4b0f      	ldr	r3, [pc, #60]	; (8006018 <handle_usb+0x80>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	701a      	strb	r2, [r3, #0]
    data[2] = KEY_NONE; // keycode 1
 8005fe0:	4b0d      	ldr	r3, [pc, #52]	; (8006018 <handle_usb+0x80>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	709a      	strb	r2, [r3, #2]
    USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, data, USB_REPORT_DATA_SIZE);
 8005fe6:	2208      	movs	r2, #8
 8005fe8:	490b      	ldr	r1, [pc, #44]	; (8006018 <handle_usb+0x80>)
 8005fea:	480c      	ldr	r0, [pc, #48]	; (800601c <handle_usb+0x84>)
 8005fec:	f7fe fb1a 	bl	8004624 <USBD_CUSTOM_HID_SendReport>

    if (rb_status == RB_ERROR) {
 8005ff0:	79fb      	ldrb	r3, [r7, #7]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d101      	bne.n	8005ffa <handle_usb+0x62>
      Error_Handler();
 8005ff6:	f7fb f851 	bl	800109c <Error_Handler>
    }
  }

  next_send_timestamp = HAL_GetTick() + CUSTOM_HID_FS_BINTERVAL;
 8005ffa:	f7fb fb1d 	bl	8001638 <HAL_GetTick>
 8005ffe:	4603      	mov	r3, r0
 8006000:	3305      	adds	r3, #5
 8006002:	4a03      	ldr	r2, [pc, #12]	; (8006010 <handle_usb+0x78>)
 8006004:	6013      	str	r3, [r2, #0]
 8006006:	e000      	b.n	800600a <handle_usb+0x72>
    return;
 8006008:	bf00      	nop

}
 800600a:	3708      	adds	r7, #8
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	20000380 	.word	0x20000380
 8006014:	20000398 	.word	0x20000398
 8006018:	20000384 	.word	0x20000384
 800601c:	200003b4 	.word	0x200003b4

08006020 <usb_send_button_press>:

/*
 * Add button action to USB buffer, which is handled by handle_usb().
 */
void usb_send_button_press(uint8_t btn_num) {
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	4603      	mov	r3, r0
 8006028:	71fb      	strb	r3, [r7, #7]
  btn_num = btn_num + BASE_KEY_NUM;
 800602a:	79fb      	ldrb	r3, [r7, #7]
 800602c:	3368      	adds	r3, #104	; 0x68
 800602e:	b2db      	uxtb	r3, r3
 8006030:	71fb      	strb	r3, [r7, #7]

  ring_buffer_put(&key_press_buff, (uint8_t*) &btn_num, 1);
 8006032:	1dfb      	adds	r3, r7, #7
 8006034:	2201      	movs	r2, #1
 8006036:	4619      	mov	r1, r3
 8006038:	4803      	ldr	r0, [pc, #12]	; (8006048 <usb_send_button_press+0x28>)
 800603a:	f000 f948 	bl	80062ce <ring_buffer_put>
}
 800603e:	bf00      	nop
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	20000398 	.word	0x20000398

0800604c <handle_buttons>:
 * @brief Handle buttons state. This function must be periodically called in a main while loop.
 *        This function calls event callbacks in buttons_user.c
 * @param None
 * @retval None
 */
void handle_buttons(void) {
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
  uint8_t btn_num;
  btn_phy_state_t phy_state;
  button_t *btn;
  uint32_t timestamp = HAL_GetTick();
 8006052:	f7fb faf1 	bl	8001638 <HAL_GetTick>
 8006056:	60b8      	str	r0, [r7, #8]

  for (btn_num = 0; btn_num < _num_of_registered_buttons; btn_num++) {
 8006058:	2300      	movs	r3, #0
 800605a:	73fb      	strb	r3, [r7, #15]
 800605c:	e092      	b.n	8006184 <handle_buttons+0x138>
    btn = &_buttons[btn_num];
 800605e:	7bfa      	ldrb	r2, [r7, #15]
 8006060:	4613      	mov	r3, r2
 8006062:	005b      	lsls	r3, r3, #1
 8006064:	4413      	add	r3, r2
 8006066:	00db      	lsls	r3, r3, #3
 8006068:	4a4b      	ldr	r2, [pc, #300]	; (8006198 <handle_buttons+0x14c>)
 800606a:	4413      	add	r3, r2
 800606c:	607b      	str	r3, [r7, #4]
    phy_state = get_button_pin_state(&btn->button_cfg);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4618      	mov	r0, r3
 8006072:	f000 fa45 	bl	8006500 <get_button_pin_state>
 8006076:	4603      	mov	r3, r0
 8006078:	70fb      	strb	r3, [r7, #3]
    btn->button_phy_state = phy_state;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	78fa      	ldrb	r2, [r7, #3]
 800607e:	735a      	strb	r2, [r3, #13]

    if (btn->first_change_timestamp == 0) {
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10c      	bne.n	80060a2 <handle_buttons+0x56>
      // no active tracking for this button
      if (phy_state == BTN_PHY_ACTIVE) {
 8006088:	78fb      	ldrb	r3, [r7, #3]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d177      	bne.n	800617e <handle_buttons+0x132>
        if (timestamp > (btn->last_event_timestamp + BTN_AFTER_PRESS_TIME_MS)) {
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	330f      	adds	r3, #15
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	429a      	cmp	r2, r3
 8006098:	d971      	bls.n	800617e <handle_buttons+0x132>
          // first pulse after IDLE state
          btn->first_change_timestamp = timestamp;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	68ba      	ldr	r2, [r7, #8]
 800609e:	611a      	str	r2, [r3, #16]
 80060a0:	e06d      	b.n	800617e <handle_buttons+0x132>
        }
      }
    }
    else {
      // button timestamp exists, check state and time
      if (phy_state == BTN_PHY_ACTIVE) {
 80060a2:	78fb      	ldrb	r3, [r7, #3]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d14c      	bne.n	8006142 <handle_buttons+0xf6>
        switch (btn->button_state) {
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	7b1b      	ldrb	r3, [r3, #12]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d002      	beq.n	80060b6 <handle_buttons+0x6a>
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d015      	beq.n	80060e0 <handle_buttons+0x94>
            }
            break;

          case BTN_STATE_LONGPRESS: //long press mode is not repetitive
          default:
            break;
 80060b4:	e063      	b.n	800617e <handle_buttons+0x132>
            if (timestamp > (btn->first_change_timestamp + BTN_PRESS_TIME_MS)) {
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	331e      	adds	r3, #30
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d95a      	bls.n	8006178 <handle_buttons+0x12c>
              btn->button_state = BTN_STATE_PRESS;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	731a      	strb	r2, [r3, #12]
              on_button_press(btn->button_cfg.gpio_port, btn->button_cfg.gpio_pin);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	4619      	mov	r1, r3
 80060d2:	4610      	mov	r0, r2
 80060d4:	f000 fa2e 	bl	8006534 <on_button_press>
              btn->last_event_timestamp = timestamp;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68ba      	ldr	r2, [r7, #8]
 80060dc:	615a      	str	r2, [r3, #20]
            break;
 80060de:	e04b      	b.n	8006178 <handle_buttons+0x12c>
            if (btn->button_cfg.press_mode == BTN_MODE_LONGPRESS) {
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	7a1b      	ldrb	r3, [r3, #8]
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d115      	bne.n	8006114 <handle_buttons+0xc8>
              if (timestamp > (btn->first_change_timestamp + BTN_LONGPRESS_TIME_MS)) {
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d942      	bls.n	800617c <handle_buttons+0x130>
                btn->button_state = BTN_STATE_LONGPRESS;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2202      	movs	r2, #2
 80060fa:	731a      	strb	r2, [r3, #12]
                on_button_longpress(btn->button_cfg.gpio_port, btn->button_cfg.gpio_pin);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	4619      	mov	r1, r3
 8006106:	4610      	mov	r0, r2
 8006108:	f000 faa4 	bl	8006654 <on_button_longpress>
                btn->last_event_timestamp = timestamp;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	615a      	str	r2, [r3, #20]
            break;
 8006112:	e033      	b.n	800617c <handle_buttons+0x130>
            else if (btn->button_cfg.press_mode == BTN_MODE_REPETITIVE) {
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	7a1b      	ldrb	r3, [r3, #8]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d12f      	bne.n	800617c <handle_buttons+0x130>
              if (timestamp > (btn->last_event_timestamp + BTN_REPETITIVE_PRESS_TIME_MS)) {
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	429a      	cmp	r2, r3
 8006128:	d928      	bls.n	800617c <handle_buttons+0x130>
                on_button_press(btn->button_cfg.gpio_port, btn->button_cfg.gpio_pin);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	4619      	mov	r1, r3
 8006134:	4610      	mov	r0, r2
 8006136:	f000 f9fd 	bl	8006534 <on_button_press>
                btn->last_event_timestamp = timestamp;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	615a      	str	r2, [r3, #20]
            break;
 8006140:	e01c      	b.n	800617c <handle_buttons+0x130>
        }
      }
      else {
        // button is not pressed: could be glitch to debounce it or button release
        //is not active, but start timestamp exists - debounce if state != IDLE
        if (btn->button_state == BTN_STATE_IDLE) {
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	7b1b      	ldrb	r3, [r3, #12]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10c      	bne.n	8006164 <handle_buttons+0x118>
          // pulses to debounce on button press or other button line spikes
          if (timestamp > (btn->first_change_timestamp + BTN_PRESS_TIME_MS)) {
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	331e      	adds	r3, #30
 8006150:	68ba      	ldr	r2, [r7, #8]
 8006152:	429a      	cmp	r2, r3
 8006154:	d913      	bls.n	800617e <handle_buttons+0x132>
            // non-relevant glitches, discard current tracking.
            btn->first_change_timestamp = 0;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	611a      	str	r2, [r3, #16]
            btn->last_event_timestamp = timestamp; // avoid immediate re-trigger phy on on->off glitches
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	615a      	str	r2, [r3, #20]
 8006162:	e00c      	b.n	800617e <handle_buttons+0x132>
          }
          // else: debounce
        }
        else {
          // state != IDLE, reset button tracking
          btn->button_state = BTN_STATE_IDLE;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	731a      	strb	r2, [r3, #12]
          btn->first_change_timestamp = 0;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	611a      	str	r2, [r3, #16]
          btn->last_event_timestamp = timestamp; // avoid immediate re-trigger on phy on->off glitches
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	615a      	str	r2, [r3, #20]
 8006176:	e002      	b.n	800617e <handle_buttons+0x132>
            break;
 8006178:	bf00      	nop
 800617a:	e000      	b.n	800617e <handle_buttons+0x132>
            break;
 800617c:	bf00      	nop
  for (btn_num = 0; btn_num < _num_of_registered_buttons; btn_num++) {
 800617e:	7bfb      	ldrb	r3, [r7, #15]
 8006180:	3301      	adds	r3, #1
 8006182:	73fb      	strb	r3, [r7, #15]
 8006184:	4b05      	ldr	r3, [pc, #20]	; (800619c <handle_buttons+0x150>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	7bfa      	ldrb	r2, [r7, #15]
 800618a:	429a      	cmp	r2, r3
 800618c:	f4ff af67 	bcc.w	800605e <handle_buttons+0x12>
        }
      }
    }
  }
}
 8006190:	bf00      	nop
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	20000abc 	.word	0x20000abc
 800619c:	2000038c 	.word	0x2000038c

080061a0 <register_button>:
 * @brief Add (register) button to a list of available buttons.
 * @param Registered button GPIO port.
 * @param Registered button GPIO pin.
 * @retval None
 */
void register_button(BTN_GPIO_PORT_TYPE *port, BTN_GPIO_PIN_TYPE pin, btn_press_mode_t press_mode) {
 80061a0:	b590      	push	{r4, r7, lr}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	4613      	mov	r3, r2
 80061ac:	71fb      	strb	r3, [r7, #7]
  _buttons[_num_of_registered_buttons].button_cfg.gpio_port = port;
 80061ae:	4b2f      	ldr	r3, [pc, #188]	; (800626c <register_button+0xcc>)
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	4619      	mov	r1, r3
 80061b4:	4a2e      	ldr	r2, [pc, #184]	; (8006270 <register_button+0xd0>)
 80061b6:	460b      	mov	r3, r1
 80061b8:	005b      	lsls	r3, r3, #1
 80061ba:	440b      	add	r3, r1
 80061bc:	00db      	lsls	r3, r3, #3
 80061be:	4413      	add	r3, r2
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	601a      	str	r2, [r3, #0]
  _buttons[_num_of_registered_buttons].button_cfg.gpio_pin = pin;
 80061c4:	4b29      	ldr	r3, [pc, #164]	; (800626c <register_button+0xcc>)
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	4619      	mov	r1, r3
 80061ca:	4a29      	ldr	r2, [pc, #164]	; (8006270 <register_button+0xd0>)
 80061cc:	460b      	mov	r3, r1
 80061ce:	005b      	lsls	r3, r3, #1
 80061d0:	440b      	add	r3, r1
 80061d2:	00db      	lsls	r3, r3, #3
 80061d4:	4413      	add	r3, r2
 80061d6:	3304      	adds	r3, #4
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	601a      	str	r2, [r3, #0]
  _buttons[_num_of_registered_buttons].button_cfg.press_mode = press_mode;
 80061dc:	4b23      	ldr	r3, [pc, #140]	; (800626c <register_button+0xcc>)
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	4619      	mov	r1, r3
 80061e2:	4a23      	ldr	r2, [pc, #140]	; (8006270 <register_button+0xd0>)
 80061e4:	460b      	mov	r3, r1
 80061e6:	005b      	lsls	r3, r3, #1
 80061e8:	440b      	add	r3, r1
 80061ea:	00db      	lsls	r3, r3, #3
 80061ec:	4413      	add	r3, r2
 80061ee:	3308      	adds	r3, #8
 80061f0:	79fa      	ldrb	r2, [r7, #7]
 80061f2:	701a      	strb	r2, [r3, #0]

  _buttons[_num_of_registered_buttons].button_state = BTN_STATE_IDLE;
 80061f4:	4b1d      	ldr	r3, [pc, #116]	; (800626c <register_button+0xcc>)
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	4619      	mov	r1, r3
 80061fa:	4a1d      	ldr	r2, [pc, #116]	; (8006270 <register_button+0xd0>)
 80061fc:	460b      	mov	r3, r1
 80061fe:	005b      	lsls	r3, r3, #1
 8006200:	440b      	add	r3, r1
 8006202:	00db      	lsls	r3, r3, #3
 8006204:	4413      	add	r3, r2
 8006206:	330c      	adds	r3, #12
 8006208:	2200      	movs	r2, #0
 800620a:	701a      	strb	r2, [r3, #0]
  _buttons[_num_of_registered_buttons].first_change_timestamp = 0;
 800620c:	4b17      	ldr	r3, [pc, #92]	; (800626c <register_button+0xcc>)
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	4619      	mov	r1, r3
 8006212:	4a17      	ldr	r2, [pc, #92]	; (8006270 <register_button+0xd0>)
 8006214:	460b      	mov	r3, r1
 8006216:	005b      	lsls	r3, r3, #1
 8006218:	440b      	add	r3, r1
 800621a:	00db      	lsls	r3, r3, #3
 800621c:	4413      	add	r3, r2
 800621e:	3310      	adds	r3, #16
 8006220:	2200      	movs	r2, #0
 8006222:	601a      	str	r2, [r3, #0]
  _buttons[_num_of_registered_buttons].button_phy_state = get_button_pin_state(
      &_buttons[_num_of_registered_buttons].button_cfg);
 8006224:	4b11      	ldr	r3, [pc, #68]	; (800626c <register_button+0xcc>)
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	461a      	mov	r2, r3
  _buttons[_num_of_registered_buttons].button_phy_state = get_button_pin_state(
 800622a:	4613      	mov	r3, r2
 800622c:	005b      	lsls	r3, r3, #1
 800622e:	4413      	add	r3, r2
 8006230:	00db      	lsls	r3, r3, #3
 8006232:	4a0f      	ldr	r2, [pc, #60]	; (8006270 <register_button+0xd0>)
 8006234:	441a      	add	r2, r3
 8006236:	4b0d      	ldr	r3, [pc, #52]	; (800626c <register_button+0xcc>)
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	461c      	mov	r4, r3
 800623c:	4610      	mov	r0, r2
 800623e:	f000 f95f 	bl	8006500 <get_button_pin_state>
 8006242:	4603      	mov	r3, r0
 8006244:	4619      	mov	r1, r3
 8006246:	4a0a      	ldr	r2, [pc, #40]	; (8006270 <register_button+0xd0>)
 8006248:	4623      	mov	r3, r4
 800624a:	005b      	lsls	r3, r3, #1
 800624c:	4423      	add	r3, r4
 800624e:	00db      	lsls	r3, r3, #3
 8006250:	4413      	add	r3, r2
 8006252:	330d      	adds	r3, #13
 8006254:	460a      	mov	r2, r1
 8006256:	701a      	strb	r2, [r3, #0]

  _num_of_registered_buttons++;
 8006258:	4b04      	ldr	r3, [pc, #16]	; (800626c <register_button+0xcc>)
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	3301      	adds	r3, #1
 800625e:	b2da      	uxtb	r2, r3
 8006260:	4b02      	ldr	r3, [pc, #8]	; (800626c <register_button+0xcc>)
 8006262:	701a      	strb	r2, [r3, #0]
}
 8006264:	bf00      	nop
 8006266:	3714      	adds	r7, #20
 8006268:	46bd      	mov	sp, r7
 800626a:	bd90      	pop	{r4, r7, pc}
 800626c:	2000038c 	.word	0x2000038c
 8006270:	20000abc 	.word	0x20000abc

08006274 <ring_buffer_init>:
 * @brief Initialize a ring buffer
 * @param *rbd - pointer to the ring buffer descriptor
 * @param size - ring buffer size in number of bytes
 * @return RB_ERROR, RB_OK
 */
rb_status_t ring_buffer_init(rb_att_t *rbd, uint32_t size){
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  rbd->status = RB_ERROR;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	751a      	strb	r2, [r3, #20]
  
  
  if(rbd != NULL){  // rbd must not be pointer to nowhere
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d01a      	beq.n	80062c0 <ring_buffer_init+0x4c>
    rbd->buff = calloc(size, sizeof(uint8_t)); // allocate memory of "size" bytes, set all values to 0.
 800628a:	2101      	movs	r1, #1
 800628c:	6838      	ldr	r0, [r7, #0]
 800628e:	f000 fa8f 	bl	80067b0 <calloc>
 8006292:	4603      	mov	r3, r0
 8006294:	461a      	mov	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	601a      	str	r2, [r3, #0]
    //rbd->buff = malloc(size * sizeof(uint8_t)); // Use this instead of calloc() if you don't wish to set all values to 0 by default.

    if(rbd->buff != NULL){  // buff must not be pointer to nowhere
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00e      	beq.n	80062c0 <ring_buffer_init+0x4c>
      rbd->n_elem = size;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	683a      	ldr	r2, [r7, #0]
 80062a6:	605a      	str	r2, [r3, #4]

      // Initialize the ring buffer internal variables
      rbd->head = 0;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	609a      	str	r2, [r3, #8]
      rbd->tail = 0;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	60da      	str	r2, [r3, #12]
      rbd->count = 0;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	611a      	str	r2, [r3, #16]
      
      rbd->status = RB_OK;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	751a      	strb	r2, [r3, #20]
    }
  }

  return rbd->status;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	7d1b      	ldrb	r3, [r3, #20]
 80062c4:	b2db      	uxtb	r3, r3
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <ring_buffer_put>:
 * @param *rbd - pointer to the ring buffer descriptor
 * @param data - the data to add
 * @param num - number of elements to add
 * @return RB_NOT_ENOUGH_SPACE, RB_OK, RB_ERROR
 */
rb_status_t ring_buffer_put(rb_att_t *rbd, uint8_t *data, uint32_t num){
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b086      	sub	sp, #24
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	60f8      	str	r0, [r7, #12]
 80062d6:	60b9      	str	r1, [r7, #8]
 80062d8:	607a      	str	r2, [r7, #4]
  rb_status_t status = RB_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	75fb      	strb	r3, [r7, #23]
  uint32_t num_to_end = 0; // number of elements to the last buffer element (including current one (head))
 80062de:	2300      	movs	r3, #0
 80062e0:	613b      	str	r3, [r7, #16]
  
  if(rbd != NULL){  // rbd must not be a pointer to nowhere
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d055      	beq.n	8006394 <ring_buffer_put+0xc6>
    if(ring_buffer_free_elements(rbd) >= num){  // is there enough space in buffer for num of data
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f000 f8c6 	bl	800647a <ring_buffer_free_elements>
 80062ee:	4602      	mov	r2, r0
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d84c      	bhi.n	8006390 <ring_buffer_put+0xc2>
      if(rbd->head >= rbd->n_elem){ // reset ring buffer head
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	689a      	ldr	r2, [r3, #8]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d302      	bcc.n	8006308 <ring_buffer_put+0x3a>
        rbd->head = 0;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	609a      	str	r2, [r3, #8]
      }
      
      num_to_end = rbd->n_elem - rbd->head; // that many data can be written into buffer, before reaching buffer last element
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	613b      	str	r3, [r7, #16]
      if(num_to_end < num){ // if there is not enough space for "num" of data before reaching buffer last element
 8006314:	693a      	ldr	r2, [r7, #16]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	429a      	cmp	r2, r3
 800631a:	d220      	bcs.n	800635e <ring_buffer_put+0x90>
        memcpy(&(rbd->buff[rbd->head]), data, num_to_end); //write to buffer partial data
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	4413      	add	r3, r2
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	68b9      	ldr	r1, [r7, #8]
 800632a:	4618      	mov	r0, r3
 800632c:	f000 fa72 	bl	8006814 <memcpy>
        memcpy(rbd->buff, (data + num_to_end), (num - num_to_end)); //write to buffer rest of the data, starting with buffer[0]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6818      	ldr	r0, [r3, #0]
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	18d1      	adds	r1, r2, r3
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	461a      	mov	r2, r3
 8006342:	f000 fa67 	bl	8006814 <memcpy>
        
        rbd->head = num - num_to_end;  //head
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	1ad2      	subs	r2, r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	609a      	str	r2, [r3, #8]
        rbd->count = rbd->count + num; // increment counter for num of data
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	691a      	ldr	r2, [r3, #16]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	441a      	add	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	611a      	str	r2, [r3, #16]
 800635c:	e015      	b.n	800638a <ring_buffer_put+0xbc>
      }
      else{ // there is enough space before reaching buffer's last element
        memcpy(&(rbd->buff[rbd->head]), data, num); //write to buffer all num of data in one piece
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	4413      	add	r3, r2
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	68b9      	ldr	r1, [r7, #8]
 800636c:	4618      	mov	r0, r3
 800636e:	f000 fa51 	bl	8006814 <memcpy>
        
        rbd->head = rbd->head + num;  // increment head
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	689a      	ldr	r2, [r3, #8]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	441a      	add	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	609a      	str	r2, [r3, #8]
        rbd->count = rbd->count + num; // increment counter for num of data
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	691a      	ldr	r2, [r3, #16]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	441a      	add	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	611a      	str	r2, [r3, #16]
      }
      
      status = RB_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	75fb      	strb	r3, [r7, #23]
 800638e:	e001      	b.n	8006394 <ring_buffer_put+0xc6>
    }
    else{ // there is not enough space in buffer for num of data
      status = RB_NOT_ENOUGH_SPACE;
 8006390:	2304      	movs	r3, #4
 8006392:	75fb      	strb	r3, [r7, #23]
    }
  }
  rbd->status = status;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	7dfa      	ldrb	r2, [r7, #23]
 8006398:	751a      	strb	r2, [r3, #20]
  return status;
 800639a:	7dfb      	ldrb	r3, [r7, #23]
}
 800639c:	4618      	mov	r0, r3
 800639e:	3718      	adds	r7, #24
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <ring_buffer_get>:
 * @param *rbd - pointer to the ring buffer descriptor
 * @param data - pointer to store the data
 * @param num - number of elements to read
 * @return RB_NOT_ENOUGH_DATA, RB_OK, RB_ERROR
 */
rb_status_t ring_buffer_get(rb_att_t *rbd, uint8_t *data, uint32_t num){
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
  rb_status_t status = RB_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	75fb      	strb	r3, [r7, #23]
  uint32_t num_to_end = 0;
 80063b4:	2300      	movs	r3, #0
 80063b6:	613b      	str	r3, [r7, #16]
  
  if(rbd != NULL){  // rbd must not be a pointer to nowhere
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d055      	beq.n	800646a <ring_buffer_get+0xc6>
    if(ring_buffer_size(rbd) >= num){ //buffer is not empty and there is at least num of data stored
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f000 f870 	bl	80064a4 <ring_buffer_size>
 80063c4:	4602      	mov	r2, r0
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d84c      	bhi.n	8006466 <ring_buffer_get+0xc2>
      if(rbd->tail >= rbd->n_elem){ // reset ring buffer tail
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	68da      	ldr	r2, [r3, #12]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d302      	bcc.n	80063de <ring_buffer_get+0x3a>
        rbd->tail = 0;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	60da      	str	r2, [r3, #12]
      }
      
      num_to_end = rbd->n_elem - rbd->tail;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	613b      	str	r3, [r7, #16]
      if(num >= num_to_end){ // is there enough ("num") of data to read before reaching buffer last element
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d320      	bcc.n	8006434 <ring_buffer_get+0x90>
        memcpy(data, &(rbd->buff[rbd->tail]), num_to_end); //read from buffer partial data
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	4413      	add	r3, r2
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	4619      	mov	r1, r3
 8006400:	68b8      	ldr	r0, [r7, #8]
 8006402:	f000 fa07 	bl	8006814 <memcpy>
        memcpy(data + num_to_end, rbd->buff, (num - num_to_end)); //read from buffer remaining partial data
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	18d0      	adds	r0, r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6819      	ldr	r1, [r3, #0]
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	461a      	mov	r2, r3
 8006418:	f000 f9fc 	bl	8006814 <memcpy>
          
        rbd->tail = num - num_to_end;  // tail increment
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	1ad2      	subs	r2, r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	60da      	str	r2, [r3, #12]
        rbd->count = rbd->count - num; // decrement counter for num of data
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	691a      	ldr	r2, [r3, #16]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	1ad2      	subs	r2, r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	611a      	str	r2, [r3, #16]
 8006432:	e015      	b.n	8006460 <ring_buffer_get+0xbc>
      }
      else{ //there is enough data to be read before reaching last element of ring buffer
        memcpy(data, &(rbd->buff[rbd->tail]), num); //read from buffer
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	4413      	add	r3, r2
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	4619      	mov	r1, r3
 8006442:	68b8      	ldr	r0, [r7, #8]
 8006444:	f000 f9e6 	bl	8006814 <memcpy>
        
        rbd->tail = rbd->tail + num;  // increment tail
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	68da      	ldr	r2, [r3, #12]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	441a      	add	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	60da      	str	r2, [r3, #12]
        rbd->count = rbd->count - num; // decrement counter for num of data
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	691a      	ldr	r2, [r3, #16]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	1ad2      	subs	r2, r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	611a      	str	r2, [r3, #16]
      }
      status = RB_OK;
 8006460:	2300      	movs	r3, #0
 8006462:	75fb      	strb	r3, [r7, #23]
 8006464:	e001      	b.n	800646a <ring_buffer_get+0xc6>
    }
    else{
      status = RB_NOT_ENOUGH_DATA;
 8006466:	2305      	movs	r3, #5
 8006468:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  rbd->status = status;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	7dfa      	ldrb	r2, [r7, #23]
 800646e:	751a      	strb	r2, [r3, #20]
  return status;
 8006470:	7dfb      	ldrb	r3, [r7, #23]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3718      	adds	r7, #24
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <ring_buffer_free_elements>:
/**
 * @brief Check how many elements can be written to the buffer
 * @param *rbd - pointer to the ring buffer descriptor
 * @return 0 on invalid parameter, number of elements otherwise
 */
uint32_t ring_buffer_free_elements(rb_att_t *rbd){
 800647a:	b480      	push	{r7}
 800647c:	b085      	sub	sp, #20
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  uint32_t ret_val = 0;
 8006482:	2300      	movs	r3, #0
 8006484:	60fb      	str	r3, [r7, #12]
  
  if(rbd != NULL){  // rbd must not be a pointer to nowhere
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d005      	beq.n	8006498 <ring_buffer_free_elements+0x1e>
   ret_val = rbd->n_elem - rbd->count;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685a      	ldr	r2, [r3, #4]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	60fb      	str	r3, [r7, #12]
  }
  
  return ret_val;
 8006498:	68fb      	ldr	r3, [r7, #12]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	bc80      	pop	{r7}
 80064a2:	4770      	bx	lr

080064a4 <ring_buffer_size>:
/**
 * @brief Get the number of bytes stored in ring buffer
 * @param *rbd - pointer to the ring buffer descriptor
 * @return 0 if invalid parameters, number of data stored in buffer otherwise
 */
uint32_t ring_buffer_size(rb_att_t *rbd){
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  uint32_t size = 0;
 80064ac:	2300      	movs	r3, #0
 80064ae:	60fb      	str	r3, [r7, #12]
  
  if(rbd != NULL){  // rbd must not be a pointer to nowhere
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d002      	beq.n	80064bc <ring_buffer_size+0x18>
    size = rbd->count;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	60fb      	str	r3, [r7, #12]
  }
  
  return size;
 80064bc:	68fb      	ldr	r3, [r7, #12]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3714      	adds	r7, #20
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bc80      	pop	{r7}
 80064c6:	4770      	bx	lr

080064c8 <printString>:
 * @brief Send/print readable character/string.
 * @param pointer to a string data
 * @example printString("test data");
 * @retval None
 */
void printString(char *data) {
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  send_data((uint8_t*) data, (uint16_t) strlen(data));
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f7f9 fe55 	bl	8000180 <strlen>
 80064d6:	4603      	mov	r3, r0
 80064d8:	b29b      	uxth	r3, r3
 80064da:	4619      	mov	r1, r3
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f93b 	bl	8006758 <send_data>
}
 80064e2:	bf00      	nop
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <LL_GPIO_ReadInputPort>:
{
 80064ea:	b480      	push	{r7}
 80064ec:	b083      	sub	sp, #12
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	691b      	ldr	r3, [r3, #16]
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bc80      	pop	{r7}
 80064fe:	4770      	bx	lr

08006500 <get_button_pin_state>:
 * @brief Low level call to get actual pin state.
 * @param Registered button configuration structure.
 * @retval BTN_PHY_ACTIVE on button press, BTN_PHY_IDLE otherwise.
 * TODO: user must implement this function to return button state.
 */
btn_phy_state_t get_button_pin_state(btn_cfg_t *btn_cfg) {
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  uint32_t port_state = LL_GPIO_ReadInputPort(btn_cfg->gpio_port);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4618      	mov	r0, r3
 800650e:	f7ff ffec 	bl	80064ea <LL_GPIO_ReadInputPort>
 8006512:	60f8      	str	r0, [r7, #12]
  uint32_t pin_state = READ_BIT(port_state, btn_cfg->gpio_pin);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	4013      	ands	r3, r2
 800651c:	60bb      	str	r3, [r7, #8]

  if (pin_state == 0) {
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <get_button_pin_state+0x28>
    return BTN_PHY_ACTIVE;
 8006524:	2301      	movs	r3, #1
 8006526:	e000      	b.n	800652a <get_button_pin_state+0x2a>
  }
  else {
    return BTN_PHY_IDLE;
 8006528:	2300      	movs	r3, #0
  }
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
	...

08006534 <on_button_press>:
 * @param Registered button GPIO port that event is triggered.
 * @param Registered button GPIO pin that event is triggered.
 * @retval None.
 * TODO: user can add actions on button events here.
 */
void on_button_press(BTN_GPIO_PORT_TYPE *port, BTN_GPIO_PIN_TYPE pin) {
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  if ((port == B1_GPIO_Port) && (pin == B1_Pin)) {
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a38      	ldr	r2, [pc, #224]	; (8006624 <on_button_press+0xf0>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d108      	bne.n	8006558 <on_button_press+0x24>
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2b02      	cmp	r3, #2
 800654a:	d105      	bne.n	8006558 <on_button_press+0x24>
    printString("B1");
 800654c:	4836      	ldr	r0, [pc, #216]	; (8006628 <on_button_press+0xf4>)
 800654e:	f7ff ffbb 	bl	80064c8 <printString>
    usb_send_button_press(0);
 8006552:	2000      	movs	r0, #0
 8006554:	f7ff fd64 	bl	8006020 <usb_send_button_press>
  }
  if ((port == B2_GPIO_Port) && (pin == B2_Pin)) {
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a32      	ldr	r2, [pc, #200]	; (8006624 <on_button_press+0xf0>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d108      	bne.n	8006572 <on_button_press+0x3e>
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	2b04      	cmp	r3, #4
 8006564:	d105      	bne.n	8006572 <on_button_press+0x3e>
    printString("B2");
 8006566:	4831      	ldr	r0, [pc, #196]	; (800662c <on_button_press+0xf8>)
 8006568:	f7ff ffae 	bl	80064c8 <printString>
    usb_send_button_press(1);
 800656c:	2001      	movs	r0, #1
 800656e:	f7ff fd57 	bl	8006020 <usb_send_button_press>
  }
  if ((port == B3_GPIO_Port) && (pin == B3_Pin)) {
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a2b      	ldr	r2, [pc, #172]	; (8006624 <on_button_press+0xf0>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d108      	bne.n	800658c <on_button_press+0x58>
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	2b08      	cmp	r3, #8
 800657e:	d105      	bne.n	800658c <on_button_press+0x58>
    printString("B3");
 8006580:	482b      	ldr	r0, [pc, #172]	; (8006630 <on_button_press+0xfc>)
 8006582:	f7ff ffa1 	bl	80064c8 <printString>
    usb_send_button_press(2);
 8006586:	2002      	movs	r0, #2
 8006588:	f7ff fd4a 	bl	8006020 <usb_send_button_press>
  }

  if ((port == B4_GPIO_Port) && (pin == B4_Pin)) {
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a29      	ldr	r2, [pc, #164]	; (8006634 <on_button_press+0x100>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d108      	bne.n	80065a6 <on_button_press+0x72>
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d105      	bne.n	80065a6 <on_button_press+0x72>
    printString("B4");
 800659a:	4827      	ldr	r0, [pc, #156]	; (8006638 <on_button_press+0x104>)
 800659c:	f7ff ff94 	bl	80064c8 <printString>
    usb_send_button_press(3);
 80065a0:	2003      	movs	r0, #3
 80065a2:	f7ff fd3d 	bl	8006020 <usb_send_button_press>
  }

  if ((port == B5_GPIO_Port) && (pin == B5_Pin)) {
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a22      	ldr	r2, [pc, #136]	; (8006634 <on_button_press+0x100>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d108      	bne.n	80065c0 <on_button_press+0x8c>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d105      	bne.n	80065c0 <on_button_press+0x8c>
    printString("B5");
 80065b4:	4821      	ldr	r0, [pc, #132]	; (800663c <on_button_press+0x108>)
 80065b6:	f7ff ff87 	bl	80064c8 <printString>
    usb_send_button_press(4);
 80065ba:	2004      	movs	r0, #4
 80065bc:	f7ff fd30 	bl	8006020 <usb_send_button_press>
  }

  if ((port == B6_GPIO_Port) && (pin == B6_Pin)) {
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a1c      	ldr	r2, [pc, #112]	; (8006634 <on_button_press+0x100>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d108      	bne.n	80065da <on_button_press+0xa6>
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	2b04      	cmp	r3, #4
 80065cc:	d105      	bne.n	80065da <on_button_press+0xa6>
    printString("B6");
 80065ce:	481c      	ldr	r0, [pc, #112]	; (8006640 <on_button_press+0x10c>)
 80065d0:	f7ff ff7a 	bl	80064c8 <printString>
    usb_send_button_press(5);
 80065d4:	2005      	movs	r0, #5
 80065d6:	f7ff fd23 	bl	8006020 <usb_send_button_press>
  }

  if ((port == B7_GPIO_Port) && (pin == B7_Pin)) {
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a15      	ldr	r2, [pc, #84]	; (8006634 <on_button_press+0x100>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d108      	bne.n	80065f4 <on_button_press+0xc0>
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	2b08      	cmp	r3, #8
 80065e6:	d105      	bne.n	80065f4 <on_button_press+0xc0>
    printString("B7");
 80065e8:	4816      	ldr	r0, [pc, #88]	; (8006644 <on_button_press+0x110>)
 80065ea:	f7ff ff6d 	bl	80064c8 <printString>
    usb_send_button_press(6);
 80065ee:	2006      	movs	r0, #6
 80065f0:	f7ff fd16 	bl	8006020 <usb_send_button_press>
  }

  if ((port == S3_GPIO_Port) && (pin == S3_Pin)) printString("S3");
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a14      	ldr	r2, [pc, #80]	; (8006648 <on_button_press+0x114>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d105      	bne.n	8006608 <on_button_press+0xd4>
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d102      	bne.n	8006608 <on_button_press+0xd4>
 8006602:	4812      	ldr	r0, [pc, #72]	; (800664c <on_button_press+0x118>)
 8006604:	f7ff ff60 	bl	80064c8 <printString>
  if ((port == S4_GPIO_Port) && (pin == S4_Pin)) printString("S4");
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a0f      	ldr	r2, [pc, #60]	; (8006648 <on_button_press+0x114>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d105      	bne.n	800661c <on_button_press+0xe8>
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	2b02      	cmp	r3, #2
 8006614:	d102      	bne.n	800661c <on_button_press+0xe8>
 8006616:	480e      	ldr	r0, [pc, #56]	; (8006650 <on_button_press+0x11c>)
 8006618:	f7ff ff56 	bl	80064c8 <printString>
}
 800661c:	bf00      	nop
 800661e:	3708      	adds	r7, #8
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	40020800 	.word	0x40020800
 8006628:	080083c0 	.word	0x080083c0
 800662c:	080083c4 	.word	0x080083c4
 8006630:	080083c8 	.word	0x080083c8
 8006634:	40020000 	.word	0x40020000
 8006638:	080083cc 	.word	0x080083cc
 800663c:	080083d0 	.word	0x080083d0
 8006640:	080083d4 	.word	0x080083d4
 8006644:	080083d8 	.word	0x080083d8
 8006648:	40020400 	.word	0x40020400
 800664c:	080083dc 	.word	0x080083dc
 8006650:	080083e0 	.word	0x080083e0

08006654 <on_button_longpress>:
 * @param Registered button GPIO port that event is triggered.
 * @param Registered button GPIO pin that event is triggered.
 * @retval None.
 * TODO: user can add actions on button events here.
 */
void on_button_longpress(BTN_GPIO_PORT_TYPE *port, BTN_GPIO_PIN_TYPE pin) {
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  if ((port == B1_GPIO_Port) && (pin == B1_Pin)) printString("B1 L");
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a24      	ldr	r2, [pc, #144]	; (80066f4 <on_button_longpress+0xa0>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d105      	bne.n	8006672 <on_button_longpress+0x1e>
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	2b02      	cmp	r3, #2
 800666a:	d102      	bne.n	8006672 <on_button_longpress+0x1e>
 800666c:	4822      	ldr	r0, [pc, #136]	; (80066f8 <on_button_longpress+0xa4>)
 800666e:	f7ff ff2b 	bl	80064c8 <printString>
  if ((port == B2_GPIO_Port) && (pin == B2_Pin)) printString("B2 L");
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a1f      	ldr	r2, [pc, #124]	; (80066f4 <on_button_longpress+0xa0>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d105      	bne.n	8006686 <on_button_longpress+0x32>
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	2b04      	cmp	r3, #4
 800667e:	d102      	bne.n	8006686 <on_button_longpress+0x32>
 8006680:	481e      	ldr	r0, [pc, #120]	; (80066fc <on_button_longpress+0xa8>)
 8006682:	f7ff ff21 	bl	80064c8 <printString>
  if ((port == B3_GPIO_Port) && (pin == B3_Pin)) printString("B3 L");
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a1a      	ldr	r2, [pc, #104]	; (80066f4 <on_button_longpress+0xa0>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d105      	bne.n	800669a <on_button_longpress+0x46>
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	2b08      	cmp	r3, #8
 8006692:	d102      	bne.n	800669a <on_button_longpress+0x46>
 8006694:	481a      	ldr	r0, [pc, #104]	; (8006700 <on_button_longpress+0xac>)
 8006696:	f7ff ff17 	bl	80064c8 <printString>
  if ((port == B4_GPIO_Port) && (pin == B4_Pin)) printString("B4 L");
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a19      	ldr	r2, [pc, #100]	; (8006704 <on_button_longpress+0xb0>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d105      	bne.n	80066ae <on_button_longpress+0x5a>
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d102      	bne.n	80066ae <on_button_longpress+0x5a>
 80066a8:	4817      	ldr	r0, [pc, #92]	; (8006708 <on_button_longpress+0xb4>)
 80066aa:	f7ff ff0d 	bl	80064c8 <printString>
  if ((port == B5_GPIO_Port) && (pin == B5_Pin)) printString("B5 L");
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a14      	ldr	r2, [pc, #80]	; (8006704 <on_button_longpress+0xb0>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d105      	bne.n	80066c2 <on_button_longpress+0x6e>
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d102      	bne.n	80066c2 <on_button_longpress+0x6e>
 80066bc:	4813      	ldr	r0, [pc, #76]	; (800670c <on_button_longpress+0xb8>)
 80066be:	f7ff ff03 	bl	80064c8 <printString>
  if ((port == B6_GPIO_Port) && (pin == B6_Pin)) printString("B6 L");
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a0f      	ldr	r2, [pc, #60]	; (8006704 <on_button_longpress+0xb0>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d105      	bne.n	80066d6 <on_button_longpress+0x82>
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2b04      	cmp	r3, #4
 80066ce:	d102      	bne.n	80066d6 <on_button_longpress+0x82>
 80066d0:	480f      	ldr	r0, [pc, #60]	; (8006710 <on_button_longpress+0xbc>)
 80066d2:	f7ff fef9 	bl	80064c8 <printString>
  if ((port == B7_GPIO_Port) && (pin == B7_Pin)) printString("B7 L");
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a0a      	ldr	r2, [pc, #40]	; (8006704 <on_button_longpress+0xb0>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d105      	bne.n	80066ea <on_button_longpress+0x96>
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	2b08      	cmp	r3, #8
 80066e2:	d102      	bne.n	80066ea <on_button_longpress+0x96>
 80066e4:	480b      	ldr	r0, [pc, #44]	; (8006714 <on_button_longpress+0xc0>)
 80066e6:	f7ff feef 	bl	80064c8 <printString>
}
 80066ea:	bf00      	nop
 80066ec:	3708      	adds	r7, #8
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	40020800 	.word	0x40020800
 80066f8:	080083e4 	.word	0x080083e4
 80066fc:	080083ec 	.word	0x080083ec
 8006700:	080083f4 	.word	0x080083f4
 8006704:	40020000 	.word	0x40020000
 8006708:	080083fc 	.word	0x080083fc
 800670c:	08008404 	.word	0x08008404
 8006710:	0800840c 	.word	0x0800840c
 8006714:	08008414 	.word	0x08008414

08006718 <LL_USART_IsActiveFlag_TXE>:
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006728:	2b80      	cmp	r3, #128	; 0x80
 800672a:	bf0c      	ite	eq
 800672c:	2301      	moveq	r3, #1
 800672e:	2300      	movne	r3, #0
 8006730:	b2db      	uxtb	r3, r3
}
 8006732:	4618      	mov	r0, r3
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	bc80      	pop	{r7}
 800673a:	4770      	bx	lr

0800673c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	460b      	mov	r3, r1
 8006746:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8006748:	78fa      	ldrb	r2, [r7, #3]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	605a      	str	r2, [r3, #4]
}
 800674e:	bf00      	nop
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	bc80      	pop	{r7}
 8006756:	4770      	bx	lr

08006758 <send_data>:
 * @param pointer to a data
 * @param size of the data (number of bytes to send)
 * @retval None
 * TODO: implement hardware specific UART handling.
 */
void send_data(uint8_t *data, uint16_t size) {
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	460b      	mov	r3, r1
 8006762:	807b      	strh	r3, [r7, #2]
  uint16_t byte;

  for (byte = 0; byte < size; byte++) {
 8006764:	2300      	movs	r3, #0
 8006766:	81fb      	strh	r3, [r7, #14]
 8006768:	e018      	b.n	800679c <send_data+0x44>
    // wait while TX data register is not empty
    while (!LL_USART_IsActiveFlag_TXE(USART1)) {
 800676a:	bf00      	nop
 800676c:	480f      	ldr	r0, [pc, #60]	; (80067ac <send_data+0x54>)
 800676e:	f7ff ffd3 	bl	8006718 <LL_USART_IsActiveFlag_TXE>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d0f9      	beq.n	800676c <send_data+0x14>
    }

    LL_USART_TransmitData8(USART1, *(data + byte));
 8006778:	89fb      	ldrh	r3, [r7, #14]
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	4413      	add	r3, r2
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	4619      	mov	r1, r3
 8006782:	480a      	ldr	r0, [pc, #40]	; (80067ac <send_data+0x54>)
 8006784:	f7ff ffda 	bl	800673c <LL_USART_TransmitData8>

    // wait while TX data register is not empty
    while (!LL_USART_IsActiveFlag_TXE(USART1)) {
 8006788:	bf00      	nop
 800678a:	4808      	ldr	r0, [pc, #32]	; (80067ac <send_data+0x54>)
 800678c:	f7ff ffc4 	bl	8006718 <LL_USART_IsActiveFlag_TXE>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d0f9      	beq.n	800678a <send_data+0x32>
  for (byte = 0; byte < size; byte++) {
 8006796:	89fb      	ldrh	r3, [r7, #14]
 8006798:	3301      	adds	r3, #1
 800679a:	81fb      	strh	r3, [r7, #14]
 800679c:	89fa      	ldrh	r2, [r7, #14]
 800679e:	887b      	ldrh	r3, [r7, #2]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d3e2      	bcc.n	800676a <send_data+0x12>
    }
  }
}
 80067a4:	bf00      	nop
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	40013800 	.word	0x40013800

080067b0 <calloc>:
 80067b0:	4b02      	ldr	r3, [pc, #8]	; (80067bc <calloc+0xc>)
 80067b2:	460a      	mov	r2, r1
 80067b4:	4601      	mov	r1, r0
 80067b6:	6818      	ldr	r0, [r3, #0]
 80067b8:	f000 b83f 	b.w	800683a <_calloc_r>
 80067bc:	20000170 	.word	0x20000170

080067c0 <__errno>:
 80067c0:	4b01      	ldr	r3, [pc, #4]	; (80067c8 <__errno+0x8>)
 80067c2:	6818      	ldr	r0, [r3, #0]
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	20000170 	.word	0x20000170

080067cc <__libc_init_array>:
 80067cc:	b570      	push	{r4, r5, r6, lr}
 80067ce:	2500      	movs	r5, #0
 80067d0:	4e0c      	ldr	r6, [pc, #48]	; (8006804 <__libc_init_array+0x38>)
 80067d2:	4c0d      	ldr	r4, [pc, #52]	; (8006808 <__libc_init_array+0x3c>)
 80067d4:	1ba4      	subs	r4, r4, r6
 80067d6:	10a4      	asrs	r4, r4, #2
 80067d8:	42a5      	cmp	r5, r4
 80067da:	d109      	bne.n	80067f0 <__libc_init_array+0x24>
 80067dc:	f001 fd3a 	bl	8008254 <_init>
 80067e0:	2500      	movs	r5, #0
 80067e2:	4e0a      	ldr	r6, [pc, #40]	; (800680c <__libc_init_array+0x40>)
 80067e4:	4c0a      	ldr	r4, [pc, #40]	; (8006810 <__libc_init_array+0x44>)
 80067e6:	1ba4      	subs	r4, r4, r6
 80067e8:	10a4      	asrs	r4, r4, #2
 80067ea:	42a5      	cmp	r5, r4
 80067ec:	d105      	bne.n	80067fa <__libc_init_array+0x2e>
 80067ee:	bd70      	pop	{r4, r5, r6, pc}
 80067f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067f4:	4798      	blx	r3
 80067f6:	3501      	adds	r5, #1
 80067f8:	e7ee      	b.n	80067d8 <__libc_init_array+0xc>
 80067fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067fe:	4798      	blx	r3
 8006800:	3501      	adds	r5, #1
 8006802:	e7f2      	b.n	80067ea <__libc_init_array+0x1e>
 8006804:	08008668 	.word	0x08008668
 8006808:	08008668 	.word	0x08008668
 800680c:	08008668 	.word	0x08008668
 8006810:	0800866c 	.word	0x0800866c

08006814 <memcpy>:
 8006814:	b510      	push	{r4, lr}
 8006816:	1e43      	subs	r3, r0, #1
 8006818:	440a      	add	r2, r1
 800681a:	4291      	cmp	r1, r2
 800681c:	d100      	bne.n	8006820 <memcpy+0xc>
 800681e:	bd10      	pop	{r4, pc}
 8006820:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006824:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006828:	e7f7      	b.n	800681a <memcpy+0x6>

0800682a <memset>:
 800682a:	4603      	mov	r3, r0
 800682c:	4402      	add	r2, r0
 800682e:	4293      	cmp	r3, r2
 8006830:	d100      	bne.n	8006834 <memset+0xa>
 8006832:	4770      	bx	lr
 8006834:	f803 1b01 	strb.w	r1, [r3], #1
 8006838:	e7f9      	b.n	800682e <memset+0x4>

0800683a <_calloc_r>:
 800683a:	b538      	push	{r3, r4, r5, lr}
 800683c:	fb02 f401 	mul.w	r4, r2, r1
 8006840:	4621      	mov	r1, r4
 8006842:	f000 f809 	bl	8006858 <_malloc_r>
 8006846:	4605      	mov	r5, r0
 8006848:	b118      	cbz	r0, 8006852 <_calloc_r+0x18>
 800684a:	4622      	mov	r2, r4
 800684c:	2100      	movs	r1, #0
 800684e:	f7ff ffec 	bl	800682a <memset>
 8006852:	4628      	mov	r0, r5
 8006854:	bd38      	pop	{r3, r4, r5, pc}
	...

08006858 <_malloc_r>:
 8006858:	b570      	push	{r4, r5, r6, lr}
 800685a:	1ccd      	adds	r5, r1, #3
 800685c:	f025 0503 	bic.w	r5, r5, #3
 8006860:	3508      	adds	r5, #8
 8006862:	2d0c      	cmp	r5, #12
 8006864:	bf38      	it	cc
 8006866:	250c      	movcc	r5, #12
 8006868:	2d00      	cmp	r5, #0
 800686a:	4606      	mov	r6, r0
 800686c:	db01      	blt.n	8006872 <_malloc_r+0x1a>
 800686e:	42a9      	cmp	r1, r5
 8006870:	d903      	bls.n	800687a <_malloc_r+0x22>
 8006872:	230c      	movs	r3, #12
 8006874:	6033      	str	r3, [r6, #0]
 8006876:	2000      	movs	r0, #0
 8006878:	bd70      	pop	{r4, r5, r6, pc}
 800687a:	f001 f9ef 	bl	8007c5c <__malloc_lock>
 800687e:	4a21      	ldr	r2, [pc, #132]	; (8006904 <_malloc_r+0xac>)
 8006880:	6814      	ldr	r4, [r2, #0]
 8006882:	4621      	mov	r1, r4
 8006884:	b991      	cbnz	r1, 80068ac <_malloc_r+0x54>
 8006886:	4c20      	ldr	r4, [pc, #128]	; (8006908 <_malloc_r+0xb0>)
 8006888:	6823      	ldr	r3, [r4, #0]
 800688a:	b91b      	cbnz	r3, 8006894 <_malloc_r+0x3c>
 800688c:	4630      	mov	r0, r6
 800688e:	f000 fb7b 	bl	8006f88 <_sbrk_r>
 8006892:	6020      	str	r0, [r4, #0]
 8006894:	4629      	mov	r1, r5
 8006896:	4630      	mov	r0, r6
 8006898:	f000 fb76 	bl	8006f88 <_sbrk_r>
 800689c:	1c43      	adds	r3, r0, #1
 800689e:	d124      	bne.n	80068ea <_malloc_r+0x92>
 80068a0:	230c      	movs	r3, #12
 80068a2:	4630      	mov	r0, r6
 80068a4:	6033      	str	r3, [r6, #0]
 80068a6:	f001 f9da 	bl	8007c5e <__malloc_unlock>
 80068aa:	e7e4      	b.n	8006876 <_malloc_r+0x1e>
 80068ac:	680b      	ldr	r3, [r1, #0]
 80068ae:	1b5b      	subs	r3, r3, r5
 80068b0:	d418      	bmi.n	80068e4 <_malloc_r+0x8c>
 80068b2:	2b0b      	cmp	r3, #11
 80068b4:	d90f      	bls.n	80068d6 <_malloc_r+0x7e>
 80068b6:	600b      	str	r3, [r1, #0]
 80068b8:	18cc      	adds	r4, r1, r3
 80068ba:	50cd      	str	r5, [r1, r3]
 80068bc:	4630      	mov	r0, r6
 80068be:	f001 f9ce 	bl	8007c5e <__malloc_unlock>
 80068c2:	f104 000b 	add.w	r0, r4, #11
 80068c6:	1d23      	adds	r3, r4, #4
 80068c8:	f020 0007 	bic.w	r0, r0, #7
 80068cc:	1ac3      	subs	r3, r0, r3
 80068ce:	d0d3      	beq.n	8006878 <_malloc_r+0x20>
 80068d0:	425a      	negs	r2, r3
 80068d2:	50e2      	str	r2, [r4, r3]
 80068d4:	e7d0      	b.n	8006878 <_malloc_r+0x20>
 80068d6:	684b      	ldr	r3, [r1, #4]
 80068d8:	428c      	cmp	r4, r1
 80068da:	bf16      	itet	ne
 80068dc:	6063      	strne	r3, [r4, #4]
 80068de:	6013      	streq	r3, [r2, #0]
 80068e0:	460c      	movne	r4, r1
 80068e2:	e7eb      	b.n	80068bc <_malloc_r+0x64>
 80068e4:	460c      	mov	r4, r1
 80068e6:	6849      	ldr	r1, [r1, #4]
 80068e8:	e7cc      	b.n	8006884 <_malloc_r+0x2c>
 80068ea:	1cc4      	adds	r4, r0, #3
 80068ec:	f024 0403 	bic.w	r4, r4, #3
 80068f0:	42a0      	cmp	r0, r4
 80068f2:	d005      	beq.n	8006900 <_malloc_r+0xa8>
 80068f4:	1a21      	subs	r1, r4, r0
 80068f6:	4630      	mov	r0, r6
 80068f8:	f000 fb46 	bl	8006f88 <_sbrk_r>
 80068fc:	3001      	adds	r0, #1
 80068fe:	d0cf      	beq.n	80068a0 <_malloc_r+0x48>
 8006900:	6025      	str	r5, [r4, #0]
 8006902:	e7db      	b.n	80068bc <_malloc_r+0x64>
 8006904:	20000390 	.word	0x20000390
 8006908:	20000394 	.word	0x20000394

0800690c <__cvt>:
 800690c:	2b00      	cmp	r3, #0
 800690e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006912:	461e      	mov	r6, r3
 8006914:	bfbb      	ittet	lt
 8006916:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800691a:	461e      	movlt	r6, r3
 800691c:	2300      	movge	r3, #0
 800691e:	232d      	movlt	r3, #45	; 0x2d
 8006920:	b088      	sub	sp, #32
 8006922:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006924:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8006928:	f027 0720 	bic.w	r7, r7, #32
 800692c:	2f46      	cmp	r7, #70	; 0x46
 800692e:	4614      	mov	r4, r2
 8006930:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006932:	700b      	strb	r3, [r1, #0]
 8006934:	d004      	beq.n	8006940 <__cvt+0x34>
 8006936:	2f45      	cmp	r7, #69	; 0x45
 8006938:	d100      	bne.n	800693c <__cvt+0x30>
 800693a:	3501      	adds	r5, #1
 800693c:	2302      	movs	r3, #2
 800693e:	e000      	b.n	8006942 <__cvt+0x36>
 8006940:	2303      	movs	r3, #3
 8006942:	aa07      	add	r2, sp, #28
 8006944:	9204      	str	r2, [sp, #16]
 8006946:	aa06      	add	r2, sp, #24
 8006948:	e9cd a202 	strd	sl, r2, [sp, #8]
 800694c:	e9cd 3500 	strd	r3, r5, [sp]
 8006950:	4622      	mov	r2, r4
 8006952:	4633      	mov	r3, r6
 8006954:	f000 fbb8 	bl	80070c8 <_dtoa_r>
 8006958:	2f47      	cmp	r7, #71	; 0x47
 800695a:	4680      	mov	r8, r0
 800695c:	d102      	bne.n	8006964 <__cvt+0x58>
 800695e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006960:	07db      	lsls	r3, r3, #31
 8006962:	d526      	bpl.n	80069b2 <__cvt+0xa6>
 8006964:	2f46      	cmp	r7, #70	; 0x46
 8006966:	eb08 0905 	add.w	r9, r8, r5
 800696a:	d111      	bne.n	8006990 <__cvt+0x84>
 800696c:	f898 3000 	ldrb.w	r3, [r8]
 8006970:	2b30      	cmp	r3, #48	; 0x30
 8006972:	d10a      	bne.n	800698a <__cvt+0x7e>
 8006974:	2200      	movs	r2, #0
 8006976:	2300      	movs	r3, #0
 8006978:	4620      	mov	r0, r4
 800697a:	4631      	mov	r1, r6
 800697c:	f7fa f82c 	bl	80009d8 <__aeabi_dcmpeq>
 8006980:	b918      	cbnz	r0, 800698a <__cvt+0x7e>
 8006982:	f1c5 0501 	rsb	r5, r5, #1
 8006986:	f8ca 5000 	str.w	r5, [sl]
 800698a:	f8da 3000 	ldr.w	r3, [sl]
 800698e:	4499      	add	r9, r3
 8006990:	2200      	movs	r2, #0
 8006992:	2300      	movs	r3, #0
 8006994:	4620      	mov	r0, r4
 8006996:	4631      	mov	r1, r6
 8006998:	f7fa f81e 	bl	80009d8 <__aeabi_dcmpeq>
 800699c:	b938      	cbnz	r0, 80069ae <__cvt+0xa2>
 800699e:	2230      	movs	r2, #48	; 0x30
 80069a0:	9b07      	ldr	r3, [sp, #28]
 80069a2:	454b      	cmp	r3, r9
 80069a4:	d205      	bcs.n	80069b2 <__cvt+0xa6>
 80069a6:	1c59      	adds	r1, r3, #1
 80069a8:	9107      	str	r1, [sp, #28]
 80069aa:	701a      	strb	r2, [r3, #0]
 80069ac:	e7f8      	b.n	80069a0 <__cvt+0x94>
 80069ae:	f8cd 901c 	str.w	r9, [sp, #28]
 80069b2:	4640      	mov	r0, r8
 80069b4:	9b07      	ldr	r3, [sp, #28]
 80069b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80069b8:	eba3 0308 	sub.w	r3, r3, r8
 80069bc:	6013      	str	r3, [r2, #0]
 80069be:	b008      	add	sp, #32
 80069c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080069c4 <__exponent>:
 80069c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069c6:	2900      	cmp	r1, #0
 80069c8:	bfb4      	ite	lt
 80069ca:	232d      	movlt	r3, #45	; 0x2d
 80069cc:	232b      	movge	r3, #43	; 0x2b
 80069ce:	4604      	mov	r4, r0
 80069d0:	bfb8      	it	lt
 80069d2:	4249      	neglt	r1, r1
 80069d4:	2909      	cmp	r1, #9
 80069d6:	f804 2b02 	strb.w	r2, [r4], #2
 80069da:	7043      	strb	r3, [r0, #1]
 80069dc:	dd21      	ble.n	8006a22 <__exponent+0x5e>
 80069de:	f10d 0307 	add.w	r3, sp, #7
 80069e2:	461f      	mov	r7, r3
 80069e4:	260a      	movs	r6, #10
 80069e6:	fb91 f5f6 	sdiv	r5, r1, r6
 80069ea:	fb06 1115 	mls	r1, r6, r5, r1
 80069ee:	2d09      	cmp	r5, #9
 80069f0:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80069f4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80069f8:	f103 32ff 	add.w	r2, r3, #4294967295
 80069fc:	4629      	mov	r1, r5
 80069fe:	dc09      	bgt.n	8006a14 <__exponent+0x50>
 8006a00:	3130      	adds	r1, #48	; 0x30
 8006a02:	3b02      	subs	r3, #2
 8006a04:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006a08:	42bb      	cmp	r3, r7
 8006a0a:	4622      	mov	r2, r4
 8006a0c:	d304      	bcc.n	8006a18 <__exponent+0x54>
 8006a0e:	1a10      	subs	r0, r2, r0
 8006a10:	b003      	add	sp, #12
 8006a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a14:	4613      	mov	r3, r2
 8006a16:	e7e6      	b.n	80069e6 <__exponent+0x22>
 8006a18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a1c:	f804 2b01 	strb.w	r2, [r4], #1
 8006a20:	e7f2      	b.n	8006a08 <__exponent+0x44>
 8006a22:	2330      	movs	r3, #48	; 0x30
 8006a24:	4419      	add	r1, r3
 8006a26:	7083      	strb	r3, [r0, #2]
 8006a28:	1d02      	adds	r2, r0, #4
 8006a2a:	70c1      	strb	r1, [r0, #3]
 8006a2c:	e7ef      	b.n	8006a0e <__exponent+0x4a>
	...

08006a30 <_printf_float>:
 8006a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a34:	b091      	sub	sp, #68	; 0x44
 8006a36:	460c      	mov	r4, r1
 8006a38:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8006a3a:	4693      	mov	fp, r2
 8006a3c:	461e      	mov	r6, r3
 8006a3e:	4605      	mov	r5, r0
 8006a40:	f001 f8f6 	bl	8007c30 <_localeconv_r>
 8006a44:	6803      	ldr	r3, [r0, #0]
 8006a46:	4618      	mov	r0, r3
 8006a48:	9309      	str	r3, [sp, #36]	; 0x24
 8006a4a:	f7f9 fb99 	bl	8000180 <strlen>
 8006a4e:	2300      	movs	r3, #0
 8006a50:	930e      	str	r3, [sp, #56]	; 0x38
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	900a      	str	r0, [sp, #40]	; 0x28
 8006a56:	3307      	adds	r3, #7
 8006a58:	f023 0307 	bic.w	r3, r3, #7
 8006a5c:	f103 0208 	add.w	r2, r3, #8
 8006a60:	f894 8018 	ldrb.w	r8, [r4, #24]
 8006a64:	f8d4 a000 	ldr.w	sl, [r4]
 8006a68:	603a      	str	r2, [r7, #0]
 8006a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006a72:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8006a76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006a7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a80:	4ba6      	ldr	r3, [pc, #664]	; (8006d1c <_printf_float+0x2ec>)
 8006a82:	4638      	mov	r0, r7
 8006a84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a86:	f7f9 ffd9 	bl	8000a3c <__aeabi_dcmpun>
 8006a8a:	bb68      	cbnz	r0, 8006ae8 <_printf_float+0xb8>
 8006a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a90:	4ba2      	ldr	r3, [pc, #648]	; (8006d1c <_printf_float+0x2ec>)
 8006a92:	4638      	mov	r0, r7
 8006a94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a96:	f7f9 ffb3 	bl	8000a00 <__aeabi_dcmple>
 8006a9a:	bb28      	cbnz	r0, 8006ae8 <_printf_float+0xb8>
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	4638      	mov	r0, r7
 8006aa2:	4649      	mov	r1, r9
 8006aa4:	f7f9 ffa2 	bl	80009ec <__aeabi_dcmplt>
 8006aa8:	b110      	cbz	r0, 8006ab0 <_printf_float+0x80>
 8006aaa:	232d      	movs	r3, #45	; 0x2d
 8006aac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ab0:	4f9b      	ldr	r7, [pc, #620]	; (8006d20 <_printf_float+0x2f0>)
 8006ab2:	4b9c      	ldr	r3, [pc, #624]	; (8006d24 <_printf_float+0x2f4>)
 8006ab4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006ab8:	bf98      	it	ls
 8006aba:	461f      	movls	r7, r3
 8006abc:	2303      	movs	r3, #3
 8006abe:	f04f 0900 	mov.w	r9, #0
 8006ac2:	6123      	str	r3, [r4, #16]
 8006ac4:	f02a 0304 	bic.w	r3, sl, #4
 8006ac8:	6023      	str	r3, [r4, #0]
 8006aca:	9600      	str	r6, [sp, #0]
 8006acc:	465b      	mov	r3, fp
 8006ace:	aa0f      	add	r2, sp, #60	; 0x3c
 8006ad0:	4621      	mov	r1, r4
 8006ad2:	4628      	mov	r0, r5
 8006ad4:	f000 f9e2 	bl	8006e9c <_printf_common>
 8006ad8:	3001      	adds	r0, #1
 8006ada:	f040 8090 	bne.w	8006bfe <_printf_float+0x1ce>
 8006ade:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae2:	b011      	add	sp, #68	; 0x44
 8006ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ae8:	463a      	mov	r2, r7
 8006aea:	464b      	mov	r3, r9
 8006aec:	4638      	mov	r0, r7
 8006aee:	4649      	mov	r1, r9
 8006af0:	f7f9 ffa4 	bl	8000a3c <__aeabi_dcmpun>
 8006af4:	b110      	cbz	r0, 8006afc <_printf_float+0xcc>
 8006af6:	4f8c      	ldr	r7, [pc, #560]	; (8006d28 <_printf_float+0x2f8>)
 8006af8:	4b8c      	ldr	r3, [pc, #560]	; (8006d2c <_printf_float+0x2fc>)
 8006afa:	e7db      	b.n	8006ab4 <_printf_float+0x84>
 8006afc:	6863      	ldr	r3, [r4, #4]
 8006afe:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8006b02:	1c59      	adds	r1, r3, #1
 8006b04:	a80d      	add	r0, sp, #52	; 0x34
 8006b06:	a90e      	add	r1, sp, #56	; 0x38
 8006b08:	d140      	bne.n	8006b8c <_printf_float+0x15c>
 8006b0a:	2306      	movs	r3, #6
 8006b0c:	6063      	str	r3, [r4, #4]
 8006b0e:	f04f 0c00 	mov.w	ip, #0
 8006b12:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8006b16:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8006b1a:	6863      	ldr	r3, [r4, #4]
 8006b1c:	6022      	str	r2, [r4, #0]
 8006b1e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8006b22:	9300      	str	r3, [sp, #0]
 8006b24:	463a      	mov	r2, r7
 8006b26:	464b      	mov	r3, r9
 8006b28:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8006b2c:	4628      	mov	r0, r5
 8006b2e:	f7ff feed 	bl	800690c <__cvt>
 8006b32:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8006b36:	2b47      	cmp	r3, #71	; 0x47
 8006b38:	4607      	mov	r7, r0
 8006b3a:	d109      	bne.n	8006b50 <_printf_float+0x120>
 8006b3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b3e:	1cd8      	adds	r0, r3, #3
 8006b40:	db02      	blt.n	8006b48 <_printf_float+0x118>
 8006b42:	6862      	ldr	r2, [r4, #4]
 8006b44:	4293      	cmp	r3, r2
 8006b46:	dd47      	ble.n	8006bd8 <_printf_float+0x1a8>
 8006b48:	f1a8 0802 	sub.w	r8, r8, #2
 8006b4c:	fa5f f888 	uxtb.w	r8, r8
 8006b50:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8006b54:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006b56:	d824      	bhi.n	8006ba2 <_printf_float+0x172>
 8006b58:	3901      	subs	r1, #1
 8006b5a:	4642      	mov	r2, r8
 8006b5c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006b60:	910d      	str	r1, [sp, #52]	; 0x34
 8006b62:	f7ff ff2f 	bl	80069c4 <__exponent>
 8006b66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b68:	4681      	mov	r9, r0
 8006b6a:	1813      	adds	r3, r2, r0
 8006b6c:	2a01      	cmp	r2, #1
 8006b6e:	6123      	str	r3, [r4, #16]
 8006b70:	dc02      	bgt.n	8006b78 <_printf_float+0x148>
 8006b72:	6822      	ldr	r2, [r4, #0]
 8006b74:	07d1      	lsls	r1, r2, #31
 8006b76:	d501      	bpl.n	8006b7c <_printf_float+0x14c>
 8006b78:	3301      	adds	r3, #1
 8006b7a:	6123      	str	r3, [r4, #16]
 8006b7c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d0a2      	beq.n	8006aca <_printf_float+0x9a>
 8006b84:	232d      	movs	r3, #45	; 0x2d
 8006b86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b8a:	e79e      	b.n	8006aca <_printf_float+0x9a>
 8006b8c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8006b90:	f000 816e 	beq.w	8006e70 <_printf_float+0x440>
 8006b94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006b98:	d1b9      	bne.n	8006b0e <_printf_float+0xde>
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1b7      	bne.n	8006b0e <_printf_float+0xde>
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e7b4      	b.n	8006b0c <_printf_float+0xdc>
 8006ba2:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8006ba6:	d119      	bne.n	8006bdc <_printf_float+0x1ac>
 8006ba8:	2900      	cmp	r1, #0
 8006baa:	6863      	ldr	r3, [r4, #4]
 8006bac:	dd0c      	ble.n	8006bc8 <_printf_float+0x198>
 8006bae:	6121      	str	r1, [r4, #16]
 8006bb0:	b913      	cbnz	r3, 8006bb8 <_printf_float+0x188>
 8006bb2:	6822      	ldr	r2, [r4, #0]
 8006bb4:	07d2      	lsls	r2, r2, #31
 8006bb6:	d502      	bpl.n	8006bbe <_printf_float+0x18e>
 8006bb8:	3301      	adds	r3, #1
 8006bba:	440b      	add	r3, r1
 8006bbc:	6123      	str	r3, [r4, #16]
 8006bbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bc0:	f04f 0900 	mov.w	r9, #0
 8006bc4:	65a3      	str	r3, [r4, #88]	; 0x58
 8006bc6:	e7d9      	b.n	8006b7c <_printf_float+0x14c>
 8006bc8:	b913      	cbnz	r3, 8006bd0 <_printf_float+0x1a0>
 8006bca:	6822      	ldr	r2, [r4, #0]
 8006bcc:	07d0      	lsls	r0, r2, #31
 8006bce:	d501      	bpl.n	8006bd4 <_printf_float+0x1a4>
 8006bd0:	3302      	adds	r3, #2
 8006bd2:	e7f3      	b.n	8006bbc <_printf_float+0x18c>
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e7f1      	b.n	8006bbc <_printf_float+0x18c>
 8006bd8:	f04f 0867 	mov.w	r8, #103	; 0x67
 8006bdc:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8006be0:	4293      	cmp	r3, r2
 8006be2:	db05      	blt.n	8006bf0 <_printf_float+0x1c0>
 8006be4:	6822      	ldr	r2, [r4, #0]
 8006be6:	6123      	str	r3, [r4, #16]
 8006be8:	07d1      	lsls	r1, r2, #31
 8006bea:	d5e8      	bpl.n	8006bbe <_printf_float+0x18e>
 8006bec:	3301      	adds	r3, #1
 8006bee:	e7e5      	b.n	8006bbc <_printf_float+0x18c>
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	bfcc      	ite	gt
 8006bf4:	2301      	movgt	r3, #1
 8006bf6:	f1c3 0302 	rsble	r3, r3, #2
 8006bfa:	4413      	add	r3, r2
 8006bfc:	e7de      	b.n	8006bbc <_printf_float+0x18c>
 8006bfe:	6823      	ldr	r3, [r4, #0]
 8006c00:	055a      	lsls	r2, r3, #21
 8006c02:	d407      	bmi.n	8006c14 <_printf_float+0x1e4>
 8006c04:	6923      	ldr	r3, [r4, #16]
 8006c06:	463a      	mov	r2, r7
 8006c08:	4659      	mov	r1, fp
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	47b0      	blx	r6
 8006c0e:	3001      	adds	r0, #1
 8006c10:	d129      	bne.n	8006c66 <_printf_float+0x236>
 8006c12:	e764      	b.n	8006ade <_printf_float+0xae>
 8006c14:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8006c18:	f240 80d7 	bls.w	8006dca <_printf_float+0x39a>
 8006c1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c20:	2200      	movs	r2, #0
 8006c22:	2300      	movs	r3, #0
 8006c24:	f7f9 fed8 	bl	80009d8 <__aeabi_dcmpeq>
 8006c28:	b388      	cbz	r0, 8006c8e <_printf_float+0x25e>
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	4a40      	ldr	r2, [pc, #256]	; (8006d30 <_printf_float+0x300>)
 8006c2e:	4659      	mov	r1, fp
 8006c30:	4628      	mov	r0, r5
 8006c32:	47b0      	blx	r6
 8006c34:	3001      	adds	r0, #1
 8006c36:	f43f af52 	beq.w	8006ade <_printf_float+0xae>
 8006c3a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	db02      	blt.n	8006c48 <_printf_float+0x218>
 8006c42:	6823      	ldr	r3, [r4, #0]
 8006c44:	07d8      	lsls	r0, r3, #31
 8006c46:	d50e      	bpl.n	8006c66 <_printf_float+0x236>
 8006c48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c4c:	4659      	mov	r1, fp
 8006c4e:	4628      	mov	r0, r5
 8006c50:	47b0      	blx	r6
 8006c52:	3001      	adds	r0, #1
 8006c54:	f43f af43 	beq.w	8006ade <_printf_float+0xae>
 8006c58:	2700      	movs	r7, #0
 8006c5a:	f104 081a 	add.w	r8, r4, #26
 8006c5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c60:	3b01      	subs	r3, #1
 8006c62:	42bb      	cmp	r3, r7
 8006c64:	dc09      	bgt.n	8006c7a <_printf_float+0x24a>
 8006c66:	6823      	ldr	r3, [r4, #0]
 8006c68:	079f      	lsls	r7, r3, #30
 8006c6a:	f100 80fd 	bmi.w	8006e68 <_printf_float+0x438>
 8006c6e:	68e0      	ldr	r0, [r4, #12]
 8006c70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c72:	4298      	cmp	r0, r3
 8006c74:	bfb8      	it	lt
 8006c76:	4618      	movlt	r0, r3
 8006c78:	e733      	b.n	8006ae2 <_printf_float+0xb2>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	4642      	mov	r2, r8
 8006c7e:	4659      	mov	r1, fp
 8006c80:	4628      	mov	r0, r5
 8006c82:	47b0      	blx	r6
 8006c84:	3001      	adds	r0, #1
 8006c86:	f43f af2a 	beq.w	8006ade <_printf_float+0xae>
 8006c8a:	3701      	adds	r7, #1
 8006c8c:	e7e7      	b.n	8006c5e <_printf_float+0x22e>
 8006c8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	dc2b      	bgt.n	8006cec <_printf_float+0x2bc>
 8006c94:	2301      	movs	r3, #1
 8006c96:	4a26      	ldr	r2, [pc, #152]	; (8006d30 <_printf_float+0x300>)
 8006c98:	4659      	mov	r1, fp
 8006c9a:	4628      	mov	r0, r5
 8006c9c:	47b0      	blx	r6
 8006c9e:	3001      	adds	r0, #1
 8006ca0:	f43f af1d 	beq.w	8006ade <_printf_float+0xae>
 8006ca4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ca6:	b923      	cbnz	r3, 8006cb2 <_printf_float+0x282>
 8006ca8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006caa:	b913      	cbnz	r3, 8006cb2 <_printf_float+0x282>
 8006cac:	6823      	ldr	r3, [r4, #0]
 8006cae:	07d9      	lsls	r1, r3, #31
 8006cb0:	d5d9      	bpl.n	8006c66 <_printf_float+0x236>
 8006cb2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006cb6:	4659      	mov	r1, fp
 8006cb8:	4628      	mov	r0, r5
 8006cba:	47b0      	blx	r6
 8006cbc:	3001      	adds	r0, #1
 8006cbe:	f43f af0e 	beq.w	8006ade <_printf_float+0xae>
 8006cc2:	f04f 0800 	mov.w	r8, #0
 8006cc6:	f104 091a 	add.w	r9, r4, #26
 8006cca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ccc:	425b      	negs	r3, r3
 8006cce:	4543      	cmp	r3, r8
 8006cd0:	dc01      	bgt.n	8006cd6 <_printf_float+0x2a6>
 8006cd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cd4:	e797      	b.n	8006c06 <_printf_float+0x1d6>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	464a      	mov	r2, r9
 8006cda:	4659      	mov	r1, fp
 8006cdc:	4628      	mov	r0, r5
 8006cde:	47b0      	blx	r6
 8006ce0:	3001      	adds	r0, #1
 8006ce2:	f43f aefc 	beq.w	8006ade <_printf_float+0xae>
 8006ce6:	f108 0801 	add.w	r8, r8, #1
 8006cea:	e7ee      	b.n	8006cca <_printf_float+0x29a>
 8006cec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006cee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	bfa8      	it	ge
 8006cf4:	461a      	movge	r2, r3
 8006cf6:	2a00      	cmp	r2, #0
 8006cf8:	4690      	mov	r8, r2
 8006cfa:	dd07      	ble.n	8006d0c <_printf_float+0x2dc>
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	4659      	mov	r1, fp
 8006d00:	463a      	mov	r2, r7
 8006d02:	4628      	mov	r0, r5
 8006d04:	47b0      	blx	r6
 8006d06:	3001      	adds	r0, #1
 8006d08:	f43f aee9 	beq.w	8006ade <_printf_float+0xae>
 8006d0c:	f104 031a 	add.w	r3, r4, #26
 8006d10:	f04f 0a00 	mov.w	sl, #0
 8006d14:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8006d18:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d1a:	e015      	b.n	8006d48 <_printf_float+0x318>
 8006d1c:	7fefffff 	.word	0x7fefffff
 8006d20:	08008444 	.word	0x08008444
 8006d24:	08008440 	.word	0x08008440
 8006d28:	0800844c 	.word	0x0800844c
 8006d2c:	08008448 	.word	0x08008448
 8006d30:	08008450 	.word	0x08008450
 8006d34:	2301      	movs	r3, #1
 8006d36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d38:	4659      	mov	r1, fp
 8006d3a:	4628      	mov	r0, r5
 8006d3c:	47b0      	blx	r6
 8006d3e:	3001      	adds	r0, #1
 8006d40:	f43f aecd 	beq.w	8006ade <_printf_float+0xae>
 8006d44:	f10a 0a01 	add.w	sl, sl, #1
 8006d48:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8006d4c:	eba9 0308 	sub.w	r3, r9, r8
 8006d50:	4553      	cmp	r3, sl
 8006d52:	dcef      	bgt.n	8006d34 <_printf_float+0x304>
 8006d54:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	444f      	add	r7, r9
 8006d5c:	db14      	blt.n	8006d88 <_printf_float+0x358>
 8006d5e:	6823      	ldr	r3, [r4, #0]
 8006d60:	07da      	lsls	r2, r3, #31
 8006d62:	d411      	bmi.n	8006d88 <_printf_float+0x358>
 8006d64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d66:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006d68:	eba3 0209 	sub.w	r2, r3, r9
 8006d6c:	eba3 0901 	sub.w	r9, r3, r1
 8006d70:	4591      	cmp	r9, r2
 8006d72:	bfa8      	it	ge
 8006d74:	4691      	movge	r9, r2
 8006d76:	f1b9 0f00 	cmp.w	r9, #0
 8006d7a:	dc0d      	bgt.n	8006d98 <_printf_float+0x368>
 8006d7c:	2700      	movs	r7, #0
 8006d7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d82:	f104 081a 	add.w	r8, r4, #26
 8006d86:	e018      	b.n	8006dba <_printf_float+0x38a>
 8006d88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d8c:	4659      	mov	r1, fp
 8006d8e:	4628      	mov	r0, r5
 8006d90:	47b0      	blx	r6
 8006d92:	3001      	adds	r0, #1
 8006d94:	d1e6      	bne.n	8006d64 <_printf_float+0x334>
 8006d96:	e6a2      	b.n	8006ade <_printf_float+0xae>
 8006d98:	464b      	mov	r3, r9
 8006d9a:	463a      	mov	r2, r7
 8006d9c:	4659      	mov	r1, fp
 8006d9e:	4628      	mov	r0, r5
 8006da0:	47b0      	blx	r6
 8006da2:	3001      	adds	r0, #1
 8006da4:	d1ea      	bne.n	8006d7c <_printf_float+0x34c>
 8006da6:	e69a      	b.n	8006ade <_printf_float+0xae>
 8006da8:	2301      	movs	r3, #1
 8006daa:	4642      	mov	r2, r8
 8006dac:	4659      	mov	r1, fp
 8006dae:	4628      	mov	r0, r5
 8006db0:	47b0      	blx	r6
 8006db2:	3001      	adds	r0, #1
 8006db4:	f43f ae93 	beq.w	8006ade <_printf_float+0xae>
 8006db8:	3701      	adds	r7, #1
 8006dba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006dbe:	1a9b      	subs	r3, r3, r2
 8006dc0:	eba3 0309 	sub.w	r3, r3, r9
 8006dc4:	42bb      	cmp	r3, r7
 8006dc6:	dcef      	bgt.n	8006da8 <_printf_float+0x378>
 8006dc8:	e74d      	b.n	8006c66 <_printf_float+0x236>
 8006dca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006dcc:	2a01      	cmp	r2, #1
 8006dce:	dc01      	bgt.n	8006dd4 <_printf_float+0x3a4>
 8006dd0:	07db      	lsls	r3, r3, #31
 8006dd2:	d538      	bpl.n	8006e46 <_printf_float+0x416>
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	463a      	mov	r2, r7
 8006dd8:	4659      	mov	r1, fp
 8006dda:	4628      	mov	r0, r5
 8006ddc:	47b0      	blx	r6
 8006dde:	3001      	adds	r0, #1
 8006de0:	f43f ae7d 	beq.w	8006ade <_printf_float+0xae>
 8006de4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006de8:	4659      	mov	r1, fp
 8006dea:	4628      	mov	r0, r5
 8006dec:	47b0      	blx	r6
 8006dee:	3001      	adds	r0, #1
 8006df0:	f107 0701 	add.w	r7, r7, #1
 8006df4:	f43f ae73 	beq.w	8006ade <_printf_float+0xae>
 8006df8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006dfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f103 38ff 	add.w	r8, r3, #4294967295
 8006e04:	2300      	movs	r3, #0
 8006e06:	f7f9 fde7 	bl	80009d8 <__aeabi_dcmpeq>
 8006e0a:	b9c0      	cbnz	r0, 8006e3e <_printf_float+0x40e>
 8006e0c:	4643      	mov	r3, r8
 8006e0e:	463a      	mov	r2, r7
 8006e10:	4659      	mov	r1, fp
 8006e12:	4628      	mov	r0, r5
 8006e14:	47b0      	blx	r6
 8006e16:	3001      	adds	r0, #1
 8006e18:	d10d      	bne.n	8006e36 <_printf_float+0x406>
 8006e1a:	e660      	b.n	8006ade <_printf_float+0xae>
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	4642      	mov	r2, r8
 8006e20:	4659      	mov	r1, fp
 8006e22:	4628      	mov	r0, r5
 8006e24:	47b0      	blx	r6
 8006e26:	3001      	adds	r0, #1
 8006e28:	f43f ae59 	beq.w	8006ade <_printf_float+0xae>
 8006e2c:	3701      	adds	r7, #1
 8006e2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e30:	3b01      	subs	r3, #1
 8006e32:	42bb      	cmp	r3, r7
 8006e34:	dcf2      	bgt.n	8006e1c <_printf_float+0x3ec>
 8006e36:	464b      	mov	r3, r9
 8006e38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006e3c:	e6e4      	b.n	8006c08 <_printf_float+0x1d8>
 8006e3e:	2700      	movs	r7, #0
 8006e40:	f104 081a 	add.w	r8, r4, #26
 8006e44:	e7f3      	b.n	8006e2e <_printf_float+0x3fe>
 8006e46:	2301      	movs	r3, #1
 8006e48:	e7e1      	b.n	8006e0e <_printf_float+0x3de>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	4642      	mov	r2, r8
 8006e4e:	4659      	mov	r1, fp
 8006e50:	4628      	mov	r0, r5
 8006e52:	47b0      	blx	r6
 8006e54:	3001      	adds	r0, #1
 8006e56:	f43f ae42 	beq.w	8006ade <_printf_float+0xae>
 8006e5a:	3701      	adds	r7, #1
 8006e5c:	68e3      	ldr	r3, [r4, #12]
 8006e5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006e60:	1a9b      	subs	r3, r3, r2
 8006e62:	42bb      	cmp	r3, r7
 8006e64:	dcf1      	bgt.n	8006e4a <_printf_float+0x41a>
 8006e66:	e702      	b.n	8006c6e <_printf_float+0x23e>
 8006e68:	2700      	movs	r7, #0
 8006e6a:	f104 0819 	add.w	r8, r4, #25
 8006e6e:	e7f5      	b.n	8006e5c <_printf_float+0x42c>
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f43f ae94 	beq.w	8006b9e <_printf_float+0x16e>
 8006e76:	f04f 0c00 	mov.w	ip, #0
 8006e7a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8006e7e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8006e82:	6022      	str	r2, [r4, #0]
 8006e84:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8006e88:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	463a      	mov	r2, r7
 8006e90:	464b      	mov	r3, r9
 8006e92:	4628      	mov	r0, r5
 8006e94:	f7ff fd3a 	bl	800690c <__cvt>
 8006e98:	4607      	mov	r7, r0
 8006e9a:	e64f      	b.n	8006b3c <_printf_float+0x10c>

08006e9c <_printf_common>:
 8006e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ea0:	4691      	mov	r9, r2
 8006ea2:	461f      	mov	r7, r3
 8006ea4:	688a      	ldr	r2, [r1, #8]
 8006ea6:	690b      	ldr	r3, [r1, #16]
 8006ea8:	4606      	mov	r6, r0
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	bfb8      	it	lt
 8006eae:	4613      	movlt	r3, r2
 8006eb0:	f8c9 3000 	str.w	r3, [r9]
 8006eb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006eb8:	460c      	mov	r4, r1
 8006eba:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ebe:	b112      	cbz	r2, 8006ec6 <_printf_common+0x2a>
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	f8c9 3000 	str.w	r3, [r9]
 8006ec6:	6823      	ldr	r3, [r4, #0]
 8006ec8:	0699      	lsls	r1, r3, #26
 8006eca:	bf42      	ittt	mi
 8006ecc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006ed0:	3302      	addmi	r3, #2
 8006ed2:	f8c9 3000 	strmi.w	r3, [r9]
 8006ed6:	6825      	ldr	r5, [r4, #0]
 8006ed8:	f015 0506 	ands.w	r5, r5, #6
 8006edc:	d107      	bne.n	8006eee <_printf_common+0x52>
 8006ede:	f104 0a19 	add.w	sl, r4, #25
 8006ee2:	68e3      	ldr	r3, [r4, #12]
 8006ee4:	f8d9 2000 	ldr.w	r2, [r9]
 8006ee8:	1a9b      	subs	r3, r3, r2
 8006eea:	42ab      	cmp	r3, r5
 8006eec:	dc29      	bgt.n	8006f42 <_printf_common+0xa6>
 8006eee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006ef2:	6822      	ldr	r2, [r4, #0]
 8006ef4:	3300      	adds	r3, #0
 8006ef6:	bf18      	it	ne
 8006ef8:	2301      	movne	r3, #1
 8006efa:	0692      	lsls	r2, r2, #26
 8006efc:	d42e      	bmi.n	8006f5c <_printf_common+0xc0>
 8006efe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f02:	4639      	mov	r1, r7
 8006f04:	4630      	mov	r0, r6
 8006f06:	47c0      	blx	r8
 8006f08:	3001      	adds	r0, #1
 8006f0a:	d021      	beq.n	8006f50 <_printf_common+0xb4>
 8006f0c:	6823      	ldr	r3, [r4, #0]
 8006f0e:	68e5      	ldr	r5, [r4, #12]
 8006f10:	f003 0306 	and.w	r3, r3, #6
 8006f14:	2b04      	cmp	r3, #4
 8006f16:	bf18      	it	ne
 8006f18:	2500      	movne	r5, #0
 8006f1a:	f8d9 2000 	ldr.w	r2, [r9]
 8006f1e:	f04f 0900 	mov.w	r9, #0
 8006f22:	bf08      	it	eq
 8006f24:	1aad      	subeq	r5, r5, r2
 8006f26:	68a3      	ldr	r3, [r4, #8]
 8006f28:	6922      	ldr	r2, [r4, #16]
 8006f2a:	bf08      	it	eq
 8006f2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f30:	4293      	cmp	r3, r2
 8006f32:	bfc4      	itt	gt
 8006f34:	1a9b      	subgt	r3, r3, r2
 8006f36:	18ed      	addgt	r5, r5, r3
 8006f38:	341a      	adds	r4, #26
 8006f3a:	454d      	cmp	r5, r9
 8006f3c:	d11a      	bne.n	8006f74 <_printf_common+0xd8>
 8006f3e:	2000      	movs	r0, #0
 8006f40:	e008      	b.n	8006f54 <_printf_common+0xb8>
 8006f42:	2301      	movs	r3, #1
 8006f44:	4652      	mov	r2, sl
 8006f46:	4639      	mov	r1, r7
 8006f48:	4630      	mov	r0, r6
 8006f4a:	47c0      	blx	r8
 8006f4c:	3001      	adds	r0, #1
 8006f4e:	d103      	bne.n	8006f58 <_printf_common+0xbc>
 8006f50:	f04f 30ff 	mov.w	r0, #4294967295
 8006f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f58:	3501      	adds	r5, #1
 8006f5a:	e7c2      	b.n	8006ee2 <_printf_common+0x46>
 8006f5c:	2030      	movs	r0, #48	; 0x30
 8006f5e:	18e1      	adds	r1, r4, r3
 8006f60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f64:	1c5a      	adds	r2, r3, #1
 8006f66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f6a:	4422      	add	r2, r4
 8006f6c:	3302      	adds	r3, #2
 8006f6e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f72:	e7c4      	b.n	8006efe <_printf_common+0x62>
 8006f74:	2301      	movs	r3, #1
 8006f76:	4622      	mov	r2, r4
 8006f78:	4639      	mov	r1, r7
 8006f7a:	4630      	mov	r0, r6
 8006f7c:	47c0      	blx	r8
 8006f7e:	3001      	adds	r0, #1
 8006f80:	d0e6      	beq.n	8006f50 <_printf_common+0xb4>
 8006f82:	f109 0901 	add.w	r9, r9, #1
 8006f86:	e7d8      	b.n	8006f3a <_printf_common+0x9e>

08006f88 <_sbrk_r>:
 8006f88:	b538      	push	{r3, r4, r5, lr}
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	4c05      	ldr	r4, [pc, #20]	; (8006fa4 <_sbrk_r+0x1c>)
 8006f8e:	4605      	mov	r5, r0
 8006f90:	4608      	mov	r0, r1
 8006f92:	6023      	str	r3, [r4, #0]
 8006f94:	f7fa f906 	bl	80011a4 <_sbrk>
 8006f98:	1c43      	adds	r3, r0, #1
 8006f9a:	d102      	bne.n	8006fa2 <_sbrk_r+0x1a>
 8006f9c:	6823      	ldr	r3, [r4, #0]
 8006f9e:	b103      	cbz	r3, 8006fa2 <_sbrk_r+0x1a>
 8006fa0:	602b      	str	r3, [r5, #0]
 8006fa2:	bd38      	pop	{r3, r4, r5, pc}
 8006fa4:	20000b94 	.word	0x20000b94

08006fa8 <quorem>:
 8006fa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fac:	6903      	ldr	r3, [r0, #16]
 8006fae:	690c      	ldr	r4, [r1, #16]
 8006fb0:	4680      	mov	r8, r0
 8006fb2:	42a3      	cmp	r3, r4
 8006fb4:	f2c0 8084 	blt.w	80070c0 <quorem+0x118>
 8006fb8:	3c01      	subs	r4, #1
 8006fba:	f101 0714 	add.w	r7, r1, #20
 8006fbe:	f100 0614 	add.w	r6, r0, #20
 8006fc2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006fc6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006fca:	3501      	adds	r5, #1
 8006fcc:	fbb0 f5f5 	udiv	r5, r0, r5
 8006fd0:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006fd4:	eb06 030c 	add.w	r3, r6, ip
 8006fd8:	eb07 090c 	add.w	r9, r7, ip
 8006fdc:	9301      	str	r3, [sp, #4]
 8006fde:	b39d      	cbz	r5, 8007048 <quorem+0xa0>
 8006fe0:	f04f 0a00 	mov.w	sl, #0
 8006fe4:	4638      	mov	r0, r7
 8006fe6:	46b6      	mov	lr, r6
 8006fe8:	46d3      	mov	fp, sl
 8006fea:	f850 2b04 	ldr.w	r2, [r0], #4
 8006fee:	b293      	uxth	r3, r2
 8006ff0:	fb05 a303 	mla	r3, r5, r3, sl
 8006ff4:	0c12      	lsrs	r2, r2, #16
 8006ff6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ffa:	fb05 a202 	mla	r2, r5, r2, sl
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	ebab 0303 	sub.w	r3, fp, r3
 8007004:	f8de b000 	ldr.w	fp, [lr]
 8007008:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800700c:	fa1f fb8b 	uxth.w	fp, fp
 8007010:	445b      	add	r3, fp
 8007012:	fa1f fb82 	uxth.w	fp, r2
 8007016:	f8de 2000 	ldr.w	r2, [lr]
 800701a:	4581      	cmp	r9, r0
 800701c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007020:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007024:	b29b      	uxth	r3, r3
 8007026:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800702a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800702e:	f84e 3b04 	str.w	r3, [lr], #4
 8007032:	d2da      	bcs.n	8006fea <quorem+0x42>
 8007034:	f856 300c 	ldr.w	r3, [r6, ip]
 8007038:	b933      	cbnz	r3, 8007048 <quorem+0xa0>
 800703a:	9b01      	ldr	r3, [sp, #4]
 800703c:	3b04      	subs	r3, #4
 800703e:	429e      	cmp	r6, r3
 8007040:	461a      	mov	r2, r3
 8007042:	d331      	bcc.n	80070a8 <quorem+0x100>
 8007044:	f8c8 4010 	str.w	r4, [r8, #16]
 8007048:	4640      	mov	r0, r8
 800704a:	f001 f81d 	bl	8008088 <__mcmp>
 800704e:	2800      	cmp	r0, #0
 8007050:	db26      	blt.n	80070a0 <quorem+0xf8>
 8007052:	4630      	mov	r0, r6
 8007054:	f04f 0c00 	mov.w	ip, #0
 8007058:	3501      	adds	r5, #1
 800705a:	f857 1b04 	ldr.w	r1, [r7], #4
 800705e:	f8d0 e000 	ldr.w	lr, [r0]
 8007062:	b28b      	uxth	r3, r1
 8007064:	ebac 0303 	sub.w	r3, ip, r3
 8007068:	fa1f f28e 	uxth.w	r2, lr
 800706c:	4413      	add	r3, r2
 800706e:	0c0a      	lsrs	r2, r1, #16
 8007070:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007074:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007078:	b29b      	uxth	r3, r3
 800707a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800707e:	45b9      	cmp	r9, r7
 8007080:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007084:	f840 3b04 	str.w	r3, [r0], #4
 8007088:	d2e7      	bcs.n	800705a <quorem+0xb2>
 800708a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800708e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007092:	b92a      	cbnz	r2, 80070a0 <quorem+0xf8>
 8007094:	3b04      	subs	r3, #4
 8007096:	429e      	cmp	r6, r3
 8007098:	461a      	mov	r2, r3
 800709a:	d30b      	bcc.n	80070b4 <quorem+0x10c>
 800709c:	f8c8 4010 	str.w	r4, [r8, #16]
 80070a0:	4628      	mov	r0, r5
 80070a2:	b003      	add	sp, #12
 80070a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070a8:	6812      	ldr	r2, [r2, #0]
 80070aa:	3b04      	subs	r3, #4
 80070ac:	2a00      	cmp	r2, #0
 80070ae:	d1c9      	bne.n	8007044 <quorem+0x9c>
 80070b0:	3c01      	subs	r4, #1
 80070b2:	e7c4      	b.n	800703e <quorem+0x96>
 80070b4:	6812      	ldr	r2, [r2, #0]
 80070b6:	3b04      	subs	r3, #4
 80070b8:	2a00      	cmp	r2, #0
 80070ba:	d1ef      	bne.n	800709c <quorem+0xf4>
 80070bc:	3c01      	subs	r4, #1
 80070be:	e7ea      	b.n	8007096 <quorem+0xee>
 80070c0:	2000      	movs	r0, #0
 80070c2:	e7ee      	b.n	80070a2 <quorem+0xfa>
 80070c4:	0000      	movs	r0, r0
	...

080070c8 <_dtoa_r>:
 80070c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070cc:	4616      	mov	r6, r2
 80070ce:	461f      	mov	r7, r3
 80070d0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80070d2:	b095      	sub	sp, #84	; 0x54
 80070d4:	4604      	mov	r4, r0
 80070d6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80070da:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80070de:	b93d      	cbnz	r5, 80070f0 <_dtoa_r+0x28>
 80070e0:	2010      	movs	r0, #16
 80070e2:	f000 fdb3 	bl	8007c4c <malloc>
 80070e6:	6260      	str	r0, [r4, #36]	; 0x24
 80070e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80070ec:	6005      	str	r5, [r0, #0]
 80070ee:	60c5      	str	r5, [r0, #12]
 80070f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070f2:	6819      	ldr	r1, [r3, #0]
 80070f4:	b151      	cbz	r1, 800710c <_dtoa_r+0x44>
 80070f6:	685a      	ldr	r2, [r3, #4]
 80070f8:	2301      	movs	r3, #1
 80070fa:	4093      	lsls	r3, r2
 80070fc:	604a      	str	r2, [r1, #4]
 80070fe:	608b      	str	r3, [r1, #8]
 8007100:	4620      	mov	r0, r4
 8007102:	f000 fde1 	bl	8007cc8 <_Bfree>
 8007106:	2200      	movs	r2, #0
 8007108:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800710a:	601a      	str	r2, [r3, #0]
 800710c:	1e3b      	subs	r3, r7, #0
 800710e:	bfaf      	iteee	ge
 8007110:	2300      	movge	r3, #0
 8007112:	2201      	movlt	r2, #1
 8007114:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007118:	9303      	strlt	r3, [sp, #12]
 800711a:	bfac      	ite	ge
 800711c:	f8c8 3000 	strge.w	r3, [r8]
 8007120:	f8c8 2000 	strlt.w	r2, [r8]
 8007124:	4bae      	ldr	r3, [pc, #696]	; (80073e0 <_dtoa_r+0x318>)
 8007126:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800712a:	ea33 0308 	bics.w	r3, r3, r8
 800712e:	d11b      	bne.n	8007168 <_dtoa_r+0xa0>
 8007130:	f242 730f 	movw	r3, #9999	; 0x270f
 8007134:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007136:	6013      	str	r3, [r2, #0]
 8007138:	9b02      	ldr	r3, [sp, #8]
 800713a:	b923      	cbnz	r3, 8007146 <_dtoa_r+0x7e>
 800713c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007140:	2800      	cmp	r0, #0
 8007142:	f000 8545 	beq.w	8007bd0 <_dtoa_r+0xb08>
 8007146:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007148:	b953      	cbnz	r3, 8007160 <_dtoa_r+0x98>
 800714a:	4ba6      	ldr	r3, [pc, #664]	; (80073e4 <_dtoa_r+0x31c>)
 800714c:	e021      	b.n	8007192 <_dtoa_r+0xca>
 800714e:	4ba6      	ldr	r3, [pc, #664]	; (80073e8 <_dtoa_r+0x320>)
 8007150:	9306      	str	r3, [sp, #24]
 8007152:	3308      	adds	r3, #8
 8007154:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007156:	6013      	str	r3, [r2, #0]
 8007158:	9806      	ldr	r0, [sp, #24]
 800715a:	b015      	add	sp, #84	; 0x54
 800715c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007160:	4ba0      	ldr	r3, [pc, #640]	; (80073e4 <_dtoa_r+0x31c>)
 8007162:	9306      	str	r3, [sp, #24]
 8007164:	3303      	adds	r3, #3
 8007166:	e7f5      	b.n	8007154 <_dtoa_r+0x8c>
 8007168:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800716c:	2200      	movs	r2, #0
 800716e:	2300      	movs	r3, #0
 8007170:	4630      	mov	r0, r6
 8007172:	4639      	mov	r1, r7
 8007174:	f7f9 fc30 	bl	80009d8 <__aeabi_dcmpeq>
 8007178:	4682      	mov	sl, r0
 800717a:	b160      	cbz	r0, 8007196 <_dtoa_r+0xce>
 800717c:	2301      	movs	r3, #1
 800717e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007180:	6013      	str	r3, [r2, #0]
 8007182:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 8520 	beq.w	8007bca <_dtoa_r+0xb02>
 800718a:	4b98      	ldr	r3, [pc, #608]	; (80073ec <_dtoa_r+0x324>)
 800718c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800718e:	6013      	str	r3, [r2, #0]
 8007190:	3b01      	subs	r3, #1
 8007192:	9306      	str	r3, [sp, #24]
 8007194:	e7e0      	b.n	8007158 <_dtoa_r+0x90>
 8007196:	ab12      	add	r3, sp, #72	; 0x48
 8007198:	9301      	str	r3, [sp, #4]
 800719a:	ab13      	add	r3, sp, #76	; 0x4c
 800719c:	9300      	str	r3, [sp, #0]
 800719e:	4632      	mov	r2, r6
 80071a0:	463b      	mov	r3, r7
 80071a2:	4620      	mov	r0, r4
 80071a4:	f000 ffe8 	bl	8008178 <__d2b>
 80071a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80071ac:	4683      	mov	fp, r0
 80071ae:	2d00      	cmp	r5, #0
 80071b0:	d07d      	beq.n	80072ae <_dtoa_r+0x1e6>
 80071b2:	46b0      	mov	r8, r6
 80071b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80071b8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80071bc:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80071c0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80071c4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80071c8:	2200      	movs	r2, #0
 80071ca:	4b89      	ldr	r3, [pc, #548]	; (80073f0 <_dtoa_r+0x328>)
 80071cc:	4640      	mov	r0, r8
 80071ce:	4649      	mov	r1, r9
 80071d0:	f7f8 ffe2 	bl	8000198 <__aeabi_dsub>
 80071d4:	a37c      	add	r3, pc, #496	; (adr r3, 80073c8 <_dtoa_r+0x300>)
 80071d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071da:	f7f9 f995 	bl	8000508 <__aeabi_dmul>
 80071de:	a37c      	add	r3, pc, #496	; (adr r3, 80073d0 <_dtoa_r+0x308>)
 80071e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e4:	f7f8 ffda 	bl	800019c <__adddf3>
 80071e8:	4606      	mov	r6, r0
 80071ea:	4628      	mov	r0, r5
 80071ec:	460f      	mov	r7, r1
 80071ee:	f7f9 f921 	bl	8000434 <__aeabi_i2d>
 80071f2:	a379      	add	r3, pc, #484	; (adr r3, 80073d8 <_dtoa_r+0x310>)
 80071f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f8:	f7f9 f986 	bl	8000508 <__aeabi_dmul>
 80071fc:	4602      	mov	r2, r0
 80071fe:	460b      	mov	r3, r1
 8007200:	4630      	mov	r0, r6
 8007202:	4639      	mov	r1, r7
 8007204:	f7f8 ffca 	bl	800019c <__adddf3>
 8007208:	4606      	mov	r6, r0
 800720a:	460f      	mov	r7, r1
 800720c:	f7f9 fc2c 	bl	8000a68 <__aeabi_d2iz>
 8007210:	2200      	movs	r2, #0
 8007212:	4682      	mov	sl, r0
 8007214:	2300      	movs	r3, #0
 8007216:	4630      	mov	r0, r6
 8007218:	4639      	mov	r1, r7
 800721a:	f7f9 fbe7 	bl	80009ec <__aeabi_dcmplt>
 800721e:	b148      	cbz	r0, 8007234 <_dtoa_r+0x16c>
 8007220:	4650      	mov	r0, sl
 8007222:	f7f9 f907 	bl	8000434 <__aeabi_i2d>
 8007226:	4632      	mov	r2, r6
 8007228:	463b      	mov	r3, r7
 800722a:	f7f9 fbd5 	bl	80009d8 <__aeabi_dcmpeq>
 800722e:	b908      	cbnz	r0, 8007234 <_dtoa_r+0x16c>
 8007230:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007234:	f1ba 0f16 	cmp.w	sl, #22
 8007238:	d85a      	bhi.n	80072f0 <_dtoa_r+0x228>
 800723a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800723e:	496d      	ldr	r1, [pc, #436]	; (80073f4 <_dtoa_r+0x32c>)
 8007240:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007244:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007248:	f7f9 fbee 	bl	8000a28 <__aeabi_dcmpgt>
 800724c:	2800      	cmp	r0, #0
 800724e:	d051      	beq.n	80072f4 <_dtoa_r+0x22c>
 8007250:	2300      	movs	r3, #0
 8007252:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007256:	930d      	str	r3, [sp, #52]	; 0x34
 8007258:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800725a:	1b5d      	subs	r5, r3, r5
 800725c:	1e6b      	subs	r3, r5, #1
 800725e:	9307      	str	r3, [sp, #28]
 8007260:	bf43      	ittte	mi
 8007262:	2300      	movmi	r3, #0
 8007264:	f1c5 0901 	rsbmi	r9, r5, #1
 8007268:	9307      	strmi	r3, [sp, #28]
 800726a:	f04f 0900 	movpl.w	r9, #0
 800726e:	f1ba 0f00 	cmp.w	sl, #0
 8007272:	db41      	blt.n	80072f8 <_dtoa_r+0x230>
 8007274:	9b07      	ldr	r3, [sp, #28]
 8007276:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800727a:	4453      	add	r3, sl
 800727c:	9307      	str	r3, [sp, #28]
 800727e:	2300      	movs	r3, #0
 8007280:	9308      	str	r3, [sp, #32]
 8007282:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007284:	2b09      	cmp	r3, #9
 8007286:	f200 808f 	bhi.w	80073a8 <_dtoa_r+0x2e0>
 800728a:	2b05      	cmp	r3, #5
 800728c:	bfc4      	itt	gt
 800728e:	3b04      	subgt	r3, #4
 8007290:	931e      	strgt	r3, [sp, #120]	; 0x78
 8007292:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007294:	bfc8      	it	gt
 8007296:	2500      	movgt	r5, #0
 8007298:	f1a3 0302 	sub.w	r3, r3, #2
 800729c:	bfd8      	it	le
 800729e:	2501      	movle	r5, #1
 80072a0:	2b03      	cmp	r3, #3
 80072a2:	f200 808d 	bhi.w	80073c0 <_dtoa_r+0x2f8>
 80072a6:	e8df f003 	tbb	[pc, r3]
 80072aa:	7d7b      	.short	0x7d7b
 80072ac:	6f2f      	.short	0x6f2f
 80072ae:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80072b2:	441d      	add	r5, r3
 80072b4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80072b8:	2820      	cmp	r0, #32
 80072ba:	dd13      	ble.n	80072e4 <_dtoa_r+0x21c>
 80072bc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80072c0:	9b02      	ldr	r3, [sp, #8]
 80072c2:	fa08 f800 	lsl.w	r8, r8, r0
 80072c6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80072ca:	fa23 f000 	lsr.w	r0, r3, r0
 80072ce:	ea48 0000 	orr.w	r0, r8, r0
 80072d2:	f7f9 f89f 	bl	8000414 <__aeabi_ui2d>
 80072d6:	2301      	movs	r3, #1
 80072d8:	4680      	mov	r8, r0
 80072da:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80072de:	3d01      	subs	r5, #1
 80072e0:	9310      	str	r3, [sp, #64]	; 0x40
 80072e2:	e771      	b.n	80071c8 <_dtoa_r+0x100>
 80072e4:	9b02      	ldr	r3, [sp, #8]
 80072e6:	f1c0 0020 	rsb	r0, r0, #32
 80072ea:	fa03 f000 	lsl.w	r0, r3, r0
 80072ee:	e7f0      	b.n	80072d2 <_dtoa_r+0x20a>
 80072f0:	2301      	movs	r3, #1
 80072f2:	e7b0      	b.n	8007256 <_dtoa_r+0x18e>
 80072f4:	900d      	str	r0, [sp, #52]	; 0x34
 80072f6:	e7af      	b.n	8007258 <_dtoa_r+0x190>
 80072f8:	f1ca 0300 	rsb	r3, sl, #0
 80072fc:	9308      	str	r3, [sp, #32]
 80072fe:	2300      	movs	r3, #0
 8007300:	eba9 090a 	sub.w	r9, r9, sl
 8007304:	930c      	str	r3, [sp, #48]	; 0x30
 8007306:	e7bc      	b.n	8007282 <_dtoa_r+0x1ba>
 8007308:	2301      	movs	r3, #1
 800730a:	9309      	str	r3, [sp, #36]	; 0x24
 800730c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800730e:	2b00      	cmp	r3, #0
 8007310:	dd74      	ble.n	80073fc <_dtoa_r+0x334>
 8007312:	4698      	mov	r8, r3
 8007314:	9304      	str	r3, [sp, #16]
 8007316:	2200      	movs	r2, #0
 8007318:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800731a:	6072      	str	r2, [r6, #4]
 800731c:	2204      	movs	r2, #4
 800731e:	f102 0014 	add.w	r0, r2, #20
 8007322:	4298      	cmp	r0, r3
 8007324:	6871      	ldr	r1, [r6, #4]
 8007326:	d96e      	bls.n	8007406 <_dtoa_r+0x33e>
 8007328:	4620      	mov	r0, r4
 800732a:	f000 fc99 	bl	8007c60 <_Balloc>
 800732e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007330:	6030      	str	r0, [r6, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f1b8 0f0e 	cmp.w	r8, #14
 8007338:	9306      	str	r3, [sp, #24]
 800733a:	f200 80ed 	bhi.w	8007518 <_dtoa_r+0x450>
 800733e:	2d00      	cmp	r5, #0
 8007340:	f000 80ea 	beq.w	8007518 <_dtoa_r+0x450>
 8007344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007348:	f1ba 0f00 	cmp.w	sl, #0
 800734c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007350:	dd77      	ble.n	8007442 <_dtoa_r+0x37a>
 8007352:	4a28      	ldr	r2, [pc, #160]	; (80073f4 <_dtoa_r+0x32c>)
 8007354:	f00a 030f 	and.w	r3, sl, #15
 8007358:	ea4f 162a 	mov.w	r6, sl, asr #4
 800735c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007360:	06f0      	lsls	r0, r6, #27
 8007362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007366:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800736a:	d568      	bpl.n	800743e <_dtoa_r+0x376>
 800736c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007370:	4b21      	ldr	r3, [pc, #132]	; (80073f8 <_dtoa_r+0x330>)
 8007372:	2503      	movs	r5, #3
 8007374:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007378:	f7f9 f9f0 	bl	800075c <__aeabi_ddiv>
 800737c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007380:	f006 060f 	and.w	r6, r6, #15
 8007384:	4f1c      	ldr	r7, [pc, #112]	; (80073f8 <_dtoa_r+0x330>)
 8007386:	e04f      	b.n	8007428 <_dtoa_r+0x360>
 8007388:	2301      	movs	r3, #1
 800738a:	9309      	str	r3, [sp, #36]	; 0x24
 800738c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800738e:	4453      	add	r3, sl
 8007390:	f103 0801 	add.w	r8, r3, #1
 8007394:	9304      	str	r3, [sp, #16]
 8007396:	4643      	mov	r3, r8
 8007398:	2b01      	cmp	r3, #1
 800739a:	bfb8      	it	lt
 800739c:	2301      	movlt	r3, #1
 800739e:	e7ba      	b.n	8007316 <_dtoa_r+0x24e>
 80073a0:	2300      	movs	r3, #0
 80073a2:	e7b2      	b.n	800730a <_dtoa_r+0x242>
 80073a4:	2300      	movs	r3, #0
 80073a6:	e7f0      	b.n	800738a <_dtoa_r+0x2c2>
 80073a8:	2501      	movs	r5, #1
 80073aa:	2300      	movs	r3, #0
 80073ac:	9509      	str	r5, [sp, #36]	; 0x24
 80073ae:	931e      	str	r3, [sp, #120]	; 0x78
 80073b0:	f04f 33ff 	mov.w	r3, #4294967295
 80073b4:	2200      	movs	r2, #0
 80073b6:	9304      	str	r3, [sp, #16]
 80073b8:	4698      	mov	r8, r3
 80073ba:	2312      	movs	r3, #18
 80073bc:	921f      	str	r2, [sp, #124]	; 0x7c
 80073be:	e7aa      	b.n	8007316 <_dtoa_r+0x24e>
 80073c0:	2301      	movs	r3, #1
 80073c2:	9309      	str	r3, [sp, #36]	; 0x24
 80073c4:	e7f4      	b.n	80073b0 <_dtoa_r+0x2e8>
 80073c6:	bf00      	nop
 80073c8:	636f4361 	.word	0x636f4361
 80073cc:	3fd287a7 	.word	0x3fd287a7
 80073d0:	8b60c8b3 	.word	0x8b60c8b3
 80073d4:	3fc68a28 	.word	0x3fc68a28
 80073d8:	509f79fb 	.word	0x509f79fb
 80073dc:	3fd34413 	.word	0x3fd34413
 80073e0:	7ff00000 	.word	0x7ff00000
 80073e4:	0800845b 	.word	0x0800845b
 80073e8:	08008452 	.word	0x08008452
 80073ec:	08008451 	.word	0x08008451
 80073f0:	3ff80000 	.word	0x3ff80000
 80073f4:	08008488 	.word	0x08008488
 80073f8:	08008460 	.word	0x08008460
 80073fc:	2301      	movs	r3, #1
 80073fe:	9304      	str	r3, [sp, #16]
 8007400:	4698      	mov	r8, r3
 8007402:	461a      	mov	r2, r3
 8007404:	e7da      	b.n	80073bc <_dtoa_r+0x2f4>
 8007406:	3101      	adds	r1, #1
 8007408:	6071      	str	r1, [r6, #4]
 800740a:	0052      	lsls	r2, r2, #1
 800740c:	e787      	b.n	800731e <_dtoa_r+0x256>
 800740e:	07f1      	lsls	r1, r6, #31
 8007410:	d508      	bpl.n	8007424 <_dtoa_r+0x35c>
 8007412:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007416:	e9d7 2300 	ldrd	r2, r3, [r7]
 800741a:	f7f9 f875 	bl	8000508 <__aeabi_dmul>
 800741e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007422:	3501      	adds	r5, #1
 8007424:	1076      	asrs	r6, r6, #1
 8007426:	3708      	adds	r7, #8
 8007428:	2e00      	cmp	r6, #0
 800742a:	d1f0      	bne.n	800740e <_dtoa_r+0x346>
 800742c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007430:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007434:	f7f9 f992 	bl	800075c <__aeabi_ddiv>
 8007438:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800743c:	e01b      	b.n	8007476 <_dtoa_r+0x3ae>
 800743e:	2502      	movs	r5, #2
 8007440:	e7a0      	b.n	8007384 <_dtoa_r+0x2bc>
 8007442:	f000 80a4 	beq.w	800758e <_dtoa_r+0x4c6>
 8007446:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800744a:	f1ca 0600 	rsb	r6, sl, #0
 800744e:	4ba0      	ldr	r3, [pc, #640]	; (80076d0 <_dtoa_r+0x608>)
 8007450:	f006 020f 	and.w	r2, r6, #15
 8007454:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745c:	f7f9 f854 	bl	8000508 <__aeabi_dmul>
 8007460:	2502      	movs	r5, #2
 8007462:	2300      	movs	r3, #0
 8007464:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007468:	4f9a      	ldr	r7, [pc, #616]	; (80076d4 <_dtoa_r+0x60c>)
 800746a:	1136      	asrs	r6, r6, #4
 800746c:	2e00      	cmp	r6, #0
 800746e:	f040 8083 	bne.w	8007578 <_dtoa_r+0x4b0>
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1e0      	bne.n	8007438 <_dtoa_r+0x370>
 8007476:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007478:	2b00      	cmp	r3, #0
 800747a:	f000 808a 	beq.w	8007592 <_dtoa_r+0x4ca>
 800747e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007482:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007486:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800748a:	2200      	movs	r2, #0
 800748c:	4b92      	ldr	r3, [pc, #584]	; (80076d8 <_dtoa_r+0x610>)
 800748e:	f7f9 faad 	bl	80009ec <__aeabi_dcmplt>
 8007492:	2800      	cmp	r0, #0
 8007494:	d07d      	beq.n	8007592 <_dtoa_r+0x4ca>
 8007496:	f1b8 0f00 	cmp.w	r8, #0
 800749a:	d07a      	beq.n	8007592 <_dtoa_r+0x4ca>
 800749c:	9b04      	ldr	r3, [sp, #16]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	dd36      	ble.n	8007510 <_dtoa_r+0x448>
 80074a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80074a6:	2200      	movs	r2, #0
 80074a8:	4b8c      	ldr	r3, [pc, #560]	; (80076dc <_dtoa_r+0x614>)
 80074aa:	f7f9 f82d 	bl	8000508 <__aeabi_dmul>
 80074ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074b2:	9e04      	ldr	r6, [sp, #16]
 80074b4:	f10a 37ff 	add.w	r7, sl, #4294967295
 80074b8:	3501      	adds	r5, #1
 80074ba:	4628      	mov	r0, r5
 80074bc:	f7f8 ffba 	bl	8000434 <__aeabi_i2d>
 80074c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074c4:	f7f9 f820 	bl	8000508 <__aeabi_dmul>
 80074c8:	2200      	movs	r2, #0
 80074ca:	4b85      	ldr	r3, [pc, #532]	; (80076e0 <_dtoa_r+0x618>)
 80074cc:	f7f8 fe66 	bl	800019c <__adddf3>
 80074d0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80074d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80074d8:	950b      	str	r5, [sp, #44]	; 0x2c
 80074da:	2e00      	cmp	r6, #0
 80074dc:	d15c      	bne.n	8007598 <_dtoa_r+0x4d0>
 80074de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074e2:	2200      	movs	r2, #0
 80074e4:	4b7f      	ldr	r3, [pc, #508]	; (80076e4 <_dtoa_r+0x61c>)
 80074e6:	f7f8 fe57 	bl	8000198 <__aeabi_dsub>
 80074ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074ec:	462b      	mov	r3, r5
 80074ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074f2:	f7f9 fa99 	bl	8000a28 <__aeabi_dcmpgt>
 80074f6:	2800      	cmp	r0, #0
 80074f8:	f040 8281 	bne.w	80079fe <_dtoa_r+0x936>
 80074fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007500:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007502:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007506:	f7f9 fa71 	bl	80009ec <__aeabi_dcmplt>
 800750a:	2800      	cmp	r0, #0
 800750c:	f040 8275 	bne.w	80079fa <_dtoa_r+0x932>
 8007510:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007514:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007518:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800751a:	2b00      	cmp	r3, #0
 800751c:	f2c0 814b 	blt.w	80077b6 <_dtoa_r+0x6ee>
 8007520:	f1ba 0f0e 	cmp.w	sl, #14
 8007524:	f300 8147 	bgt.w	80077b6 <_dtoa_r+0x6ee>
 8007528:	4b69      	ldr	r3, [pc, #420]	; (80076d0 <_dtoa_r+0x608>)
 800752a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800752e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007532:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007536:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007538:	2b00      	cmp	r3, #0
 800753a:	f280 80d7 	bge.w	80076ec <_dtoa_r+0x624>
 800753e:	f1b8 0f00 	cmp.w	r8, #0
 8007542:	f300 80d3 	bgt.w	80076ec <_dtoa_r+0x624>
 8007546:	f040 8257 	bne.w	80079f8 <_dtoa_r+0x930>
 800754a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800754e:	2200      	movs	r2, #0
 8007550:	4b64      	ldr	r3, [pc, #400]	; (80076e4 <_dtoa_r+0x61c>)
 8007552:	f7f8 ffd9 	bl	8000508 <__aeabi_dmul>
 8007556:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800755a:	f7f9 fa5b 	bl	8000a14 <__aeabi_dcmpge>
 800755e:	4646      	mov	r6, r8
 8007560:	4647      	mov	r7, r8
 8007562:	2800      	cmp	r0, #0
 8007564:	f040 822d 	bne.w	80079c2 <_dtoa_r+0x8fa>
 8007568:	9b06      	ldr	r3, [sp, #24]
 800756a:	9a06      	ldr	r2, [sp, #24]
 800756c:	1c5d      	adds	r5, r3, #1
 800756e:	2331      	movs	r3, #49	; 0x31
 8007570:	f10a 0a01 	add.w	sl, sl, #1
 8007574:	7013      	strb	r3, [r2, #0]
 8007576:	e228      	b.n	80079ca <_dtoa_r+0x902>
 8007578:	07f2      	lsls	r2, r6, #31
 800757a:	d505      	bpl.n	8007588 <_dtoa_r+0x4c0>
 800757c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007580:	f7f8 ffc2 	bl	8000508 <__aeabi_dmul>
 8007584:	2301      	movs	r3, #1
 8007586:	3501      	adds	r5, #1
 8007588:	1076      	asrs	r6, r6, #1
 800758a:	3708      	adds	r7, #8
 800758c:	e76e      	b.n	800746c <_dtoa_r+0x3a4>
 800758e:	2502      	movs	r5, #2
 8007590:	e771      	b.n	8007476 <_dtoa_r+0x3ae>
 8007592:	4657      	mov	r7, sl
 8007594:	4646      	mov	r6, r8
 8007596:	e790      	b.n	80074ba <_dtoa_r+0x3f2>
 8007598:	4b4d      	ldr	r3, [pc, #308]	; (80076d0 <_dtoa_r+0x608>)
 800759a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800759e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80075a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d048      	beq.n	800763a <_dtoa_r+0x572>
 80075a8:	4602      	mov	r2, r0
 80075aa:	460b      	mov	r3, r1
 80075ac:	2000      	movs	r0, #0
 80075ae:	494e      	ldr	r1, [pc, #312]	; (80076e8 <_dtoa_r+0x620>)
 80075b0:	f7f9 f8d4 	bl	800075c <__aeabi_ddiv>
 80075b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80075b8:	f7f8 fdee 	bl	8000198 <__aeabi_dsub>
 80075bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80075c0:	9d06      	ldr	r5, [sp, #24]
 80075c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075c6:	f7f9 fa4f 	bl	8000a68 <__aeabi_d2iz>
 80075ca:	9011      	str	r0, [sp, #68]	; 0x44
 80075cc:	f7f8 ff32 	bl	8000434 <__aeabi_i2d>
 80075d0:	4602      	mov	r2, r0
 80075d2:	460b      	mov	r3, r1
 80075d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075d8:	f7f8 fdde 	bl	8000198 <__aeabi_dsub>
 80075dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075e2:	3330      	adds	r3, #48	; 0x30
 80075e4:	f805 3b01 	strb.w	r3, [r5], #1
 80075e8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80075ec:	f7f9 f9fe 	bl	80009ec <__aeabi_dcmplt>
 80075f0:	2800      	cmp	r0, #0
 80075f2:	d163      	bne.n	80076bc <_dtoa_r+0x5f4>
 80075f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075f8:	2000      	movs	r0, #0
 80075fa:	4937      	ldr	r1, [pc, #220]	; (80076d8 <_dtoa_r+0x610>)
 80075fc:	f7f8 fdcc 	bl	8000198 <__aeabi_dsub>
 8007600:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007604:	f7f9 f9f2 	bl	80009ec <__aeabi_dcmplt>
 8007608:	2800      	cmp	r0, #0
 800760a:	f040 80b5 	bne.w	8007778 <_dtoa_r+0x6b0>
 800760e:	9b06      	ldr	r3, [sp, #24]
 8007610:	1aeb      	subs	r3, r5, r3
 8007612:	429e      	cmp	r6, r3
 8007614:	f77f af7c 	ble.w	8007510 <_dtoa_r+0x448>
 8007618:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800761c:	2200      	movs	r2, #0
 800761e:	4b2f      	ldr	r3, [pc, #188]	; (80076dc <_dtoa_r+0x614>)
 8007620:	f7f8 ff72 	bl	8000508 <__aeabi_dmul>
 8007624:	2200      	movs	r2, #0
 8007626:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800762a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800762e:	4b2b      	ldr	r3, [pc, #172]	; (80076dc <_dtoa_r+0x614>)
 8007630:	f7f8 ff6a 	bl	8000508 <__aeabi_dmul>
 8007634:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007638:	e7c3      	b.n	80075c2 <_dtoa_r+0x4fa>
 800763a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800763e:	f7f8 ff63 	bl	8000508 <__aeabi_dmul>
 8007642:	9b06      	ldr	r3, [sp, #24]
 8007644:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007648:	199d      	adds	r5, r3, r6
 800764a:	461e      	mov	r6, r3
 800764c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007650:	f7f9 fa0a 	bl	8000a68 <__aeabi_d2iz>
 8007654:	9011      	str	r0, [sp, #68]	; 0x44
 8007656:	f7f8 feed 	bl	8000434 <__aeabi_i2d>
 800765a:	4602      	mov	r2, r0
 800765c:	460b      	mov	r3, r1
 800765e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007662:	f7f8 fd99 	bl	8000198 <__aeabi_dsub>
 8007666:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007668:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800766c:	3330      	adds	r3, #48	; 0x30
 800766e:	f806 3b01 	strb.w	r3, [r6], #1
 8007672:	42ae      	cmp	r6, r5
 8007674:	f04f 0200 	mov.w	r2, #0
 8007678:	d124      	bne.n	80076c4 <_dtoa_r+0x5fc>
 800767a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800767e:	4b1a      	ldr	r3, [pc, #104]	; (80076e8 <_dtoa_r+0x620>)
 8007680:	f7f8 fd8c 	bl	800019c <__adddf3>
 8007684:	4602      	mov	r2, r0
 8007686:	460b      	mov	r3, r1
 8007688:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800768c:	f7f9 f9cc 	bl	8000a28 <__aeabi_dcmpgt>
 8007690:	2800      	cmp	r0, #0
 8007692:	d171      	bne.n	8007778 <_dtoa_r+0x6b0>
 8007694:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007698:	2000      	movs	r0, #0
 800769a:	4913      	ldr	r1, [pc, #76]	; (80076e8 <_dtoa_r+0x620>)
 800769c:	f7f8 fd7c 	bl	8000198 <__aeabi_dsub>
 80076a0:	4602      	mov	r2, r0
 80076a2:	460b      	mov	r3, r1
 80076a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076a8:	f7f9 f9a0 	bl	80009ec <__aeabi_dcmplt>
 80076ac:	2800      	cmp	r0, #0
 80076ae:	f43f af2f 	beq.w	8007510 <_dtoa_r+0x448>
 80076b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80076b6:	1e6a      	subs	r2, r5, #1
 80076b8:	2b30      	cmp	r3, #48	; 0x30
 80076ba:	d001      	beq.n	80076c0 <_dtoa_r+0x5f8>
 80076bc:	46ba      	mov	sl, r7
 80076be:	e04a      	b.n	8007756 <_dtoa_r+0x68e>
 80076c0:	4615      	mov	r5, r2
 80076c2:	e7f6      	b.n	80076b2 <_dtoa_r+0x5ea>
 80076c4:	4b05      	ldr	r3, [pc, #20]	; (80076dc <_dtoa_r+0x614>)
 80076c6:	f7f8 ff1f 	bl	8000508 <__aeabi_dmul>
 80076ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076ce:	e7bd      	b.n	800764c <_dtoa_r+0x584>
 80076d0:	08008488 	.word	0x08008488
 80076d4:	08008460 	.word	0x08008460
 80076d8:	3ff00000 	.word	0x3ff00000
 80076dc:	40240000 	.word	0x40240000
 80076e0:	401c0000 	.word	0x401c0000
 80076e4:	40140000 	.word	0x40140000
 80076e8:	3fe00000 	.word	0x3fe00000
 80076ec:	9d06      	ldr	r5, [sp, #24]
 80076ee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80076f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076f6:	4630      	mov	r0, r6
 80076f8:	4639      	mov	r1, r7
 80076fa:	f7f9 f82f 	bl	800075c <__aeabi_ddiv>
 80076fe:	f7f9 f9b3 	bl	8000a68 <__aeabi_d2iz>
 8007702:	4681      	mov	r9, r0
 8007704:	f7f8 fe96 	bl	8000434 <__aeabi_i2d>
 8007708:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800770c:	f7f8 fefc 	bl	8000508 <__aeabi_dmul>
 8007710:	4602      	mov	r2, r0
 8007712:	460b      	mov	r3, r1
 8007714:	4630      	mov	r0, r6
 8007716:	4639      	mov	r1, r7
 8007718:	f7f8 fd3e 	bl	8000198 <__aeabi_dsub>
 800771c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8007720:	f805 6b01 	strb.w	r6, [r5], #1
 8007724:	9e06      	ldr	r6, [sp, #24]
 8007726:	4602      	mov	r2, r0
 8007728:	1bae      	subs	r6, r5, r6
 800772a:	45b0      	cmp	r8, r6
 800772c:	460b      	mov	r3, r1
 800772e:	d135      	bne.n	800779c <_dtoa_r+0x6d4>
 8007730:	f7f8 fd34 	bl	800019c <__adddf3>
 8007734:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007738:	4606      	mov	r6, r0
 800773a:	460f      	mov	r7, r1
 800773c:	f7f9 f974 	bl	8000a28 <__aeabi_dcmpgt>
 8007740:	b9c8      	cbnz	r0, 8007776 <_dtoa_r+0x6ae>
 8007742:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007746:	4630      	mov	r0, r6
 8007748:	4639      	mov	r1, r7
 800774a:	f7f9 f945 	bl	80009d8 <__aeabi_dcmpeq>
 800774e:	b110      	cbz	r0, 8007756 <_dtoa_r+0x68e>
 8007750:	f019 0f01 	tst.w	r9, #1
 8007754:	d10f      	bne.n	8007776 <_dtoa_r+0x6ae>
 8007756:	4659      	mov	r1, fp
 8007758:	4620      	mov	r0, r4
 800775a:	f000 fab5 	bl	8007cc8 <_Bfree>
 800775e:	2300      	movs	r3, #0
 8007760:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007762:	702b      	strb	r3, [r5, #0]
 8007764:	f10a 0301 	add.w	r3, sl, #1
 8007768:	6013      	str	r3, [r2, #0]
 800776a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800776c:	2b00      	cmp	r3, #0
 800776e:	f43f acf3 	beq.w	8007158 <_dtoa_r+0x90>
 8007772:	601d      	str	r5, [r3, #0]
 8007774:	e4f0      	b.n	8007158 <_dtoa_r+0x90>
 8007776:	4657      	mov	r7, sl
 8007778:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800777c:	1e6b      	subs	r3, r5, #1
 800777e:	2a39      	cmp	r2, #57	; 0x39
 8007780:	d106      	bne.n	8007790 <_dtoa_r+0x6c8>
 8007782:	9a06      	ldr	r2, [sp, #24]
 8007784:	429a      	cmp	r2, r3
 8007786:	d107      	bne.n	8007798 <_dtoa_r+0x6d0>
 8007788:	2330      	movs	r3, #48	; 0x30
 800778a:	7013      	strb	r3, [r2, #0]
 800778c:	4613      	mov	r3, r2
 800778e:	3701      	adds	r7, #1
 8007790:	781a      	ldrb	r2, [r3, #0]
 8007792:	3201      	adds	r2, #1
 8007794:	701a      	strb	r2, [r3, #0]
 8007796:	e791      	b.n	80076bc <_dtoa_r+0x5f4>
 8007798:	461d      	mov	r5, r3
 800779a:	e7ed      	b.n	8007778 <_dtoa_r+0x6b0>
 800779c:	2200      	movs	r2, #0
 800779e:	4b99      	ldr	r3, [pc, #612]	; (8007a04 <_dtoa_r+0x93c>)
 80077a0:	f7f8 feb2 	bl	8000508 <__aeabi_dmul>
 80077a4:	2200      	movs	r2, #0
 80077a6:	2300      	movs	r3, #0
 80077a8:	4606      	mov	r6, r0
 80077aa:	460f      	mov	r7, r1
 80077ac:	f7f9 f914 	bl	80009d8 <__aeabi_dcmpeq>
 80077b0:	2800      	cmp	r0, #0
 80077b2:	d09e      	beq.n	80076f2 <_dtoa_r+0x62a>
 80077b4:	e7cf      	b.n	8007756 <_dtoa_r+0x68e>
 80077b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077b8:	2a00      	cmp	r2, #0
 80077ba:	f000 8088 	beq.w	80078ce <_dtoa_r+0x806>
 80077be:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80077c0:	2a01      	cmp	r2, #1
 80077c2:	dc6d      	bgt.n	80078a0 <_dtoa_r+0x7d8>
 80077c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80077c6:	2a00      	cmp	r2, #0
 80077c8:	d066      	beq.n	8007898 <_dtoa_r+0x7d0>
 80077ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80077ce:	464d      	mov	r5, r9
 80077d0:	9e08      	ldr	r6, [sp, #32]
 80077d2:	9a07      	ldr	r2, [sp, #28]
 80077d4:	2101      	movs	r1, #1
 80077d6:	441a      	add	r2, r3
 80077d8:	4620      	mov	r0, r4
 80077da:	4499      	add	r9, r3
 80077dc:	9207      	str	r2, [sp, #28]
 80077de:	f000 fb13 	bl	8007e08 <__i2b>
 80077e2:	4607      	mov	r7, r0
 80077e4:	2d00      	cmp	r5, #0
 80077e6:	dd0b      	ble.n	8007800 <_dtoa_r+0x738>
 80077e8:	9b07      	ldr	r3, [sp, #28]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	dd08      	ble.n	8007800 <_dtoa_r+0x738>
 80077ee:	42ab      	cmp	r3, r5
 80077f0:	bfa8      	it	ge
 80077f2:	462b      	movge	r3, r5
 80077f4:	9a07      	ldr	r2, [sp, #28]
 80077f6:	eba9 0903 	sub.w	r9, r9, r3
 80077fa:	1aed      	subs	r5, r5, r3
 80077fc:	1ad3      	subs	r3, r2, r3
 80077fe:	9307      	str	r3, [sp, #28]
 8007800:	9b08      	ldr	r3, [sp, #32]
 8007802:	b1eb      	cbz	r3, 8007840 <_dtoa_r+0x778>
 8007804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007806:	2b00      	cmp	r3, #0
 8007808:	d065      	beq.n	80078d6 <_dtoa_r+0x80e>
 800780a:	b18e      	cbz	r6, 8007830 <_dtoa_r+0x768>
 800780c:	4639      	mov	r1, r7
 800780e:	4632      	mov	r2, r6
 8007810:	4620      	mov	r0, r4
 8007812:	f000 fb97 	bl	8007f44 <__pow5mult>
 8007816:	465a      	mov	r2, fp
 8007818:	4601      	mov	r1, r0
 800781a:	4607      	mov	r7, r0
 800781c:	4620      	mov	r0, r4
 800781e:	f000 fafc 	bl	8007e1a <__multiply>
 8007822:	4659      	mov	r1, fp
 8007824:	900a      	str	r0, [sp, #40]	; 0x28
 8007826:	4620      	mov	r0, r4
 8007828:	f000 fa4e 	bl	8007cc8 <_Bfree>
 800782c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800782e:	469b      	mov	fp, r3
 8007830:	9b08      	ldr	r3, [sp, #32]
 8007832:	1b9a      	subs	r2, r3, r6
 8007834:	d004      	beq.n	8007840 <_dtoa_r+0x778>
 8007836:	4659      	mov	r1, fp
 8007838:	4620      	mov	r0, r4
 800783a:	f000 fb83 	bl	8007f44 <__pow5mult>
 800783e:	4683      	mov	fp, r0
 8007840:	2101      	movs	r1, #1
 8007842:	4620      	mov	r0, r4
 8007844:	f000 fae0 	bl	8007e08 <__i2b>
 8007848:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800784a:	4606      	mov	r6, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	f000 81c6 	beq.w	8007bde <_dtoa_r+0xb16>
 8007852:	461a      	mov	r2, r3
 8007854:	4601      	mov	r1, r0
 8007856:	4620      	mov	r0, r4
 8007858:	f000 fb74 	bl	8007f44 <__pow5mult>
 800785c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800785e:	4606      	mov	r6, r0
 8007860:	2b01      	cmp	r3, #1
 8007862:	dc3e      	bgt.n	80078e2 <_dtoa_r+0x81a>
 8007864:	9b02      	ldr	r3, [sp, #8]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d137      	bne.n	80078da <_dtoa_r+0x812>
 800786a:	9b03      	ldr	r3, [sp, #12]
 800786c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007870:	2b00      	cmp	r3, #0
 8007872:	d134      	bne.n	80078de <_dtoa_r+0x816>
 8007874:	9b03      	ldr	r3, [sp, #12]
 8007876:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800787a:	0d1b      	lsrs	r3, r3, #20
 800787c:	051b      	lsls	r3, r3, #20
 800787e:	b12b      	cbz	r3, 800788c <_dtoa_r+0x7c4>
 8007880:	9b07      	ldr	r3, [sp, #28]
 8007882:	f109 0901 	add.w	r9, r9, #1
 8007886:	3301      	adds	r3, #1
 8007888:	9307      	str	r3, [sp, #28]
 800788a:	2301      	movs	r3, #1
 800788c:	9308      	str	r3, [sp, #32]
 800788e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007890:	2b00      	cmp	r3, #0
 8007892:	d128      	bne.n	80078e6 <_dtoa_r+0x81e>
 8007894:	2001      	movs	r0, #1
 8007896:	e02e      	b.n	80078f6 <_dtoa_r+0x82e>
 8007898:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800789a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800789e:	e796      	b.n	80077ce <_dtoa_r+0x706>
 80078a0:	9b08      	ldr	r3, [sp, #32]
 80078a2:	f108 36ff 	add.w	r6, r8, #4294967295
 80078a6:	42b3      	cmp	r3, r6
 80078a8:	bfb7      	itett	lt
 80078aa:	9b08      	ldrlt	r3, [sp, #32]
 80078ac:	1b9e      	subge	r6, r3, r6
 80078ae:	1af2      	sublt	r2, r6, r3
 80078b0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80078b2:	bfbf      	itttt	lt
 80078b4:	9608      	strlt	r6, [sp, #32]
 80078b6:	189b      	addlt	r3, r3, r2
 80078b8:	930c      	strlt	r3, [sp, #48]	; 0x30
 80078ba:	2600      	movlt	r6, #0
 80078bc:	f1b8 0f00 	cmp.w	r8, #0
 80078c0:	bfb9      	ittee	lt
 80078c2:	eba9 0508 	sublt.w	r5, r9, r8
 80078c6:	2300      	movlt	r3, #0
 80078c8:	464d      	movge	r5, r9
 80078ca:	4643      	movge	r3, r8
 80078cc:	e781      	b.n	80077d2 <_dtoa_r+0x70a>
 80078ce:	9e08      	ldr	r6, [sp, #32]
 80078d0:	464d      	mov	r5, r9
 80078d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80078d4:	e786      	b.n	80077e4 <_dtoa_r+0x71c>
 80078d6:	9a08      	ldr	r2, [sp, #32]
 80078d8:	e7ad      	b.n	8007836 <_dtoa_r+0x76e>
 80078da:	2300      	movs	r3, #0
 80078dc:	e7d6      	b.n	800788c <_dtoa_r+0x7c4>
 80078de:	9b02      	ldr	r3, [sp, #8]
 80078e0:	e7d4      	b.n	800788c <_dtoa_r+0x7c4>
 80078e2:	2300      	movs	r3, #0
 80078e4:	9308      	str	r3, [sp, #32]
 80078e6:	6933      	ldr	r3, [r6, #16]
 80078e8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80078ec:	6918      	ldr	r0, [r3, #16]
 80078ee:	f000 fa3d 	bl	8007d6c <__hi0bits>
 80078f2:	f1c0 0020 	rsb	r0, r0, #32
 80078f6:	9b07      	ldr	r3, [sp, #28]
 80078f8:	4418      	add	r0, r3
 80078fa:	f010 001f 	ands.w	r0, r0, #31
 80078fe:	d047      	beq.n	8007990 <_dtoa_r+0x8c8>
 8007900:	f1c0 0320 	rsb	r3, r0, #32
 8007904:	2b04      	cmp	r3, #4
 8007906:	dd3b      	ble.n	8007980 <_dtoa_r+0x8b8>
 8007908:	9b07      	ldr	r3, [sp, #28]
 800790a:	f1c0 001c 	rsb	r0, r0, #28
 800790e:	4481      	add	r9, r0
 8007910:	4405      	add	r5, r0
 8007912:	4403      	add	r3, r0
 8007914:	9307      	str	r3, [sp, #28]
 8007916:	f1b9 0f00 	cmp.w	r9, #0
 800791a:	dd05      	ble.n	8007928 <_dtoa_r+0x860>
 800791c:	4659      	mov	r1, fp
 800791e:	464a      	mov	r2, r9
 8007920:	4620      	mov	r0, r4
 8007922:	f000 fb5d 	bl	8007fe0 <__lshift>
 8007926:	4683      	mov	fp, r0
 8007928:	9b07      	ldr	r3, [sp, #28]
 800792a:	2b00      	cmp	r3, #0
 800792c:	dd05      	ble.n	800793a <_dtoa_r+0x872>
 800792e:	4631      	mov	r1, r6
 8007930:	461a      	mov	r2, r3
 8007932:	4620      	mov	r0, r4
 8007934:	f000 fb54 	bl	8007fe0 <__lshift>
 8007938:	4606      	mov	r6, r0
 800793a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800793c:	b353      	cbz	r3, 8007994 <_dtoa_r+0x8cc>
 800793e:	4631      	mov	r1, r6
 8007940:	4658      	mov	r0, fp
 8007942:	f000 fba1 	bl	8008088 <__mcmp>
 8007946:	2800      	cmp	r0, #0
 8007948:	da24      	bge.n	8007994 <_dtoa_r+0x8cc>
 800794a:	2300      	movs	r3, #0
 800794c:	4659      	mov	r1, fp
 800794e:	220a      	movs	r2, #10
 8007950:	4620      	mov	r0, r4
 8007952:	f000 f9d0 	bl	8007cf6 <__multadd>
 8007956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007958:	f10a 3aff 	add.w	sl, sl, #4294967295
 800795c:	4683      	mov	fp, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	f000 8144 	beq.w	8007bec <_dtoa_r+0xb24>
 8007964:	2300      	movs	r3, #0
 8007966:	4639      	mov	r1, r7
 8007968:	220a      	movs	r2, #10
 800796a:	4620      	mov	r0, r4
 800796c:	f000 f9c3 	bl	8007cf6 <__multadd>
 8007970:	9b04      	ldr	r3, [sp, #16]
 8007972:	4607      	mov	r7, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	dc4d      	bgt.n	8007a14 <_dtoa_r+0x94c>
 8007978:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800797a:	2b02      	cmp	r3, #2
 800797c:	dd4a      	ble.n	8007a14 <_dtoa_r+0x94c>
 800797e:	e011      	b.n	80079a4 <_dtoa_r+0x8dc>
 8007980:	d0c9      	beq.n	8007916 <_dtoa_r+0x84e>
 8007982:	9a07      	ldr	r2, [sp, #28]
 8007984:	331c      	adds	r3, #28
 8007986:	441a      	add	r2, r3
 8007988:	4499      	add	r9, r3
 800798a:	441d      	add	r5, r3
 800798c:	4613      	mov	r3, r2
 800798e:	e7c1      	b.n	8007914 <_dtoa_r+0x84c>
 8007990:	4603      	mov	r3, r0
 8007992:	e7f6      	b.n	8007982 <_dtoa_r+0x8ba>
 8007994:	f1b8 0f00 	cmp.w	r8, #0
 8007998:	dc36      	bgt.n	8007a08 <_dtoa_r+0x940>
 800799a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800799c:	2b02      	cmp	r3, #2
 800799e:	dd33      	ble.n	8007a08 <_dtoa_r+0x940>
 80079a0:	f8cd 8010 	str.w	r8, [sp, #16]
 80079a4:	9b04      	ldr	r3, [sp, #16]
 80079a6:	b963      	cbnz	r3, 80079c2 <_dtoa_r+0x8fa>
 80079a8:	4631      	mov	r1, r6
 80079aa:	2205      	movs	r2, #5
 80079ac:	4620      	mov	r0, r4
 80079ae:	f000 f9a2 	bl	8007cf6 <__multadd>
 80079b2:	4601      	mov	r1, r0
 80079b4:	4606      	mov	r6, r0
 80079b6:	4658      	mov	r0, fp
 80079b8:	f000 fb66 	bl	8008088 <__mcmp>
 80079bc:	2800      	cmp	r0, #0
 80079be:	f73f add3 	bgt.w	8007568 <_dtoa_r+0x4a0>
 80079c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80079c4:	9d06      	ldr	r5, [sp, #24]
 80079c6:	ea6f 0a03 	mvn.w	sl, r3
 80079ca:	f04f 0900 	mov.w	r9, #0
 80079ce:	4631      	mov	r1, r6
 80079d0:	4620      	mov	r0, r4
 80079d2:	f000 f979 	bl	8007cc8 <_Bfree>
 80079d6:	2f00      	cmp	r7, #0
 80079d8:	f43f aebd 	beq.w	8007756 <_dtoa_r+0x68e>
 80079dc:	f1b9 0f00 	cmp.w	r9, #0
 80079e0:	d005      	beq.n	80079ee <_dtoa_r+0x926>
 80079e2:	45b9      	cmp	r9, r7
 80079e4:	d003      	beq.n	80079ee <_dtoa_r+0x926>
 80079e6:	4649      	mov	r1, r9
 80079e8:	4620      	mov	r0, r4
 80079ea:	f000 f96d 	bl	8007cc8 <_Bfree>
 80079ee:	4639      	mov	r1, r7
 80079f0:	4620      	mov	r0, r4
 80079f2:	f000 f969 	bl	8007cc8 <_Bfree>
 80079f6:	e6ae      	b.n	8007756 <_dtoa_r+0x68e>
 80079f8:	2600      	movs	r6, #0
 80079fa:	4637      	mov	r7, r6
 80079fc:	e7e1      	b.n	80079c2 <_dtoa_r+0x8fa>
 80079fe:	46ba      	mov	sl, r7
 8007a00:	4637      	mov	r7, r6
 8007a02:	e5b1      	b.n	8007568 <_dtoa_r+0x4a0>
 8007a04:	40240000 	.word	0x40240000
 8007a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a0a:	f8cd 8010 	str.w	r8, [sp, #16]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f000 80f3 	beq.w	8007bfa <_dtoa_r+0xb32>
 8007a14:	2d00      	cmp	r5, #0
 8007a16:	dd05      	ble.n	8007a24 <_dtoa_r+0x95c>
 8007a18:	4639      	mov	r1, r7
 8007a1a:	462a      	mov	r2, r5
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f000 fadf 	bl	8007fe0 <__lshift>
 8007a22:	4607      	mov	r7, r0
 8007a24:	9b08      	ldr	r3, [sp, #32]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d04c      	beq.n	8007ac4 <_dtoa_r+0x9fc>
 8007a2a:	6879      	ldr	r1, [r7, #4]
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	f000 f917 	bl	8007c60 <_Balloc>
 8007a32:	4605      	mov	r5, r0
 8007a34:	693a      	ldr	r2, [r7, #16]
 8007a36:	f107 010c 	add.w	r1, r7, #12
 8007a3a:	3202      	adds	r2, #2
 8007a3c:	0092      	lsls	r2, r2, #2
 8007a3e:	300c      	adds	r0, #12
 8007a40:	f7fe fee8 	bl	8006814 <memcpy>
 8007a44:	2201      	movs	r2, #1
 8007a46:	4629      	mov	r1, r5
 8007a48:	4620      	mov	r0, r4
 8007a4a:	f000 fac9 	bl	8007fe0 <__lshift>
 8007a4e:	46b9      	mov	r9, r7
 8007a50:	4607      	mov	r7, r0
 8007a52:	9b06      	ldr	r3, [sp, #24]
 8007a54:	9307      	str	r3, [sp, #28]
 8007a56:	9b02      	ldr	r3, [sp, #8]
 8007a58:	f003 0301 	and.w	r3, r3, #1
 8007a5c:	9308      	str	r3, [sp, #32]
 8007a5e:	4631      	mov	r1, r6
 8007a60:	4658      	mov	r0, fp
 8007a62:	f7ff faa1 	bl	8006fa8 <quorem>
 8007a66:	4649      	mov	r1, r9
 8007a68:	4605      	mov	r5, r0
 8007a6a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007a6e:	4658      	mov	r0, fp
 8007a70:	f000 fb0a 	bl	8008088 <__mcmp>
 8007a74:	463a      	mov	r2, r7
 8007a76:	9002      	str	r0, [sp, #8]
 8007a78:	4631      	mov	r1, r6
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f000 fb1e 	bl	80080bc <__mdiff>
 8007a80:	68c3      	ldr	r3, [r0, #12]
 8007a82:	4602      	mov	r2, r0
 8007a84:	bb03      	cbnz	r3, 8007ac8 <_dtoa_r+0xa00>
 8007a86:	4601      	mov	r1, r0
 8007a88:	9009      	str	r0, [sp, #36]	; 0x24
 8007a8a:	4658      	mov	r0, fp
 8007a8c:	f000 fafc 	bl	8008088 <__mcmp>
 8007a90:	4603      	mov	r3, r0
 8007a92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a94:	4611      	mov	r1, r2
 8007a96:	4620      	mov	r0, r4
 8007a98:	9309      	str	r3, [sp, #36]	; 0x24
 8007a9a:	f000 f915 	bl	8007cc8 <_Bfree>
 8007a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aa0:	b9a3      	cbnz	r3, 8007acc <_dtoa_r+0xa04>
 8007aa2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007aa4:	b992      	cbnz	r2, 8007acc <_dtoa_r+0xa04>
 8007aa6:	9a08      	ldr	r2, [sp, #32]
 8007aa8:	b982      	cbnz	r2, 8007acc <_dtoa_r+0xa04>
 8007aaa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007aae:	d029      	beq.n	8007b04 <_dtoa_r+0xa3c>
 8007ab0:	9b02      	ldr	r3, [sp, #8]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	dd01      	ble.n	8007aba <_dtoa_r+0x9f2>
 8007ab6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007aba:	9b07      	ldr	r3, [sp, #28]
 8007abc:	1c5d      	adds	r5, r3, #1
 8007abe:	f883 8000 	strb.w	r8, [r3]
 8007ac2:	e784      	b.n	80079ce <_dtoa_r+0x906>
 8007ac4:	4638      	mov	r0, r7
 8007ac6:	e7c2      	b.n	8007a4e <_dtoa_r+0x986>
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e7e3      	b.n	8007a94 <_dtoa_r+0x9cc>
 8007acc:	9a02      	ldr	r2, [sp, #8]
 8007ace:	2a00      	cmp	r2, #0
 8007ad0:	db04      	blt.n	8007adc <_dtoa_r+0xa14>
 8007ad2:	d123      	bne.n	8007b1c <_dtoa_r+0xa54>
 8007ad4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007ad6:	bb0a      	cbnz	r2, 8007b1c <_dtoa_r+0xa54>
 8007ad8:	9a08      	ldr	r2, [sp, #32]
 8007ada:	b9fa      	cbnz	r2, 8007b1c <_dtoa_r+0xa54>
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	ddec      	ble.n	8007aba <_dtoa_r+0x9f2>
 8007ae0:	4659      	mov	r1, fp
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	4620      	mov	r0, r4
 8007ae6:	f000 fa7b 	bl	8007fe0 <__lshift>
 8007aea:	4631      	mov	r1, r6
 8007aec:	4683      	mov	fp, r0
 8007aee:	f000 facb 	bl	8008088 <__mcmp>
 8007af2:	2800      	cmp	r0, #0
 8007af4:	dc03      	bgt.n	8007afe <_dtoa_r+0xa36>
 8007af6:	d1e0      	bne.n	8007aba <_dtoa_r+0x9f2>
 8007af8:	f018 0f01 	tst.w	r8, #1
 8007afc:	d0dd      	beq.n	8007aba <_dtoa_r+0x9f2>
 8007afe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007b02:	d1d8      	bne.n	8007ab6 <_dtoa_r+0x9ee>
 8007b04:	9b07      	ldr	r3, [sp, #28]
 8007b06:	9a07      	ldr	r2, [sp, #28]
 8007b08:	1c5d      	adds	r5, r3, #1
 8007b0a:	2339      	movs	r3, #57	; 0x39
 8007b0c:	7013      	strb	r3, [r2, #0]
 8007b0e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007b12:	1e6a      	subs	r2, r5, #1
 8007b14:	2b39      	cmp	r3, #57	; 0x39
 8007b16:	d04d      	beq.n	8007bb4 <_dtoa_r+0xaec>
 8007b18:	3301      	adds	r3, #1
 8007b1a:	e052      	b.n	8007bc2 <_dtoa_r+0xafa>
 8007b1c:	9a07      	ldr	r2, [sp, #28]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f102 0501 	add.w	r5, r2, #1
 8007b24:	dd06      	ble.n	8007b34 <_dtoa_r+0xa6c>
 8007b26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007b2a:	d0eb      	beq.n	8007b04 <_dtoa_r+0xa3c>
 8007b2c:	f108 0801 	add.w	r8, r8, #1
 8007b30:	9b07      	ldr	r3, [sp, #28]
 8007b32:	e7c4      	b.n	8007abe <_dtoa_r+0x9f6>
 8007b34:	9b06      	ldr	r3, [sp, #24]
 8007b36:	9a04      	ldr	r2, [sp, #16]
 8007b38:	1aeb      	subs	r3, r5, r3
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007b40:	d021      	beq.n	8007b86 <_dtoa_r+0xabe>
 8007b42:	4659      	mov	r1, fp
 8007b44:	2300      	movs	r3, #0
 8007b46:	220a      	movs	r2, #10
 8007b48:	4620      	mov	r0, r4
 8007b4a:	f000 f8d4 	bl	8007cf6 <__multadd>
 8007b4e:	45b9      	cmp	r9, r7
 8007b50:	4683      	mov	fp, r0
 8007b52:	f04f 0300 	mov.w	r3, #0
 8007b56:	f04f 020a 	mov.w	r2, #10
 8007b5a:	4649      	mov	r1, r9
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	d105      	bne.n	8007b6c <_dtoa_r+0xaa4>
 8007b60:	f000 f8c9 	bl	8007cf6 <__multadd>
 8007b64:	4681      	mov	r9, r0
 8007b66:	4607      	mov	r7, r0
 8007b68:	9507      	str	r5, [sp, #28]
 8007b6a:	e778      	b.n	8007a5e <_dtoa_r+0x996>
 8007b6c:	f000 f8c3 	bl	8007cf6 <__multadd>
 8007b70:	4639      	mov	r1, r7
 8007b72:	4681      	mov	r9, r0
 8007b74:	2300      	movs	r3, #0
 8007b76:	220a      	movs	r2, #10
 8007b78:	4620      	mov	r0, r4
 8007b7a:	f000 f8bc 	bl	8007cf6 <__multadd>
 8007b7e:	4607      	mov	r7, r0
 8007b80:	e7f2      	b.n	8007b68 <_dtoa_r+0xaa0>
 8007b82:	f04f 0900 	mov.w	r9, #0
 8007b86:	4659      	mov	r1, fp
 8007b88:	2201      	movs	r2, #1
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	f000 fa28 	bl	8007fe0 <__lshift>
 8007b90:	4631      	mov	r1, r6
 8007b92:	4683      	mov	fp, r0
 8007b94:	f000 fa78 	bl	8008088 <__mcmp>
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	dcb8      	bgt.n	8007b0e <_dtoa_r+0xa46>
 8007b9c:	d102      	bne.n	8007ba4 <_dtoa_r+0xadc>
 8007b9e:	f018 0f01 	tst.w	r8, #1
 8007ba2:	d1b4      	bne.n	8007b0e <_dtoa_r+0xa46>
 8007ba4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007ba8:	1e6a      	subs	r2, r5, #1
 8007baa:	2b30      	cmp	r3, #48	; 0x30
 8007bac:	f47f af0f 	bne.w	80079ce <_dtoa_r+0x906>
 8007bb0:	4615      	mov	r5, r2
 8007bb2:	e7f7      	b.n	8007ba4 <_dtoa_r+0xadc>
 8007bb4:	9b06      	ldr	r3, [sp, #24]
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d105      	bne.n	8007bc6 <_dtoa_r+0xafe>
 8007bba:	2331      	movs	r3, #49	; 0x31
 8007bbc:	9a06      	ldr	r2, [sp, #24]
 8007bbe:	f10a 0a01 	add.w	sl, sl, #1
 8007bc2:	7013      	strb	r3, [r2, #0]
 8007bc4:	e703      	b.n	80079ce <_dtoa_r+0x906>
 8007bc6:	4615      	mov	r5, r2
 8007bc8:	e7a1      	b.n	8007b0e <_dtoa_r+0xa46>
 8007bca:	4b17      	ldr	r3, [pc, #92]	; (8007c28 <_dtoa_r+0xb60>)
 8007bcc:	f7ff bae1 	b.w	8007192 <_dtoa_r+0xca>
 8007bd0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f47f aabb 	bne.w	800714e <_dtoa_r+0x86>
 8007bd8:	4b14      	ldr	r3, [pc, #80]	; (8007c2c <_dtoa_r+0xb64>)
 8007bda:	f7ff bada 	b.w	8007192 <_dtoa_r+0xca>
 8007bde:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	f77f ae3f 	ble.w	8007864 <_dtoa_r+0x79c>
 8007be6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007be8:	9308      	str	r3, [sp, #32]
 8007bea:	e653      	b.n	8007894 <_dtoa_r+0x7cc>
 8007bec:	9b04      	ldr	r3, [sp, #16]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	dc03      	bgt.n	8007bfa <_dtoa_r+0xb32>
 8007bf2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	f73f aed5 	bgt.w	80079a4 <_dtoa_r+0x8dc>
 8007bfa:	9d06      	ldr	r5, [sp, #24]
 8007bfc:	4631      	mov	r1, r6
 8007bfe:	4658      	mov	r0, fp
 8007c00:	f7ff f9d2 	bl	8006fa8 <quorem>
 8007c04:	9b06      	ldr	r3, [sp, #24]
 8007c06:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007c0a:	f805 8b01 	strb.w	r8, [r5], #1
 8007c0e:	9a04      	ldr	r2, [sp, #16]
 8007c10:	1aeb      	subs	r3, r5, r3
 8007c12:	429a      	cmp	r2, r3
 8007c14:	ddb5      	ble.n	8007b82 <_dtoa_r+0xaba>
 8007c16:	4659      	mov	r1, fp
 8007c18:	2300      	movs	r3, #0
 8007c1a:	220a      	movs	r2, #10
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	f000 f86a 	bl	8007cf6 <__multadd>
 8007c22:	4683      	mov	fp, r0
 8007c24:	e7ea      	b.n	8007bfc <_dtoa_r+0xb34>
 8007c26:	bf00      	nop
 8007c28:	08008450 	.word	0x08008450
 8007c2c:	08008452 	.word	0x08008452

08007c30 <_localeconv_r>:
 8007c30:	4b04      	ldr	r3, [pc, #16]	; (8007c44 <_localeconv_r+0x14>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6a18      	ldr	r0, [r3, #32]
 8007c36:	4b04      	ldr	r3, [pc, #16]	; (8007c48 <_localeconv_r+0x18>)
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	bf08      	it	eq
 8007c3c:	4618      	moveq	r0, r3
 8007c3e:	30f0      	adds	r0, #240	; 0xf0
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop
 8007c44:	20000170 	.word	0x20000170
 8007c48:	200001d4 	.word	0x200001d4

08007c4c <malloc>:
 8007c4c:	4b02      	ldr	r3, [pc, #8]	; (8007c58 <malloc+0xc>)
 8007c4e:	4601      	mov	r1, r0
 8007c50:	6818      	ldr	r0, [r3, #0]
 8007c52:	f7fe be01 	b.w	8006858 <_malloc_r>
 8007c56:	bf00      	nop
 8007c58:	20000170 	.word	0x20000170

08007c5c <__malloc_lock>:
 8007c5c:	4770      	bx	lr

08007c5e <__malloc_unlock>:
 8007c5e:	4770      	bx	lr

08007c60 <_Balloc>:
 8007c60:	b570      	push	{r4, r5, r6, lr}
 8007c62:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007c64:	4604      	mov	r4, r0
 8007c66:	460e      	mov	r6, r1
 8007c68:	b93d      	cbnz	r5, 8007c7a <_Balloc+0x1a>
 8007c6a:	2010      	movs	r0, #16
 8007c6c:	f7ff ffee 	bl	8007c4c <malloc>
 8007c70:	6260      	str	r0, [r4, #36]	; 0x24
 8007c72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007c76:	6005      	str	r5, [r0, #0]
 8007c78:	60c5      	str	r5, [r0, #12]
 8007c7a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007c7c:	68eb      	ldr	r3, [r5, #12]
 8007c7e:	b183      	cbz	r3, 8007ca2 <_Balloc+0x42>
 8007c80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007c88:	b9b8      	cbnz	r0, 8007cba <_Balloc+0x5a>
 8007c8a:	2101      	movs	r1, #1
 8007c8c:	fa01 f506 	lsl.w	r5, r1, r6
 8007c90:	1d6a      	adds	r2, r5, #5
 8007c92:	0092      	lsls	r2, r2, #2
 8007c94:	4620      	mov	r0, r4
 8007c96:	f7fe fdd0 	bl	800683a <_calloc_r>
 8007c9a:	b160      	cbz	r0, 8007cb6 <_Balloc+0x56>
 8007c9c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007ca0:	e00e      	b.n	8007cc0 <_Balloc+0x60>
 8007ca2:	2221      	movs	r2, #33	; 0x21
 8007ca4:	2104      	movs	r1, #4
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	f7fe fdc7 	bl	800683a <_calloc_r>
 8007cac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cae:	60e8      	str	r0, [r5, #12]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1e4      	bne.n	8007c80 <_Balloc+0x20>
 8007cb6:	2000      	movs	r0, #0
 8007cb8:	bd70      	pop	{r4, r5, r6, pc}
 8007cba:	6802      	ldr	r2, [r0, #0]
 8007cbc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007cc6:	e7f7      	b.n	8007cb8 <_Balloc+0x58>

08007cc8 <_Bfree>:
 8007cc8:	b570      	push	{r4, r5, r6, lr}
 8007cca:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007ccc:	4606      	mov	r6, r0
 8007cce:	460d      	mov	r5, r1
 8007cd0:	b93c      	cbnz	r4, 8007ce2 <_Bfree+0x1a>
 8007cd2:	2010      	movs	r0, #16
 8007cd4:	f7ff ffba 	bl	8007c4c <malloc>
 8007cd8:	6270      	str	r0, [r6, #36]	; 0x24
 8007cda:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007cde:	6004      	str	r4, [r0, #0]
 8007ce0:	60c4      	str	r4, [r0, #12]
 8007ce2:	b13d      	cbz	r5, 8007cf4 <_Bfree+0x2c>
 8007ce4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007ce6:	686a      	ldr	r2, [r5, #4]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007cee:	6029      	str	r1, [r5, #0]
 8007cf0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007cf4:	bd70      	pop	{r4, r5, r6, pc}

08007cf6 <__multadd>:
 8007cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cfa:	461f      	mov	r7, r3
 8007cfc:	4606      	mov	r6, r0
 8007cfe:	460c      	mov	r4, r1
 8007d00:	2300      	movs	r3, #0
 8007d02:	690d      	ldr	r5, [r1, #16]
 8007d04:	f101 0c14 	add.w	ip, r1, #20
 8007d08:	f8dc 0000 	ldr.w	r0, [ip]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	b281      	uxth	r1, r0
 8007d10:	fb02 7101 	mla	r1, r2, r1, r7
 8007d14:	0c00      	lsrs	r0, r0, #16
 8007d16:	0c0f      	lsrs	r7, r1, #16
 8007d18:	fb02 7000 	mla	r0, r2, r0, r7
 8007d1c:	b289      	uxth	r1, r1
 8007d1e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007d22:	429d      	cmp	r5, r3
 8007d24:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007d28:	f84c 1b04 	str.w	r1, [ip], #4
 8007d2c:	dcec      	bgt.n	8007d08 <__multadd+0x12>
 8007d2e:	b1d7      	cbz	r7, 8007d66 <__multadd+0x70>
 8007d30:	68a3      	ldr	r3, [r4, #8]
 8007d32:	42ab      	cmp	r3, r5
 8007d34:	dc12      	bgt.n	8007d5c <__multadd+0x66>
 8007d36:	6861      	ldr	r1, [r4, #4]
 8007d38:	4630      	mov	r0, r6
 8007d3a:	3101      	adds	r1, #1
 8007d3c:	f7ff ff90 	bl	8007c60 <_Balloc>
 8007d40:	4680      	mov	r8, r0
 8007d42:	6922      	ldr	r2, [r4, #16]
 8007d44:	f104 010c 	add.w	r1, r4, #12
 8007d48:	3202      	adds	r2, #2
 8007d4a:	0092      	lsls	r2, r2, #2
 8007d4c:	300c      	adds	r0, #12
 8007d4e:	f7fe fd61 	bl	8006814 <memcpy>
 8007d52:	4621      	mov	r1, r4
 8007d54:	4630      	mov	r0, r6
 8007d56:	f7ff ffb7 	bl	8007cc8 <_Bfree>
 8007d5a:	4644      	mov	r4, r8
 8007d5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d60:	3501      	adds	r5, #1
 8007d62:	615f      	str	r7, [r3, #20]
 8007d64:	6125      	str	r5, [r4, #16]
 8007d66:	4620      	mov	r0, r4
 8007d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007d6c <__hi0bits>:
 8007d6c:	0c02      	lsrs	r2, r0, #16
 8007d6e:	0412      	lsls	r2, r2, #16
 8007d70:	4603      	mov	r3, r0
 8007d72:	b9b2      	cbnz	r2, 8007da2 <__hi0bits+0x36>
 8007d74:	0403      	lsls	r3, r0, #16
 8007d76:	2010      	movs	r0, #16
 8007d78:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007d7c:	bf04      	itt	eq
 8007d7e:	021b      	lsleq	r3, r3, #8
 8007d80:	3008      	addeq	r0, #8
 8007d82:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007d86:	bf04      	itt	eq
 8007d88:	011b      	lsleq	r3, r3, #4
 8007d8a:	3004      	addeq	r0, #4
 8007d8c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007d90:	bf04      	itt	eq
 8007d92:	009b      	lsleq	r3, r3, #2
 8007d94:	3002      	addeq	r0, #2
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	db06      	blt.n	8007da8 <__hi0bits+0x3c>
 8007d9a:	005b      	lsls	r3, r3, #1
 8007d9c:	d503      	bpl.n	8007da6 <__hi0bits+0x3a>
 8007d9e:	3001      	adds	r0, #1
 8007da0:	4770      	bx	lr
 8007da2:	2000      	movs	r0, #0
 8007da4:	e7e8      	b.n	8007d78 <__hi0bits+0xc>
 8007da6:	2020      	movs	r0, #32
 8007da8:	4770      	bx	lr

08007daa <__lo0bits>:
 8007daa:	6803      	ldr	r3, [r0, #0]
 8007dac:	4601      	mov	r1, r0
 8007dae:	f013 0207 	ands.w	r2, r3, #7
 8007db2:	d00b      	beq.n	8007dcc <__lo0bits+0x22>
 8007db4:	07da      	lsls	r2, r3, #31
 8007db6:	d423      	bmi.n	8007e00 <__lo0bits+0x56>
 8007db8:	0798      	lsls	r0, r3, #30
 8007dba:	bf49      	itett	mi
 8007dbc:	085b      	lsrmi	r3, r3, #1
 8007dbe:	089b      	lsrpl	r3, r3, #2
 8007dc0:	2001      	movmi	r0, #1
 8007dc2:	600b      	strmi	r3, [r1, #0]
 8007dc4:	bf5c      	itt	pl
 8007dc6:	600b      	strpl	r3, [r1, #0]
 8007dc8:	2002      	movpl	r0, #2
 8007dca:	4770      	bx	lr
 8007dcc:	b298      	uxth	r0, r3
 8007dce:	b9a8      	cbnz	r0, 8007dfc <__lo0bits+0x52>
 8007dd0:	2010      	movs	r0, #16
 8007dd2:	0c1b      	lsrs	r3, r3, #16
 8007dd4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007dd8:	bf04      	itt	eq
 8007dda:	0a1b      	lsreq	r3, r3, #8
 8007ddc:	3008      	addeq	r0, #8
 8007dde:	071a      	lsls	r2, r3, #28
 8007de0:	bf04      	itt	eq
 8007de2:	091b      	lsreq	r3, r3, #4
 8007de4:	3004      	addeq	r0, #4
 8007de6:	079a      	lsls	r2, r3, #30
 8007de8:	bf04      	itt	eq
 8007dea:	089b      	lsreq	r3, r3, #2
 8007dec:	3002      	addeq	r0, #2
 8007dee:	07da      	lsls	r2, r3, #31
 8007df0:	d402      	bmi.n	8007df8 <__lo0bits+0x4e>
 8007df2:	085b      	lsrs	r3, r3, #1
 8007df4:	d006      	beq.n	8007e04 <__lo0bits+0x5a>
 8007df6:	3001      	adds	r0, #1
 8007df8:	600b      	str	r3, [r1, #0]
 8007dfa:	4770      	bx	lr
 8007dfc:	4610      	mov	r0, r2
 8007dfe:	e7e9      	b.n	8007dd4 <__lo0bits+0x2a>
 8007e00:	2000      	movs	r0, #0
 8007e02:	4770      	bx	lr
 8007e04:	2020      	movs	r0, #32
 8007e06:	4770      	bx	lr

08007e08 <__i2b>:
 8007e08:	b510      	push	{r4, lr}
 8007e0a:	460c      	mov	r4, r1
 8007e0c:	2101      	movs	r1, #1
 8007e0e:	f7ff ff27 	bl	8007c60 <_Balloc>
 8007e12:	2201      	movs	r2, #1
 8007e14:	6144      	str	r4, [r0, #20]
 8007e16:	6102      	str	r2, [r0, #16]
 8007e18:	bd10      	pop	{r4, pc}

08007e1a <__multiply>:
 8007e1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e1e:	4614      	mov	r4, r2
 8007e20:	690a      	ldr	r2, [r1, #16]
 8007e22:	6923      	ldr	r3, [r4, #16]
 8007e24:	4688      	mov	r8, r1
 8007e26:	429a      	cmp	r2, r3
 8007e28:	bfbe      	ittt	lt
 8007e2a:	460b      	movlt	r3, r1
 8007e2c:	46a0      	movlt	r8, r4
 8007e2e:	461c      	movlt	r4, r3
 8007e30:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007e34:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007e38:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007e3c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007e40:	eb07 0609 	add.w	r6, r7, r9
 8007e44:	42b3      	cmp	r3, r6
 8007e46:	bfb8      	it	lt
 8007e48:	3101      	addlt	r1, #1
 8007e4a:	f7ff ff09 	bl	8007c60 <_Balloc>
 8007e4e:	f100 0514 	add.w	r5, r0, #20
 8007e52:	462b      	mov	r3, r5
 8007e54:	2200      	movs	r2, #0
 8007e56:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007e5a:	4573      	cmp	r3, lr
 8007e5c:	d316      	bcc.n	8007e8c <__multiply+0x72>
 8007e5e:	f104 0214 	add.w	r2, r4, #20
 8007e62:	f108 0114 	add.w	r1, r8, #20
 8007e66:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007e6a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007e6e:	9300      	str	r3, [sp, #0]
 8007e70:	9b00      	ldr	r3, [sp, #0]
 8007e72:	9201      	str	r2, [sp, #4]
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d80c      	bhi.n	8007e92 <__multiply+0x78>
 8007e78:	2e00      	cmp	r6, #0
 8007e7a:	dd03      	ble.n	8007e84 <__multiply+0x6a>
 8007e7c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d05d      	beq.n	8007f40 <__multiply+0x126>
 8007e84:	6106      	str	r6, [r0, #16]
 8007e86:	b003      	add	sp, #12
 8007e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e8c:	f843 2b04 	str.w	r2, [r3], #4
 8007e90:	e7e3      	b.n	8007e5a <__multiply+0x40>
 8007e92:	f8b2 b000 	ldrh.w	fp, [r2]
 8007e96:	f1bb 0f00 	cmp.w	fp, #0
 8007e9a:	d023      	beq.n	8007ee4 <__multiply+0xca>
 8007e9c:	4689      	mov	r9, r1
 8007e9e:	46ac      	mov	ip, r5
 8007ea0:	f04f 0800 	mov.w	r8, #0
 8007ea4:	f859 4b04 	ldr.w	r4, [r9], #4
 8007ea8:	f8dc a000 	ldr.w	sl, [ip]
 8007eac:	b2a3      	uxth	r3, r4
 8007eae:	fa1f fa8a 	uxth.w	sl, sl
 8007eb2:	fb0b a303 	mla	r3, fp, r3, sl
 8007eb6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007eba:	f8dc 4000 	ldr.w	r4, [ip]
 8007ebe:	4443      	add	r3, r8
 8007ec0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007ec4:	fb0b 840a 	mla	r4, fp, sl, r8
 8007ec8:	46e2      	mov	sl, ip
 8007eca:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007ed4:	454f      	cmp	r7, r9
 8007ed6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007eda:	f84a 3b04 	str.w	r3, [sl], #4
 8007ede:	d82b      	bhi.n	8007f38 <__multiply+0x11e>
 8007ee0:	f8cc 8004 	str.w	r8, [ip, #4]
 8007ee4:	9b01      	ldr	r3, [sp, #4]
 8007ee6:	3204      	adds	r2, #4
 8007ee8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007eec:	f1ba 0f00 	cmp.w	sl, #0
 8007ef0:	d020      	beq.n	8007f34 <__multiply+0x11a>
 8007ef2:	4689      	mov	r9, r1
 8007ef4:	46a8      	mov	r8, r5
 8007ef6:	f04f 0b00 	mov.w	fp, #0
 8007efa:	682b      	ldr	r3, [r5, #0]
 8007efc:	f8b9 c000 	ldrh.w	ip, [r9]
 8007f00:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	fb0a 440c 	mla	r4, sl, ip, r4
 8007f0a:	46c4      	mov	ip, r8
 8007f0c:	445c      	add	r4, fp
 8007f0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007f12:	f84c 3b04 	str.w	r3, [ip], #4
 8007f16:	f859 3b04 	ldr.w	r3, [r9], #4
 8007f1a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007f1e:	0c1b      	lsrs	r3, r3, #16
 8007f20:	fb0a b303 	mla	r3, sl, r3, fp
 8007f24:	454f      	cmp	r7, r9
 8007f26:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007f2a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007f2e:	d805      	bhi.n	8007f3c <__multiply+0x122>
 8007f30:	f8c8 3004 	str.w	r3, [r8, #4]
 8007f34:	3504      	adds	r5, #4
 8007f36:	e79b      	b.n	8007e70 <__multiply+0x56>
 8007f38:	46d4      	mov	ip, sl
 8007f3a:	e7b3      	b.n	8007ea4 <__multiply+0x8a>
 8007f3c:	46e0      	mov	r8, ip
 8007f3e:	e7dd      	b.n	8007efc <__multiply+0xe2>
 8007f40:	3e01      	subs	r6, #1
 8007f42:	e799      	b.n	8007e78 <__multiply+0x5e>

08007f44 <__pow5mult>:
 8007f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f48:	4615      	mov	r5, r2
 8007f4a:	f012 0203 	ands.w	r2, r2, #3
 8007f4e:	4606      	mov	r6, r0
 8007f50:	460f      	mov	r7, r1
 8007f52:	d007      	beq.n	8007f64 <__pow5mult+0x20>
 8007f54:	4c21      	ldr	r4, [pc, #132]	; (8007fdc <__pow5mult+0x98>)
 8007f56:	3a01      	subs	r2, #1
 8007f58:	2300      	movs	r3, #0
 8007f5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f5e:	f7ff feca 	bl	8007cf6 <__multadd>
 8007f62:	4607      	mov	r7, r0
 8007f64:	10ad      	asrs	r5, r5, #2
 8007f66:	d035      	beq.n	8007fd4 <__pow5mult+0x90>
 8007f68:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007f6a:	b93c      	cbnz	r4, 8007f7c <__pow5mult+0x38>
 8007f6c:	2010      	movs	r0, #16
 8007f6e:	f7ff fe6d 	bl	8007c4c <malloc>
 8007f72:	6270      	str	r0, [r6, #36]	; 0x24
 8007f74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f78:	6004      	str	r4, [r0, #0]
 8007f7a:	60c4      	str	r4, [r0, #12]
 8007f7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007f80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f84:	b94c      	cbnz	r4, 8007f9a <__pow5mult+0x56>
 8007f86:	f240 2171 	movw	r1, #625	; 0x271
 8007f8a:	4630      	mov	r0, r6
 8007f8c:	f7ff ff3c 	bl	8007e08 <__i2b>
 8007f90:	2300      	movs	r3, #0
 8007f92:	4604      	mov	r4, r0
 8007f94:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f98:	6003      	str	r3, [r0, #0]
 8007f9a:	f04f 0800 	mov.w	r8, #0
 8007f9e:	07eb      	lsls	r3, r5, #31
 8007fa0:	d50a      	bpl.n	8007fb8 <__pow5mult+0x74>
 8007fa2:	4639      	mov	r1, r7
 8007fa4:	4622      	mov	r2, r4
 8007fa6:	4630      	mov	r0, r6
 8007fa8:	f7ff ff37 	bl	8007e1a <__multiply>
 8007fac:	4681      	mov	r9, r0
 8007fae:	4639      	mov	r1, r7
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	f7ff fe89 	bl	8007cc8 <_Bfree>
 8007fb6:	464f      	mov	r7, r9
 8007fb8:	106d      	asrs	r5, r5, #1
 8007fba:	d00b      	beq.n	8007fd4 <__pow5mult+0x90>
 8007fbc:	6820      	ldr	r0, [r4, #0]
 8007fbe:	b938      	cbnz	r0, 8007fd0 <__pow5mult+0x8c>
 8007fc0:	4622      	mov	r2, r4
 8007fc2:	4621      	mov	r1, r4
 8007fc4:	4630      	mov	r0, r6
 8007fc6:	f7ff ff28 	bl	8007e1a <__multiply>
 8007fca:	6020      	str	r0, [r4, #0]
 8007fcc:	f8c0 8000 	str.w	r8, [r0]
 8007fd0:	4604      	mov	r4, r0
 8007fd2:	e7e4      	b.n	8007f9e <__pow5mult+0x5a>
 8007fd4:	4638      	mov	r0, r7
 8007fd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fda:	bf00      	nop
 8007fdc:	08008550 	.word	0x08008550

08007fe0 <__lshift>:
 8007fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fe4:	460c      	mov	r4, r1
 8007fe6:	4607      	mov	r7, r0
 8007fe8:	4616      	mov	r6, r2
 8007fea:	6923      	ldr	r3, [r4, #16]
 8007fec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ff0:	eb0a 0903 	add.w	r9, sl, r3
 8007ff4:	6849      	ldr	r1, [r1, #4]
 8007ff6:	68a3      	ldr	r3, [r4, #8]
 8007ff8:	f109 0501 	add.w	r5, r9, #1
 8007ffc:	42ab      	cmp	r3, r5
 8007ffe:	db32      	blt.n	8008066 <__lshift+0x86>
 8008000:	4638      	mov	r0, r7
 8008002:	f7ff fe2d 	bl	8007c60 <_Balloc>
 8008006:	2300      	movs	r3, #0
 8008008:	4680      	mov	r8, r0
 800800a:	461a      	mov	r2, r3
 800800c:	f100 0114 	add.w	r1, r0, #20
 8008010:	4553      	cmp	r3, sl
 8008012:	db2b      	blt.n	800806c <__lshift+0x8c>
 8008014:	6920      	ldr	r0, [r4, #16]
 8008016:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800801a:	f104 0314 	add.w	r3, r4, #20
 800801e:	f016 021f 	ands.w	r2, r6, #31
 8008022:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008026:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800802a:	d025      	beq.n	8008078 <__lshift+0x98>
 800802c:	2000      	movs	r0, #0
 800802e:	f1c2 0e20 	rsb	lr, r2, #32
 8008032:	468a      	mov	sl, r1
 8008034:	681e      	ldr	r6, [r3, #0]
 8008036:	4096      	lsls	r6, r2
 8008038:	4330      	orrs	r0, r6
 800803a:	f84a 0b04 	str.w	r0, [sl], #4
 800803e:	f853 0b04 	ldr.w	r0, [r3], #4
 8008042:	459c      	cmp	ip, r3
 8008044:	fa20 f00e 	lsr.w	r0, r0, lr
 8008048:	d814      	bhi.n	8008074 <__lshift+0x94>
 800804a:	6048      	str	r0, [r1, #4]
 800804c:	b108      	cbz	r0, 8008052 <__lshift+0x72>
 800804e:	f109 0502 	add.w	r5, r9, #2
 8008052:	3d01      	subs	r5, #1
 8008054:	4638      	mov	r0, r7
 8008056:	f8c8 5010 	str.w	r5, [r8, #16]
 800805a:	4621      	mov	r1, r4
 800805c:	f7ff fe34 	bl	8007cc8 <_Bfree>
 8008060:	4640      	mov	r0, r8
 8008062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008066:	3101      	adds	r1, #1
 8008068:	005b      	lsls	r3, r3, #1
 800806a:	e7c7      	b.n	8007ffc <__lshift+0x1c>
 800806c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008070:	3301      	adds	r3, #1
 8008072:	e7cd      	b.n	8008010 <__lshift+0x30>
 8008074:	4651      	mov	r1, sl
 8008076:	e7dc      	b.n	8008032 <__lshift+0x52>
 8008078:	3904      	subs	r1, #4
 800807a:	f853 2b04 	ldr.w	r2, [r3], #4
 800807e:	459c      	cmp	ip, r3
 8008080:	f841 2f04 	str.w	r2, [r1, #4]!
 8008084:	d8f9      	bhi.n	800807a <__lshift+0x9a>
 8008086:	e7e4      	b.n	8008052 <__lshift+0x72>

08008088 <__mcmp>:
 8008088:	6903      	ldr	r3, [r0, #16]
 800808a:	690a      	ldr	r2, [r1, #16]
 800808c:	b530      	push	{r4, r5, lr}
 800808e:	1a9b      	subs	r3, r3, r2
 8008090:	d10c      	bne.n	80080ac <__mcmp+0x24>
 8008092:	0092      	lsls	r2, r2, #2
 8008094:	3014      	adds	r0, #20
 8008096:	3114      	adds	r1, #20
 8008098:	1884      	adds	r4, r0, r2
 800809a:	4411      	add	r1, r2
 800809c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80080a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80080a4:	4295      	cmp	r5, r2
 80080a6:	d003      	beq.n	80080b0 <__mcmp+0x28>
 80080a8:	d305      	bcc.n	80080b6 <__mcmp+0x2e>
 80080aa:	2301      	movs	r3, #1
 80080ac:	4618      	mov	r0, r3
 80080ae:	bd30      	pop	{r4, r5, pc}
 80080b0:	42a0      	cmp	r0, r4
 80080b2:	d3f3      	bcc.n	800809c <__mcmp+0x14>
 80080b4:	e7fa      	b.n	80080ac <__mcmp+0x24>
 80080b6:	f04f 33ff 	mov.w	r3, #4294967295
 80080ba:	e7f7      	b.n	80080ac <__mcmp+0x24>

080080bc <__mdiff>:
 80080bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080c0:	460d      	mov	r5, r1
 80080c2:	4607      	mov	r7, r0
 80080c4:	4611      	mov	r1, r2
 80080c6:	4628      	mov	r0, r5
 80080c8:	4614      	mov	r4, r2
 80080ca:	f7ff ffdd 	bl	8008088 <__mcmp>
 80080ce:	1e06      	subs	r6, r0, #0
 80080d0:	d108      	bne.n	80080e4 <__mdiff+0x28>
 80080d2:	4631      	mov	r1, r6
 80080d4:	4638      	mov	r0, r7
 80080d6:	f7ff fdc3 	bl	8007c60 <_Balloc>
 80080da:	2301      	movs	r3, #1
 80080dc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80080e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080e4:	bfa4      	itt	ge
 80080e6:	4623      	movge	r3, r4
 80080e8:	462c      	movge	r4, r5
 80080ea:	4638      	mov	r0, r7
 80080ec:	6861      	ldr	r1, [r4, #4]
 80080ee:	bfa6      	itte	ge
 80080f0:	461d      	movge	r5, r3
 80080f2:	2600      	movge	r6, #0
 80080f4:	2601      	movlt	r6, #1
 80080f6:	f7ff fdb3 	bl	8007c60 <_Balloc>
 80080fa:	f04f 0e00 	mov.w	lr, #0
 80080fe:	60c6      	str	r6, [r0, #12]
 8008100:	692b      	ldr	r3, [r5, #16]
 8008102:	6926      	ldr	r6, [r4, #16]
 8008104:	f104 0214 	add.w	r2, r4, #20
 8008108:	f105 0914 	add.w	r9, r5, #20
 800810c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008110:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008114:	f100 0114 	add.w	r1, r0, #20
 8008118:	f852 ab04 	ldr.w	sl, [r2], #4
 800811c:	f859 5b04 	ldr.w	r5, [r9], #4
 8008120:	fa1f f38a 	uxth.w	r3, sl
 8008124:	4473      	add	r3, lr
 8008126:	b2ac      	uxth	r4, r5
 8008128:	1b1b      	subs	r3, r3, r4
 800812a:	0c2c      	lsrs	r4, r5, #16
 800812c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8008130:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8008134:	b29b      	uxth	r3, r3
 8008136:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800813a:	45c8      	cmp	r8, r9
 800813c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008140:	4694      	mov	ip, r2
 8008142:	f841 4b04 	str.w	r4, [r1], #4
 8008146:	d8e7      	bhi.n	8008118 <__mdiff+0x5c>
 8008148:	45bc      	cmp	ip, r7
 800814a:	d304      	bcc.n	8008156 <__mdiff+0x9a>
 800814c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008150:	b183      	cbz	r3, 8008174 <__mdiff+0xb8>
 8008152:	6106      	str	r6, [r0, #16]
 8008154:	e7c4      	b.n	80080e0 <__mdiff+0x24>
 8008156:	f85c 4b04 	ldr.w	r4, [ip], #4
 800815a:	b2a2      	uxth	r2, r4
 800815c:	4472      	add	r2, lr
 800815e:	1413      	asrs	r3, r2, #16
 8008160:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008164:	b292      	uxth	r2, r2
 8008166:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800816a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800816e:	f841 2b04 	str.w	r2, [r1], #4
 8008172:	e7e9      	b.n	8008148 <__mdiff+0x8c>
 8008174:	3e01      	subs	r6, #1
 8008176:	e7e9      	b.n	800814c <__mdiff+0x90>

08008178 <__d2b>:
 8008178:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800817c:	461c      	mov	r4, r3
 800817e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8008182:	2101      	movs	r1, #1
 8008184:	4690      	mov	r8, r2
 8008186:	f7ff fd6b 	bl	8007c60 <_Balloc>
 800818a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800818e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8008192:	4607      	mov	r7, r0
 8008194:	bb34      	cbnz	r4, 80081e4 <__d2b+0x6c>
 8008196:	9201      	str	r2, [sp, #4]
 8008198:	f1b8 0200 	subs.w	r2, r8, #0
 800819c:	d027      	beq.n	80081ee <__d2b+0x76>
 800819e:	a802      	add	r0, sp, #8
 80081a0:	f840 2d08 	str.w	r2, [r0, #-8]!
 80081a4:	f7ff fe01 	bl	8007daa <__lo0bits>
 80081a8:	9900      	ldr	r1, [sp, #0]
 80081aa:	b1f0      	cbz	r0, 80081ea <__d2b+0x72>
 80081ac:	9a01      	ldr	r2, [sp, #4]
 80081ae:	f1c0 0320 	rsb	r3, r0, #32
 80081b2:	fa02 f303 	lsl.w	r3, r2, r3
 80081b6:	430b      	orrs	r3, r1
 80081b8:	40c2      	lsrs	r2, r0
 80081ba:	617b      	str	r3, [r7, #20]
 80081bc:	9201      	str	r2, [sp, #4]
 80081be:	9b01      	ldr	r3, [sp, #4]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	bf14      	ite	ne
 80081c4:	2102      	movne	r1, #2
 80081c6:	2101      	moveq	r1, #1
 80081c8:	61bb      	str	r3, [r7, #24]
 80081ca:	6139      	str	r1, [r7, #16]
 80081cc:	b1c4      	cbz	r4, 8008200 <__d2b+0x88>
 80081ce:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80081d2:	4404      	add	r4, r0
 80081d4:	6034      	str	r4, [r6, #0]
 80081d6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80081da:	6028      	str	r0, [r5, #0]
 80081dc:	4638      	mov	r0, r7
 80081de:	b002      	add	sp, #8
 80081e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081e4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80081e8:	e7d5      	b.n	8008196 <__d2b+0x1e>
 80081ea:	6179      	str	r1, [r7, #20]
 80081ec:	e7e7      	b.n	80081be <__d2b+0x46>
 80081ee:	a801      	add	r0, sp, #4
 80081f0:	f7ff fddb 	bl	8007daa <__lo0bits>
 80081f4:	2101      	movs	r1, #1
 80081f6:	9b01      	ldr	r3, [sp, #4]
 80081f8:	6139      	str	r1, [r7, #16]
 80081fa:	617b      	str	r3, [r7, #20]
 80081fc:	3020      	adds	r0, #32
 80081fe:	e7e5      	b.n	80081cc <__d2b+0x54>
 8008200:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008204:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008208:	6030      	str	r0, [r6, #0]
 800820a:	6918      	ldr	r0, [r3, #16]
 800820c:	f7ff fdae 	bl	8007d6c <__hi0bits>
 8008210:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008214:	e7e1      	b.n	80081da <__d2b+0x62>

08008216 <__ascii_mbtowc>:
 8008216:	b082      	sub	sp, #8
 8008218:	b901      	cbnz	r1, 800821c <__ascii_mbtowc+0x6>
 800821a:	a901      	add	r1, sp, #4
 800821c:	b142      	cbz	r2, 8008230 <__ascii_mbtowc+0x1a>
 800821e:	b14b      	cbz	r3, 8008234 <__ascii_mbtowc+0x1e>
 8008220:	7813      	ldrb	r3, [r2, #0]
 8008222:	600b      	str	r3, [r1, #0]
 8008224:	7812      	ldrb	r2, [r2, #0]
 8008226:	1c10      	adds	r0, r2, #0
 8008228:	bf18      	it	ne
 800822a:	2001      	movne	r0, #1
 800822c:	b002      	add	sp, #8
 800822e:	4770      	bx	lr
 8008230:	4610      	mov	r0, r2
 8008232:	e7fb      	b.n	800822c <__ascii_mbtowc+0x16>
 8008234:	f06f 0001 	mvn.w	r0, #1
 8008238:	e7f8      	b.n	800822c <__ascii_mbtowc+0x16>

0800823a <__ascii_wctomb>:
 800823a:	b149      	cbz	r1, 8008250 <__ascii_wctomb+0x16>
 800823c:	2aff      	cmp	r2, #255	; 0xff
 800823e:	bf8b      	itete	hi
 8008240:	238a      	movhi	r3, #138	; 0x8a
 8008242:	700a      	strbls	r2, [r1, #0]
 8008244:	6003      	strhi	r3, [r0, #0]
 8008246:	2001      	movls	r0, #1
 8008248:	bf88      	it	hi
 800824a:	f04f 30ff 	movhi.w	r0, #4294967295
 800824e:	4770      	bx	lr
 8008250:	4608      	mov	r0, r1
 8008252:	4770      	bx	lr

08008254 <_init>:
 8008254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008256:	bf00      	nop
 8008258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800825a:	bc08      	pop	{r3}
 800825c:	469e      	mov	lr, r3
 800825e:	4770      	bx	lr

08008260 <_fini>:
 8008260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008262:	bf00      	nop
 8008264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008266:	bc08      	pop	{r3}
 8008268:	469e      	mov	lr, r3
 800826a:	4770      	bx	lr
